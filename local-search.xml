<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<!-- * @Title:  万维网与超文本传输协议 * @Description:  * @Author: horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-27-章-万维网与超文本传输协议"><a href="#第-27-章-万维网与超文本传输协议" class="headerlink" title="第 27 章 万维网与超文本传输协议"></a>第 27 章 万维网与超文本传输协议</h1><h2 id="一-URL"><a href="#一-URL" class="headerlink" title="一. URL"></a>一. URL</h2><blockquote><p>URL: Uniform Resource Locator, 统一资源定位符</p></blockquote><ul><li>格式:协议 :// 主机 : 端口 / 路径<ul><li>例如 <code>https://www.xidian.edu.cn/</code></li></ul></li><li>端口可选, 协议最常用的是 HTTP/ftp</li></ul><h2 id="二-HTTP"><a href="#二-HTTP" class="headerlink" title="二. HTTP"></a>二. HTTP</h2><p><strong>概念、报文结构</strong>、HTTP 操作，<strong>采用 TCP 服务的端口</strong></p><blockquote><p>HTTP: HyperText Transfer Protocol, 超文本传输协议</p></blockquote><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>超文本传输协议（HTTP）主要用于万维网上存取数据的协议</li><li>在 80 端口上使用 TCP</li><li>同样用来存取信息, 类似 FTP 和 SMTP 的组合</li></ul><h3 id="报文结构"><a href="#报文结构" class="headerlink" title="报文结构"></a>报文结构</h3><ul><li><p>报文格式由类似MIME的头部控制。HTTP与SMTP不同的是，HTTP报文不是供人阅读的，它们是由HTTP服务器和HTTP客户端（浏览器）读取并解释。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/20210622141444.png" alt="req" style="zoom:67%;"><blockquote><p>请求报文的结构</p></blockquote><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/%E7%AC%AC27%E7%AB%A0_%E4%B8%87%E7%BB%B4%E7%BD%91%E4%B8%8E%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE/20210622141525.png" alt="res" style="zoom:67%;"></li></ul><blockquote><p>响应报文的结构</p></blockquote><ul><li>都是纯文本的</li><li>请求类型: GET, POST, HEAD, PUT, TRACE 等等</li><li>首部: 类似于选项, 指定了可接受的格式, 语言, 过期时间等</li></ul><h3 id="HTTP-操作"><a href="#HTTP-操作" class="headerlink" title="HTTP 操作"></a>HTTP 操作</h3><ul><li>HTTP 本身是无状态的, 状态需要依赖 cookie 保存</li><li>客户端发送请求报文来初始化HTTP事务</li><li>服务器发送响应报文进行回复</li></ul><h3 id="采用-TCP-服务的端口"><a href="#采用-TCP-服务的端口" class="headerlink" title="采用 TCP 服务的端口"></a>采用 TCP 服务的端口</h3><ul><li>HTTP在熟知端口80上使用TCP服务。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 远程登录、电子邮件和文件传输 * @Description:  * @Author: horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-26-章-远程登录、电子邮件和文件传输"><a href="#第-26-章-远程登录、电子邮件和文件传输" class="headerlink" title="第 26 章 远程登录、电子邮件和文件传输"></a>第 26 章 远程登录、电子邮件和文件传输</h1><h2 id="一-Telnet-的基本概念"><a href="#一-Telnet-的基本概念" class="headerlink" title="一. Telnet 的基本概念"></a>一. Telnet 的基本概念</h2><blockquote><p>TELNET: Terminal NETwork, 终端网络</p></blockquote><ul><li>建立到远程计算机的连接 (类似命令行版本的远程桌面)</li><li>是客户端/服务器架构</li></ul><h2 id="二-电子邮件"><a href="#二-电子邮件" class="headerlink" title="二.电子邮件"></a>二.电子邮件</h2><p>电子邮件的架构、邮件报文、<strong>SMTP 和 MIME、POP3 和 IMAP</strong></p><h4 id="构架"><a href="#构架" class="headerlink" title="构架"></a>构架</h4><ul><li>UA: 用户代理程序, 负责生成邮件 (outlook等)</li><li>MTA: 报文传输代理, 负责发送&amp;接收, 客户端只能推入报文 (push)</li><li>MAA: 报文访问代理, 负责提供收到的报文, 客户端只能取出报文 (pull)</li><li>发送方为 A, 接收方为 B:<ul><li>同一系统: A -&gt; UA -&gt; 系统 -&gt; UA -&gt; B</li><li>不同系统: A -&gt; UA -&gt; MTA客户端(在邮件服务器上) -&gt; 因特网 -&gt; MTA服务器(在另一台邮件服务器上) -&gt; UA -&gt; B</li><li>一方未直接连接到邮件服务器: 先通过广域网/局域网把邮件报文发到服务器</li><li>双方均为👆: A-&gt;UA-&gt;MTA客户端(在A的计算机上)-&gt;MTA客户端(在邮件服务器上)-&gt;因特网-&gt;MTA服务器(在另一台邮件服务器上)-&gt;MAA服务器(同前)-&gt;MAA客户端(在B计算机上)-&gt;UA-&gt;B</li></ul></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/image-20210623152520219.png" alt="image-20210623152520219" style="zoom:67%;"><h4 id="MIME-IMP"><a href="#MIME-IMP" class="headerlink" title="MIME [IMP]"></a>MIME [IMP]</h4><blockquote><p>MIME: Multipurpose Internet Mail Extension, 多用途因特网邮件扩展</p></blockquote><ul><li>将非 ASCII 数据转换成 NVT ASCII 数据</li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/image-20210623153524590.png" alt="image-20210623153524590" style="zoom:67%;"></li></ul><h4 id="SMTP-IMP"><a href="#SMTP-IMP" class="headerlink" title="SMTP [IMP]"></a>SMTP [IMP]</h4><blockquote><p>SMTP: Simple Mail Transfer Protocol, 简单邮件传输协议</p></blockquote><ul><li>是报文传输代理 (MTA) 协议</li><li>定义了一组交换邮件的命令</li><li>连接建立-&gt;邮件发送-&gt;连接释放</li></ul><h4 id="POP3-和-IMAP4-IMP"><a href="#POP3-和-IMAP4-IMP" class="headerlink" title="POP3 和 IMAP4 [IMP]"></a>POP3 和 IMAP4 [IMP]</h4><blockquote><p>POP: Post Office Protocol ver 3, 邮局协议版本 3<br>IMAP: Internet Mail Access Protocol ver 4, 因特网邮件访问协议版本 4</p></blockquote><ul><li>都是报文访问代理 (MAA) 协议, 提供用户和邮件服务器间的报文阅读</li><li>POP3:<ul><li>功能简单, 不支持预览</li><li>支持删除模式和保存模式<ul><li>删除: 邮件从邮箱读取后即被删除</li><li>保存: 读后不删除</li></ul></li></ul></li><li>IMAP4:<ul><li>可以在下载前读取头部或内容中的特定字符串</li><li>可以部分下载邮件内容</li></ul></li></ul><h2 id="三-文件传输"><a href="#三-文件传输" class="headerlink" title="三.文件传输"></a>三.文件传输</h2><blockquote><p>file transfer protocol</p></blockquote><p>FTP 的架构、FTP 的连接、FTP 的传输方式、端口</p><h3 id="FTP-IMP"><a href="#FTP-IMP" class="headerlink" title="FTP [IMP]"></a>FTP [IMP]</h3><ul><li><p>客户机/服务器模式</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/image-20210623151311954.png" alt="image-20210623151311954" style="zoom:67%;"></li><li><p>控制端口 21, 数据端口 20</p></li><li><p>前者在整个会话期间持续连接, 后者仅在文件传输时连接</p></li><li><p>需要登陆, 但服务器可以允许匿名帐户 (谁都能用)</p></li><li><p>可以传输文本和二进制文件</p></li></ul><h3 id="FTP-的架构"><a href="#FTP-的架构" class="headerlink" title="FTP 的架构"></a>FTP 的架构</h3><ul><li>文件传输协议（File Transfer Protocol, FTP）是TCP/IP提供的标准机制，用于从一个主机将文件复制到另一个主机。</li></ul><h3 id="FTP-的连接"><a href="#FTP-的连接" class="headerlink" title="FTP 的连接"></a>FTP 的连接</h3><ul><li>FTP与其他客户/服务器应用程序的不同之处在于它在主机之间建立两个连接：一个连接用于数据传输，另一个用于控制信息传输（命令和响应）。</li><li>在整个交互的FTP会话期间，控制连接始终处于连接状态。数据连接则在每次传输文件时开启然后关闭。</li></ul><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul><li><strong>FTP使用TCP服务。它需要两个TCP连接。熟知端口21用于控制连接，而熟知端口20用于数据连接。</strong></li></ul><h3 id="FTP-的传输方式"><a href="#FTP-的传输方式" class="headerlink" title="FTP 的传输方式"></a>FTP 的传输方式</h3><ul><li>流方式（默认方式）：<ul><li>数据作为连续的字节流从FTP传递给TCP，TCP负责将数据划分成适当大小的段。</li></ul></li><li>块方式：<ul><li>数据可以按块从FTP传递给TCP。</li></ul></li><li>压缩方式：<ul><li>如果文件很大，数据可进行压缩。</li><li>通常使用的压缩方法是游程长度编码。</li></ul></li></ul><h4 id="匿名登录"><a href="#匿名登录" class="headerlink" title="匿名登录"></a>匿名登录</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/%E7%AC%AC26%E7%AB%A0_%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E3%80%81%E7%94%B5%E5%AD%90%E9%82%AE%E4%BB%B6%E5%92%8C%E6%96%87%E4%BB%B6%E4%BC%A0%E8%BE%93/image-20210623151436976.png" alt="image-20210623151436976" style="zoom:67%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 域名系统 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-25-章-域名系统"><a href="#第-25-章-域名系统" class="headerlink" title="第 25 章 域名系统"></a>第 25 章 域名系统</h1><blockquote><p>DNS: Domain Name System</p></blockquote><h2 id="一-域名空间，客户端服务器模式"><a href="#一-域名空间，客户端服务器模式" class="headerlink" title="一.  域名空间，客户端服务器模式"></a>一.  域名空间，客户端服务器模式</h2><h3 id="域名空间"><a href="#域名空间" class="headerlink" title="域名空间"></a>域名空间</h3><ul><li><p>使用倒置的树定义</p></li><li><p>最多 128 级, 0级（根节点）〜127级。</p></li><li><p>每个节点都有一个标号 (最长 63 的字符串), <strong>根节点标号为空</strong></p></li><li><p>每一个节点的子节点标号不能相同 -&gt; 保证了域名的唯一性</p></li><li><p>域名由从子节点向根节点方向上的标号组成, 由点分割</p></li><li><p>全称域名 (FQDN)</p><ul><li><p>Full Qualified Domain Name</p></li><li><p>包含每一个节点</p></li><li><p>以点结尾, 因为最后的根节点标号为空</p><p>e.g.<code>challenger.atc.fhda.edu.</code></p></li></ul></li><li><p>部分域名</p><ul><li><p>Partially Qualified Domain Name</p></li><li><p>起始于子节点, 但没有到达根节点</p></li><li><p>所以不以点结尾</p><p>e.g.<code>challenger</code></p></li></ul></li></ul><h3 id="客户端服务器模式"><a href="#客户端服务器模式" class="headerlink" title="客户端服务器模式"></a>客户端服务器模式</h3><ul><li>客户端通过请求最近的 DNS 服务器</li><li>正向查询: 域名到地址</li><li>反向查询: 地址到域名, 也叫 PTR 查询 (指针查询)<ul><li>若要查询 A.B.C.D 的域名, 发送 <code>D.C.B.A.in-addr.arpa.</code></li><li>注意反向和最后的点</li></ul></li><li>分为递归解析和迭代解析<ul><li>递归解析: 客户机期望本地服务器直接提供最终结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则把请求转发给另一个服务器 (通常是父服务器)<ul><li>如果父服务器是授权服务器, 则父服务器 -&gt; 本地服务器 -&gt; 客户端</li><li>否则继续递归, 直到找到结果</li></ul></li></ul></li><li>迭代解析: 客户机自己一个一个询问找到结果<ul><li>如果该服务器是这个域名的授权服务器, 则直接响应</li><li>否则该服务器返回一个它认为可能知道的服务器的地址, 由客户机自己去继续查询</li></ul></li></ul></li><li>DNS 服务器采用缓存技术, 存储最近的查询与结果<ul><li>通过在查询条目中添加 TTL (生存时间) 来保证结果不过时</li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/image-20210623150301258.png" alt="image-20210623150301258" style="zoom:67%;"></li></ul></li></ul><h2 id="二-域名解析"><a href="#二-域名解析" class="headerlink" title="二.  域名解析"></a>二.  域名解析</h2><ul><li>解析程序用一个映射请求访问最近的一个DNS服务器。如果服务器含有该信息，它就满足解析程序的请求，否则，它将解析程序交付给其他的服务器，或者査询其他的服务器来提供这种信息。</li><li>当解析程序接收到映射后，它解释这一响应，以确定它是一个真正的解析还是一个差错， 最后将结果传递给发出这一请求的进程。</li><li>两种解析方式：<ul><li>递归解析：靠别人</li><li>迭代解析：靠自己</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC6%E9%83%A8%E5%88%86_%E5%BA%94%E7%94%A8%E5%B1%82/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/%E7%AC%AC25%E7%AB%A0_%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F/image-20210623151026609.png" alt="域名解析递归与迭代解析" style="zoom:67%;"></li><li>高速缓存机制：<ul><li>当一个服务器向另一个服务器请求映射并得到回应时，它在将该回应发送给客户端之前，先将这一信息存储在高速缓存中。如果同一客户端或者另一个客户端请求同一映射时，它会检査其高速缓存并解决这一问题。</li><li>要通知客户这一响应来自于高速缓存而不是来自于授权的信息源，该服务器会将这一响应标志为非授权性的。</li><li>防止过期缓存的技术：<ol><li>授权服务器总是将称为生存时间（TTL）的信息添加在映射上。生存时间定义了接收服务器可以将信息放入髙速缓存的时间（以秒计）。超过这一时间，该映射就变为无效，而任何査询必须再次发送到授权服务器。</li><li>DNS要求每一台服务器对每一个映射保留一个TTL计数器。高速缓存会定期检査，并清除掉TTL已经过期的那些映射。</li></ol></li></ul></li></ul><h2 id="三-DNS-报文"><a href="#三-DNS-报文" class="headerlink" title="三. DNS 报文"></a>三. DNS 报文</h2><ul><li>查询报文由头部和查询记录构成（图）：</li><li>响应报文由头部、查询记录、响应记录、授权记录和附加记录组成（图）：</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="第-24-章-拥塞控制和服务质量"><a href="#第-24-章-拥塞控制和服务质量" class="headerlink" title="第 24 章 拥塞控制和服务质量"></a>第 24 章 拥塞控制和服务质量</h1><h2 id="1-网络性能通常由两个网络因素来衡量：吞吐量和延迟"><a href="#1-网络性能通常由两个网络因素来衡量：吞吐量和延迟" class="headerlink" title="1.  网络性能通常由两个网络因素来衡量：吞吐量和延迟"></a>1.  网络性能通常由两个网络因素来衡量：吞吐量和延迟</h2><h3 id="吞吐量和延迟-IMP"><a href="#吞吐量和延迟-IMP" class="headerlink" title="吞吐量和延迟 [IMP]"></a>吞吐量和延迟 [IMP]</h3><ul><li>通常是衡量网络性能的因素</li><li>吞吐量:<ul><li>单位时间内通过网络的分组数量</li><li>载荷小于网络容量时, 吞吐量随载荷增加成比例增长</li><li>载荷达到网络容量时, 吞吐量会急剧下降 (一些分组被丢弃导致重传)</li></ul></li><li>延迟: 当载荷远小于网络容量时，延迟最小<ul><li>最小延迟是由传播延迟和处理延迟所组成的，且都可以忽略不计</li><li>载荷达到网络容量时, 延迟急剧增加 (分组需要排队)</li></ul></li></ul><ul><li><h3 id="吞吐量和延迟-IMP-1"><a href="#吞吐量和延迟-IMP-1" class="headerlink" title="吞吐量和延迟 [IMP]"></a>吞吐量和延迟 [IMP]</h3><ul><li>通常是衡量网络性能的因素</li><li>吞吐量:<ul><li>单位时间内通过网络的分组数量</li><li>载荷小于网络容量时, 吞吐量随载荷增加成比例增长</li><li>载荷达到网络容量时, 吞吐量会急剧下降 (一些分组被丢弃导致重传)</li></ul></li><li>延迟: 当载荷远小于网络容量时，延迟最小<ul><li>最小延迟是由传播延迟和处理延迟所组成的，且都可以忽略不计</li><li>载荷达到网络容量时, 延迟急剧增加 (分组需要排队)</li></ul></li></ul></li></ul><h2 id="二-典型的拥塞控制方法"><a href="#二-典型的拥塞控制方法" class="headerlink" title="二.  典型的拥塞控制方法"></a>二.  典型的拥塞控制方法</h2><h4 id="开环拥塞控制-预防"><a href="#开环拥塞控制-预防" class="headerlink" title="开环拥塞控制(预防)"></a>开环拥塞控制(预防)</h4><ul><li>重传 (例如 TCP)</li><li>窗口 (比如选择性重复 ARQ)</li><li>确认 (ACK, 使用一个 ACK 确认多个分组与停止-等待 ARQ)</li><li>丢弃 (按照优先级)</li><li>许可 (虚电路建立连接时检查是否有拥塞, 有则拒绝建立连接)</li></ul><h4 id="闭环拥塞控制-消除"><a href="#闭环拥塞控制-消除" class="headerlink" title="闭环拥塞控制(消除)"></a>闭环拥塞控制(消除)</h4><ul><li>背压: 从目的端方向的节点逐个拒绝接受上行节点的数据, 直到源端</li><li>抑制分组: 从发生拥塞的节点发送警告信息到源端</li><li>隐含信令: 进行推测, 例如过长时间没有收到确认</li><li>显示信令: 把信号包含在携带数据的分组中, 分前向信令 (向发生拥塞的方向), 后向信令 (原理发生拥塞的方向)</li></ul><h3 id="TCP中的拥塞控制（接上一章）"><a href="#TCP中的拥塞控制（接上一章）" class="headerlink" title="TCP中的拥塞控制（接上一章）"></a>TCP中的拥塞控制（接上一章）</h3><ul><li><h3 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h3><ul><li>在这里确定 cwnd 大小 (Congestion Window, 拥塞窗口)</li><li>采用三个阶段: 慢速启动, 拥塞避免, 拥塞检测</li><li>慢速启动: 指数增长<ul><li>开始时 cwnd = 1 MSS (最大段长度, 在连接建立时确定, 相当于这时窗口大小为一个段)</li><li>每一个段的确认都会使 cwnd+1, <strong>按照指数规律增长</strong></li><li>到达<strong>阈值</strong>时, 结束慢速启动阶段</li></ul></li><li>拥塞避免: 加性增加<ul><li>每次窗口中所有段均被确认后才有 cwnd+1</li><li>直到检测到拥塞</li></ul></li><li>拥塞检测: 乘性减少<ul><li>若重传计时器到时, 说明拥塞可能很严重: 段丢失且一直没收到相关信息<ul><li>强烈反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 1 MSS</li><li>开始慢速启动阶段</li></ul></li><li>相当于阈值变为实际上限的一半, 然后重启传输 (速度方面)</li></ul></li><li>若接收到三个 ACK, 说明可能有轻度拥塞, 一些段可能已经成功到达, 仅有部分缺失<ul><li>轻度反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 阈值 (部分实现是 阈值+3)</li><li>开始拥塞避免阶段 (就是加性增加)</li></ul></li></ul></li></ul></li></ul><a href="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622114245.png"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/%E7%AC%AC24%E7%AB%A0_%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6%E5%92%8C%E6%9C%8D%E5%8A%A1%E8%B4%A8%E9%87%8F/20210622114245.png" alt="c-control"></a><blockquote><p>SS: 慢速启动 (指数增长)<br>AI: 加性增加<br>MD: 乘性减少<br>Threshold: 阈值</p></blockquote></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/</url>
    
    <content type="html"><![CDATA[<!-- * @Title:  UDP、TCP 和 SCTP * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-23-章-UDP、TCP-和-SCTP"><a href="#第-23-章-UDP、TCP-和-SCTP" class="headerlink" title="第  23 章 UDP、TCP 和 SCTP"></a>第  23 章 UDP、TCP 和 SCTP</h1><h2 id="一-端口（重要的知名端口）、套接字"><a href="#一-端口（重要的知名端口）、套接字" class="headerlink" title="一.端口（重要的知名端口）、套接字"></a>一.端口（重要的知名端口）、套接字</h2><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><ul><li>服务器使用全局端口号：它们称为熟知端口号（well-known port number）</li><li>一个端口号确定了主机上的一个进程</li><li>划分<ul><li>1~1023: 熟知端口</li><li>1024~49151: 注册端口, IANA 不分配不控制, 但可以注册来防止重复</li><li>49152~65535: 动态端口, 可以有任何进程使用, 不需注册</li></ul></li></ul><h3 id="套接字"><a href="#套接字" class="headerlink" title="套接字"></a>套接字</h3><ul><li>套接字地址: 由 IP 地址和端口号组成, 唯一确定了一台主机上的一个进程</li><li>一个<strong>IP地址</strong>和一个<strong>端口号</strong>结合起来称为套接字地址。</li><li>传输层协议需要一对套接字地址：客户套接字地址和服务器套接字地址。</li><li>IP头部包含IP地址，而UDP或TCP头部包含端口号。</li></ul><h2 id="二-UDP-协议"><a href="#二-UDP-协议" class="headerlink" title="二. UDP 协议"></a>二. UDP 协议</h2><blockquote><p>UDP: User Datagram Protocol, 用户数据报协议</p></blockquote><p>UDP 协议的概念、数据报结构、<strong>校验和的计算</strong>、UDP 的操作</p><h3 id="UDP-协议的概念"><a href="#UDP-协议的概念" class="headerlink" title="UDP 协议的概念"></a>UDP 协议的概念</h3><ul><li>无连接不可靠传输层协议。</li><li>面向报文</li><li>无拥塞控制,适合实时应用</li><li>提供进程到进程通信而不是主机到主机通信。</li><li>首部开销少8B,TCP20B</li><li>非常有限的差错检验。</li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622002944.png" alt="udp port" style="zoom:67%;"></li></ul><h3 id="数据报结构"><a href="#数据报结构" class="headerlink" title="数据报结构"></a>数据报结构</h3><ul><li>数据报结构图：</li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622003102.png" alt="header" style="zoom:67%;"></li><li>头部固定 8 字节</li><li>源端口号: 如果是源主机是客户机, 则大概率是临时端口号; 服务器则大概率是熟知端口号 2B</li><li>目的端口号: 类似上面, 不过反过来 2B</li><li>总长度: 头部 (8 字节) + 数据长度 2B</li><li>校验和 2B</li><li>注意在真正的 UDP 头部中, 没有源地址和目的地址 (这是 IP 头部的东西), 但是校验和会用到它们</li><li>UPD长度=IP长度-IP头部长度</li></ul><h3 id="校验和的计算"><a href="#校验和的计算" class="headerlink" title="校验和的计算"></a>校验和的计算</h3><ul><li><p>校验包括三个部分：伪头部、UDP头部和从应用层来的数据。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622003643.png" alt="p header" style="zoom:67%;"></li><li><p>实际上是<strong>伪头部</strong>与头部共同的校验和</p></li><li><p>伪头部: 类似 IP 头部的最后 12 字节, 见上图</p></li><li><p>数据部分通过填充 0 补齐到 16 位的整数倍, 但<strong>在发送时会被移除, 不进行填充</strong></p></li><li><p>在计算完校验和后, 伪头部和填充就被移除, 它们不会交给 IP</p></li><li><p>计算方法和之前一样, 16 位分组, 求和, 循环进位, 最后取反码</p></li><li><p>校验和是可选的, 若不计算则可在这个字段填充全 1 (因为真正的校验和不可能为全 1, 这说明和为 0)</p></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/image-20210623135133035.png" alt="image-20210623135133035" style="zoom:67%;"><h3 id="UDP的操作"><a href="#UDP的操作" class="headerlink" title="UDP的操作"></a>UDP的操作</h3><ul><li>无连接服务：<ul><li>UDP发送出去的每一个用户数据报都是一个独立的数据报。</li><li>不同的用户数据报之间没有关系，即使它们都来自相同的源进程并发送到相同的目的程序。</li><li>用户数据报不进行编号。</li></ul></li><li>流量控制和差错控制：<ul><li>没有流量控制，因而也没有窗口机制。</li><li>没有差错控制机制。</li><li>使用UDP的进程必须要提供这些机制。</li></ul></li><li>封装和拆封：<ul><li>将报文在IP数据报中进行封装和拆封。</li></ul></li><li>排队：<ul><li>当一个进程想与多个进程通信时，它也只得到一个端口号，而最后也只有一个出队列和一个入队列。</li><li>客户进程使用在请求中指明的源端口号将报文发送到出队列。UDP逐个将报文取出，加上UDP头部递交给IP。</li><li>当报文到达客户端时，UDP要检査一下以确认对应于该用户数据报中目的端口号字段指明的端口号是否创建了入队列。如果有这样的入队列，UDP就将接收到的用户数据报放在该队列的末尾。如果没有这样的队列，UDP就丢弃该用户数据报，并请求ICMP协议向服务器发送端口不可达报文。当报文到达服务器时同理。</li></ul></li></ul><h2 id="三-TCP"><a href="#三-TCP" class="headerlink" title="三. TCP"></a>三. TCP</h2><p><strong>TCP 的特点与服务、段格式、三次握手（建立连接和拆除连接）、TCP 流量控制 （信贷滑窗协议）、TCP 差错控制、TCP 拥塞控制（慢启动过程、拥塞避免过程）</strong></p><blockquote><p>TCP: Transmission Control Protocol, 传输控制协议</p></blockquote><h3 id="特点与服务"><a href="#特点与服务" class="headerlink" title="特点与服务"></a>特点与服务</h3><ul><li>面向连接 可靠 传输层协议</li><li>点对点,提供全双工通信</li><li>有流量控制和差错控制</li><li>面向字节流</li><li>服务:<ul><li>提供进程到进程的通信<ul><li>TCP用端口号提供进程到进程的通信。</li></ul></li><li>提供流传递服务, 类似于一个假想的管道, 存在缓冲区<ul><li>TCP允许发送进程以字节流形式传递数据，并且接收进程也以字节流形式接收数据。</li><li>每一个方向都存在一个缓冲区：发送缓冲区和接收缓冲区。</li><li>实现缓冲的一种方法是使用一字节存储单元的循环数组。</li></ul></li><li>全双工通信<ul><li>数据可以在同一时间双向流动。</li><li>每一方TCP都有发送和接收缓冲区，它们能在双向发送和接收段。</li></ul></li><li>面向连接<ul><li>在两个TCP之间建立一个连接；</li><li>在两个方向交换数据；</li><li>连接终止。</li><li>这是一个虚连接，而不是一个物理连接。</li></ul></li></ul></li><li>使用序列号 seq, 值为该段包含的第一个(数据)字节的序号</li><li>使用确认号 ack, 值为接收方预期接受的下一个字节的序号</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/image-20210623135707166.png" alt="image-20210623135707166" style="zoom:67%;"><h3 id="段格式"><a href="#段格式" class="headerlink" title="段格式"></a>段格式</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/image-20210623140315572.png" alt="image-20210623140315572" style="zoom:67%;"><ul><li>源端口地址, 目的端口地址: 和 UDP 中的一样,一共4B</li><li>序列号 seq: 段中数据的第一个字节的序号, 连接建立时双方各自通过随机数产生初始序列号 (ISN)</li><li>确认号 ack: 段的接收方期望接受的下一个字节号</li><li>数据偏移(头部长度): 单位为<strong>4字节</strong>, 也就是说该字段的值为头部长度除以 4</li><li>保留: 就是保留</li><li>六个控制位<ul><li>URG: 紧急指针有效, 为高优先级</li><li>ACK: 确认字段的值有效</li><li>PSH: 将数据推向前 (接收方的处理)</li><li>RST: 连接复位 (GFW经常就靠这个阻断你的连接)</li><li>SYN: 在连接时对序列号进行同步</li><li>FIN: 终止连接</li></ul></li><li>窗口: 定义了接收窗口 (rwnd, Receive<strong>r</strong> Window) 的大小, 见阻塞控制</li><li>校验和: 计算方法一样, 也有伪头部, 伪头部 12B+ 头部 + 数据, 但是书上没说 TCP 的伪头部是啥</li><li>紧急指针: URG=1,指向紧急字节的最后一个字节, 紧急字节总是位于段的开始, 收到后会被直接送往进程, 无需等待</li></ul><h6 id="连接建立"><a href="#连接建立" class="headerlink" title="连接建立"></a>连接建立</h6><ul><li>TCP 的连接和建立都是采用客户服务器方式。</li><li>主动发起连接建立的应用进程叫做客户(client)。</li><li>被动等待连接建立的应用进程叫做服务器(server)。 </li></ul><h3 id="三次握手（建立连接和拆除连接）"><a href="#三次握手（建立连接和拆除连接）" class="headerlink" title="三次握手（建立连接和拆除连接）"></a>三次握手（建立连接和拆除连接）</h3><ul><li><p>建立连接三次握手过程图：</p></li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622104459.png" alt="tcp establish" style="zoom:67%;"><p>采用三次握手</p><ul><li>客户端: SYN =1,seq=x,(仅包含己方 seq, SYN 段不携带数据, 但占用序列号)</li><li>服务器: SYN=1,ACK=1,seq=y,ack=x+1, (包含服务器的 seq 和 ack, 和单纯的 SYN 一样占用序列号)</li><li>客户端: ACK=1,seq=x+1,ack=y+1 (若 ACK 段不携带数据, 则不占用序列号)</li></ul><p>存在 SYN 洪泛攻击的问题</p><ul><li>攻击方伪造大量的 SYN, 伪装成正常的连接请求</li><li>由于服务器需要为每一个请求分配资源, 因此很快被耗尽</li><li>最终服务器无法接受新的正常用户的请求 -&gt; 拒绝服务攻击 (DoS, Denial of Service)</li></ul><blockquote><p>DDoS, Distributed Denial of Service, 就是分布式拒绝服务攻击</p></blockquote></li><li><p>拆除连接三次握手过程图：</p></li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622105351.png" alt="3 wave" style="zoom:67%;"></li><li><p>拆除连接三个步骤：</p><ol><li>从客户进程接收到一个关闭命令后，客户的TCP发送第一个段：FIN段， 即其中的FIN位置位。<ul><li>如果FIN段不携带数据，则该段占用一个序列号。</li></ul></li><li>服务器TCP接收到FIN段后，通知它的进程，并发送第二个段：FIN + ACK段，证实它接收到来自客户端的FIN段，同时通告另一端连接关闭。<ul><li>如果FIN + ACK段没有携带数据，则该段仅占用一个序列号。</li></ul></li><li>客户端的TCP发送最后一段：ACK段，证实它接收到来自服务器的FIN段。这个段包含确认号，它是接收到来自服务器FIN段的序号加1。<ul><li>这个段不携带数据也不占用序列号。</li></ul></li></ol></li><li><p>主动方: FIN, 可携带数据, 占用一个序列号</p></li><li><p>被动方: FIN+ACK, 可携带数据, 占用一个序列号</p></li><li><p>主动方: ACK, 不占用序列号</p></li></ul><h5 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h5><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622105644.png" alt="4 wave" style="zoom:67%;"><blockquote><p>半关闭</p></blockquote><ul><li>主动方: FIN=1,seq=u</li><li>被动方: ACK=1,seq=v,ack=u+1<ul><li>此时进入<strong>半关闭</strong></li><li>主动方不能够再发送数据, 但可以接收数据</li><li>被动方还能够继续发送数据</li></ul></li><li>被动方: FIN=1,ACK=1,seq=w,ack=u+1</li><li>主动方: ACK=1,seq=u+1,ack=w+1</li></ul><h3 id="TCP-流量控制-（信贷滑窗协议）"><a href="#TCP-流量控制-（信贷滑窗协议）" class="headerlink" title="TCP 流量控制 （信贷滑窗协议）"></a>TCP 流量控制 （信贷滑窗协议）</h3><ul><li>TCP使用的滑动窗口协议界于回退N帧与选择重发之间的滑动窗口。</li><li>TCP的滑动窗口与数据链路所用的滑动窗口有两大点不同：<ul><li>TCP的滑动窗口是面向<strong>字节</strong>的，而数据链路层讨论的滑动窗口是面向帧的。</li><li>TCP的滑动窗口是可变大小，而数据链路层讨论的滑动窗口是固定大小。</li></ul></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/image-20210623142307905.png" alt="image-20210623142307905" style="zoom:67%;"><h3 id="TCP-差错控制"><a href="#TCP-差错控制" class="headerlink" title="TCP 差错控制"></a>TCP 差错控制</h3><ul><li><p>TCP中的差错检测和 纠正是通过三种简单工具来完成：校验和、确认和超时。</p></li><li><p><strong>校验和</strong>：</p><ul><li>每个段都包括校验和字段，用来检査受到损坏的段。</li><li>如果段被损坏，它将被目的端TCP丢弃，并认为是丢失了。</li><li>TCP在每段中强制使用一个16位的校验和。</li></ul></li><li><p><strong>确认</strong>：</p><ul><li>使用确认方法来证实收到了数据段。</li><li>不携带数据但占用序列号的一些控制段也要确认，但ACK段不需要确认。</li></ul></li><li><p><strong>重传</strong>：</p><ul><li><p>出现损坏, 丢失或延迟时重传段</p></li><li><p>在实现中, 分为重传计时器到时和连续收到 3 个 ACK</p></li><li><p>重传计时器到时:</p><ul><li>已发送未确认的(占用序列号的)段有一个定时器<ul><li>称为 RTO 计时器 (Retransmission Time-Out)</li><li>其值根据往返时间动态更新</li><li>对 ACK 段不设置定时器</li></ul></li><li>定时器到时时重发最早的重要的段</li></ul></li><li><p>连续收到三个 ACK:</p><ul><li>触发<strong>快速重传</strong></li><li>立即发送缺少的段</li></ul></li><li><p>失序的段</p><ul><li>暂时保留, 直到缺少的那个段到达</li><li>TCP 保证提交给进程的数据是顺序正确的</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622111546.png" alt="RTO" style="zoom:67%;"></li></ul></li><li><blockquote><p>重传计时器超时重传</p></blockquote><p><a href="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622111612.png"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622111612.png" alt="3 ACK"></a></p><blockquote><p>快速重传, 重传时 seq 301~400 的计时器还没到时, 但依然重传</p></blockquote></li></ul><h3 id="TCP-拥塞控制"><a href="#TCP-拥塞控制" class="headerlink" title="TCP 拥塞控制"></a>TCP 拥塞控制</h3><ul><li>在这里确定 cwnd 大小 (Congestion Window, 拥塞窗口)</li><li>采用三个阶段: 慢速启动, 拥塞避免, 拥塞检测</li><li>慢速启动: 指数增长<ul><li>开始时 cwnd = 1 MSS (最大段长度, 在连接建立时确定, 相当于这时窗口大小为一个段)</li><li>每一个段的确认都会使 cwnd+1, <strong>按照指数规律增长</strong></li><li>到达<strong>阈值</strong>时, 结束慢速启动阶段</li></ul></li><li>拥塞避免: 加性增加<ul><li>每次窗口中所有段均被确认后才有 cwnd+1</li><li>直到检测到拥塞</li></ul></li><li>拥塞检测: 乘性减少<ul><li>若重传计时器到时, 说明拥塞可能很严重: 段丢失且一直没收到相关信息<ul><li>强烈反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 1 MSS</li><li>开始慢速启动阶段</li></ul></li><li>相当于阈值变为实际上限的一半, 然后重启传输 (速度方面)</li></ul></li><li>若接收到三个 ACK, 说明可能有轻度拥塞, 一些段可能已经成功到达, 仅有部分缺失<ul><li>轻度反应<ul><li>阈值设置为 cwnd 的一半</li><li>cwnd = 阈值 (部分实现是 阈值+3)</li><li>开始拥塞避免阶段 (就是加性增加)</li></ul></li></ul></li></ul></li></ul><p><a href="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622114245.png"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622114245.png" alt="c-control"></a></p><blockquote><p>SS: 慢速启动 (指数增长)<br>AI: 加性增加<br>MD: 乘性减少<br>Threshold: 阈值</p></blockquote><h4 id="TCP-流量控制-IMP"><a href="#TCP-流量控制-IMP" class="headerlink" title="TCP 流量控制 [IMP]"></a>TCP 流量控制 [IMP]</h4><p><a href="https://gitee.com/HorizonChaser/pic-bed/raw/master/img/20210622124037.png"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC5%E9%83%A8%E5%88%86_%E4%BC%A0%E8%BE%93%E5%B1%82/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/%E7%AC%AC23%E7%AB%A0_UDP%E3%80%81TCP%20%E5%92%8CSCTP/20210622124037.png" alt="Window"></a></p><ul><li>采用滑动窗口, 面向字节, 又称信贷滑窗协议</li><li>窗口大小为头部中的接收窗口 (rwnd) 与 cwnd 较小值<ul><li>rwnd 表明了接收方当前可用的窗口大小</li></ul></li><li>在窗口中, 左侧为已发送但未确认的, 右侧为可立刻发送的</li><li>在窗口外, 左侧为已发送且已确认的, 右侧为未发送且尚不可发送的</li><li>发送方接收到 ACK 后, 可以合拢窗口: 左侧向右移动</li><li>当 rwnd 或 cwnd 更新时, 可以张开窗口: 右侧向右移动, 但不建议收缩 (右侧向左移动)</li><li>窗口左边沿不能向左移动</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/</url>
    
    <content type="html"><![CDATA[<!-- * @Title:  传递、转发和路由选择 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-22-章-传递、转发和路由选择"><a href="#第-22-章-传递、转发和路由选择" class="headerlink" title="第 22 章 传递、转发和路由选择"></a>第 22 章 传递、转发和路由选择</h1><h2 id="一-转发技术与转发过程"><a href="#一-转发技术与转发过程" class="headerlink" title="一.  转发技术与转发过程"></a>一.  转发技术与转发过程</h2><h3 id="转发技术"><a href="#转发技术" class="headerlink" title="转发技术"></a>转发技术</h3><ul><li>下一条方法: 路由表中仅保存下一跳的地址</li><li>路由方法: 路由表中保存完整的路由信息</li><li>特定网络方法: 将连接在整个网络上的主机视为同一个条目</li><li>特定主机方法: 每台主机一个条目</li><li>默认方法: 表里有的按表来, 没有的同一扔到一个端口</li></ul><h3 id="转发过程"><a href="#转发过程" class="headerlink" title="转发过程"></a>转发过程</h3><ul><li>采用无类寻址</li><li>表中包含<strong>掩码</strong>, 网络地址, 下一跳地址, 接口</li><li>过程<ul><li>将每个条目的掩码与接收到的分组的目的地址相与, 判断是否符合网络地址<ul><li>若不符合, 则比较下一条</li><li>若符合, 准备通过对应的下一跳地址和端口转发, 可能需要 ARP</li><li>若无符合条目, 按默认条目转发</li></ul></li></ul></li></ul><h2 id="二-路由表、地址聚合和最长掩码匹配"><a href="#二-路由表、地址聚合和最长掩码匹配" class="headerlink" title="二.  路由表、地址聚合和最长掩码匹配"></a>二.  路由表、地址聚合和最长掩码匹配</h2><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><ul><li><p>静态路由表：</p><blockquote><p>static routing table</p></blockquote><ul><li>包含有人工输入的信息。</li><li>当路由表生成后，因特网中的变化无法自动在路由表中进行自动更新。路由表必须由网络管理员手工改变。</li></ul></li><li><p>动态路由表：</p><blockquote><p>dynamic routing table</p></blockquote><ul><li>使用一个动态路由选择协议，如RIP，OSPF或BGP，因而可以周期性地进行更新。</li><li>当因特网中发生变化时，例如当某个路由器关闭或某条链路中断，动态路由选择协议就自动更新所有路由器(最后也将在所有主机中)的路由表。</li></ul></li></ul><h3 id="地址聚合"><a href="#地址聚合" class="headerlink" title="地址聚合"></a>地址聚合</h3><ul><li>对网络的其他部分, 将连续的地址块儿通过缩短掩码的长度来将其是为一个地址</li><li>使用无类寻址时，由于将整个地址空间划分为可管理地址块，会导致路由表的项目数量增多，进一步增加查找时间，因此设计地址聚合。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/20210622000936.png" alt="aggregate" style="zoom:67%;"><blockquote><p>在 R2 看来, 组织 1<del>4 是同一个地址, 只占一个条目, 只需要转发到 m0 接口就行<br>至于组织 1</del>4 之间各自的分组转发, 由 R1 负责</p></blockquote><h3 id="最长掩码匹配"><a href="#最长掩码匹配" class="headerlink" title="最长掩码匹配"></a>最长掩码匹配</h3><ul><li><p>无类寻址的路由使用最长掩码匹配原则。</p></li><li><p>在路由表中掩码存放按照最长到最短的次序存放。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/image-20210622231442886.png" alt="image-20210622231442886" style="zoom:67%;"></li></ul><h2 id="三-单播路由协议"><a href="#三-单播路由协议" class="headerlink" title="三.  单播路由协议"></a>三.  单播路由协议</h2><p><strong>路由协议的分类及典型的路由协议(RIP、OSPF、BGP)，AS 的概念、RIP 协议和 OSPF 协议、Dijkstra、Bellmanford 算法计算路由表及最小生成树</strong></p><h3 id="自治系统AS"><a href="#自治系统AS" class="headerlink" title="自治系统AS"></a>自治系统AS</h3><blockquote><p>自治系统 autonomous system</p></blockquote><ul><li>一个单一的管理机构管辖下的一组网络和路由器</li><li>在as之间的路由器选择成为域间路由选择</li></ul><h3 id="路由选择信息协议RIP"><a href="#路由选择信息协议RIP" class="headerlink" title="路由选择信息协议RIP"></a>路由选择信息协议RIP</h3><blockquote><p>路由选择信息协议 Rounting information protocol</p></blockquote><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/20200404180122815.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="RIP协议和谁交换？交换什么？多久交换一次？"><a href="#RIP协议和谁交换？交换什么？多久交换一次？" class="headerlink" title="RIP协议和谁交换？交换什么？多久交换一次？"></a>RIP协议和谁交换？交换什么？多久交换一次？</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/20200404180253748.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="距离向量算法"><a href="#距离向量算法" class="headerlink" title="距离向量算法"></a>距离向量算法</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/20200404181907950.png" alt="在这里插入图片描述" style="zoom:67%;"><ul><li><p>路由更新机制</p><ul><li>周期更新：取决于所用的距离向量路由选择协议；</li><li>触发更新：收到邻站的表，邻站链路故障。</li></ul></li><li><p>两个节点不稳定性:将一个较小的数定义为无穷大，<strong>16跳</strong>；</p></li><li><p>在距离向量路由选择中，每个节点与它的邻站周期性地或有变化时共享它的路由表。</p></li><li></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/image-20210623093657578.png" alt="image-20210623093657578" style="zoom:67%;"><blockquote><p><strong>距离向量更新</strong></p></blockquote><h3 id="开放最短路径优先OSPF"><a href="#开放最短路径优先OSPF" class="headerlink" title="开放最短路径优先OSPF"></a>开放最短路径优先OSPF</h3><blockquote><p>开放最短路径优先 open shortest path first protocol</p></blockquote><ul><li>是分布式的链路状态协议</li><li>直接用IP数据报传送</li><li>向本自治系统中所有路由器发送信息，这里使用的方法是洪泛法。(将信息广播出去)</li><li>发送的信息就是与本路由器相邻的所有路由器的链路状态，但这只是路由器所知道的部分信息。<ul><li><strong>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。</strong> </li><li>度量：每一个路由指定的一个代价</li></ul></li><li>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息(变化就发送)–&gt;OSPF报文比RIP报文传播速度快</li><li>常用于大规模的互联网</li></ul><h4 id="链路状态路由算法"><a href="#链路状态路由算法" class="headerlink" title="链路状态路由算法"></a>链路状态路由算法</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/image-20210623100448172.png" alt="image-20210623100448172" style="zoom:67%;"><blockquote><p>类型1，问候(Hello)分组。<br>类型2，数据库描述(Database Description)分组。<br>类型3，链路状态请求(Link State Request)分组。<br>类型4，链路状态更新(Link State Update)分组，<br>                用洪泛法对全网更新链路状态。<br>类型5，链路状态确认(Link State Acknowledgment)分组。 </p></blockquote><h3 id="边界网关协议BGP"><a href="#边界网关协议BGP" class="headerlink" title="边界网关协议BGP"></a>边界网关协议BGP</h3><ul><li>BGP 是不同自治系统的路由器之间交换路由信息的协议。</li><li>与其他AS的邻站BGP发言人交换信息</li><li>交换到达某个网络所要经过的AS</li><li>在BGP 刚刚运行时，BGP 的邻站是交换整个的 BGP 路由表；后面发送变化时更新变化的部分</li><li>支持CIDR</li></ul><blockquote><p>(1) 打开(Open)报文，用来与相邻的另一个BGP发言人建立关系。</p><p>(2) 更新(Update)报文，用来发送某一路由的信息，以及列出要撤消的多条路由。</p><p>(3) 保活(Keepalive)报文，用来确认打开报文和周期性地证实邻站关系。</p><p>(4) 通知(Notificaton)报文，用来发送检测到的差错。</p></blockquote><h3 id="三种路由协议比较"><a href="#三种路由协议比较" class="headerlink" title="三种路由协议比较"></a>三种路由协议比较</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/20200404215625413.png" alt="在这里插入图片描述" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/%E7%AC%AC22%E7%AB%A0_%E4%BC%A0%E9%80%92%E3%80%81%E8%BD%AC%E5%8F%91%E5%92%8C%E8%B7%AF%E7%94%B1%E9%80%89%E6%8B%A9/2020040421592020.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h3><h3 id="Bellmanford"><a href="#Bellmanford" class="headerlink" title="Bellmanford"></a>Bellmanford</h3><h2 id="四-多播的概念和多播路由协议-了解"><a href="#四-多播的概念和多播路由协议-了解" class="headerlink" title="四.  多播的概念和多播路由协议(了解)"></a>四.  多播的概念和多播路由协议(了解)</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/</url>
    
    <content type="html"><![CDATA[<!-- * @Title:  地址映射、差错报告和多播 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-21-章-地址映射、差错报告和多播"><a href="#第-21-章-地址映射、差错报告和多播" class="headerlink" title="第 21 章 地址映射、差错报告和多播"></a>第 21 章 地址映射、差错报告和多播</h1><h2 id="一-ARP"><a href="#一-ARP" class="headerlink" title="一. ARP"></a>一. ARP</h2><blockquote><p>ARP: Address Resolution Protocol, 地址解析协议</p></blockquote><p><strong>ARP 的概念</strong>、分组格式、<strong>封装</strong>、4 种操作</p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li><code>无论网络层使用什么协议，在实际网络的链路上传送数据帧时，最终必须使用硬件地址</code>。<code>所以需要一种方法来完成 IP地址到MAC地址的映射，这就是地址解析协议(Address ResolutionProtocol, ARP)</code>。 每台主机都设有-一个ARP高速缓存，用来存放本局域网上各主机和路由器的IP地址到MAC地址的映射表，称ARP表。使用ARP来动态维护此ARP表。</li><li>逻辑地址到物理地址</li><li><strong>直接封装到数据链路层的帧中</strong></li><li>ARP 查询是广播, ARP 回答是单播 (持有对应逻辑地址的节点返回自己的物理地址)</li><li>支持所有的物理地址与逻辑地址类型</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/20200329165515354.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="分组格式"><a href="#分组格式" class="headerlink" title="分组格式"></a>分组格式</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/image-20210622224243524.png" alt="image-20210622224243524" style="zoom:67%;"><ul><li>硬件类型: 指定了物理网络的类型, 比如以太网</li><li>协议类型: 指定了使用逻辑地址的高层协议的类型, 比如 IPv4</li><li>两个长度: 字节为单位, 按需求填, 比如以太网物理地址长度是 6, IPv4 协议长度 (就是逻辑地址长度) 为 4</li><li>操作: 分为 ARP 请求和 ARP 回答</li><li>四个地址: <ul><li>注意, 在 ARP 请求中, 目标硬件地址填 0, 因为这时还不知道</li></ul></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/image-20210622224447387.png" alt="image-20210622224447387" style="zoom:67%;"><h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/20200329170014590.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="四种情况下的操作-见上图"><a href="#四种情况下的操作-见上图" class="headerlink" title="四种情况下的操作(见上图)"></a>四种情况下的操作(见上图)</h3><ol><li>发送方是一个主机，它希望将分组发送给同一个网络上的另一个主机。在这种情况下， 必须将物理地址映射为逻辑地址，并将该逻辑地址作为数据报头b的目的IP地址；</li><li>发送方是一个主机，它希望将分组发送给另一个网络上的另一主机。在这种情况下，该主机査找它的路由表，找出这个目的地下一个跳（路由器）的IP地址。如果该主机没有路由表，它就要査找默认路由表的IP地址。这个路由器的IP地址就是必须映射为一个物理地址的那个逻辑地址；</li><li>发送方是一个路由器，它已经接收到了一个数据报，要将该数据报发送给另一个网络上的一个主机。它先检査它的路由表，找出下一个路由器的IP地址。这个下一路由器的IP地址就是必须映射为物理地址的那个逻辑地址；</li><li>发送方是一个路由器，它已经收到了一个数据报，要将该数据报发送给同一网络上的一个主机。数据报的目的IP地址就是必须映射为物理地址的那个逻辑地址。</li></ol><h2 id="二-动态主机配置协议DHCP"><a href="#二-动态主机配置协议DHCP" class="headerlink" title="二. 动态主机配置协议DHCP"></a>二. 动态主机配置协议DHCP</h2><blockquote><p>DHCP: Dynamic Host Configuration Protocol, 动态主机配置协议</p></blockquote><ul><li>通过向服务器请求自动获得逻辑地址</li><li>可以人工配置静态的物理地址和逻辑地址间的对应关系, 也可以在地址池中自动分配</li><li>自动分配的地址为租用地址, 有时间上限, 到期后需要更新或停用</li></ul><h2 id="三-ICMP"><a href="#三-ICMP" class="headerlink" title="三. ICMP"></a>三. ICMP</h2><p><strong>ICMP 的概念</strong>、<strong>报文格式（封装在 IP 报文里面）</strong>、<strong>差错报告</strong></p><blockquote><p>ICMP: Internet Control Message Protocol, 因特网控制报文协议</p></blockquote><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><ul><li>ICMP 不能纠正差错, 只能把出错信息发回给原始的源端</li><li>ICMP报文分为两大类：<ul><li><strong>差错报告报文</strong>：向路由器或主机（目的端）报告在处理一个IP数据报时可能碰到的一些问题。</li><li><strong>査询报文</strong>：是成对出现的，它帮助主机或网络管理员从一个路由器或另一个主机得到特定的信息。</li></ul></li></ul><h3 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h3><ul><li>封装在 IP 数据报里面</li><li>头部固定有 8 字节, 数据部分可变长</li><li>头部的前 4 字节固定, 后 4 字节随类型变化</li></ul><h3 id="差错报告"><a href="#差错报告" class="headerlink" title="差错报告"></a>差错报告</h3><ul><li>处理 IP 数据报时出现的问题<ul><li>目的端不可达: 找不到对应主机或端口</li><li>源端抑制: 通知源端出现拥塞与丢弃</li><li>时间超时: TTL = 0</li><li>参数问题: 报文格式不对</li><li>重定向: 主机将报文发送给了绕路的路由器, 该路由器会转发并回送这条差错报告, 可以更新主机的路由表</li></ul></li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/%E7%AC%AC21%E7%AB%A0_%E5%9C%B0%E5%9D%80%E6%98%A0%E5%B0%84%E3%80%81%E5%B7%AE%E9%94%99%E6%8A%A5%E5%91%8A%E5%92%8C%E5%A4%9A%E6%92%AD/20200329175920855.png" alt="在这里插入图片描述" style="zoom:67%;"></li></ul><h2 id="四-IGMP-的基本概念"><a href="#四-IGMP-的基本概念" class="headerlink" title="四. IGMP 的基本概念"></a>四. IGMP 的基本概念</h2><blockquote><p>IGMP: Internet Group Management Protocol, 因特网组管理协议</p></blockquote><ul><li>IGMP不是一个多播路由协议，而是一个管理组成员的协议。</li><li>IGMP协议为多播路由器(multicast router)提供关于连接到网络上的主机(路由器)成员状态的信息。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/</url>
    
    <content type="html"><![CDATA[<!-- * @Title:  IP 协议 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-20-章-IP-协议"><a href="#第-20-章-IP-协议" class="headerlink" title="第 20 章  IP 协议"></a>第 20 章  IP 协议</h1><ul><li>IPv4是一种不可靠的无连接数据报协议——尽力传递。</li><li>不提供差错控制或流量控制(除在头部差错检测外)。</li><li>当可靠性很重要时，IPv4必须与一个可靠协议(如TCP)配合起来使用。</li></ul><h2 id="一-IP-数据报的格式"><a href="#一-IP-数据报的格式" class="headerlink" title="一. IP 数据报的格式"></a>一. IP 数据报的格式</h2><ul><li><p>IPv4层的分组称为数据报(datagram)</p></li><li><p>由两个部分组成：头部和数据。</p></li><li><p>头部长度可由20到60个字节 组成，包含有与路由选择和传输有关的重要信息。</p><p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/20210621151131.png" alt="ipv4"></p><p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/20210621150443.png" alt="ipv4"></p><blockquote><p> HLEN: Header Length, 头部长度</p></blockquote></li><li><p>版本: 定义 IPv4 版本, 若错误则直接丢弃数据报</p></li><li><p>头部长度: 数据报头部的总长度<strong>除以4</strong>, 头部的最小字节数是20.对不含选项的头部, 长度为 20 字节, 值为 5</p></li><li><p>服务: 有两种解释方法, 服务类型和差分服务</p><ul><li>服务类型<ul><li>前三位指定优先级, 在遇到拥塞时先丢弃低优先级的 (未使用)</li><li>后四位称为 TOS 位, 前三位分别指定低延迟, 最大化吞吐量和最高可靠性, 最后一位没用</li></ul></li><li>差分服务<ul><li>后两位不用</li><li>前六位组成码点子字段<ul><li>最右侧三位为 0, 则前三位和”服务类型”的解释方式相同</li><li>否则, 定义 64 种服务 (然而具体的分配方式还没定下来, 看看就行)</li></ul></li></ul></li></ul></li><li><p>总长度: 以字节计算的数据报总长度, 包括头部长度和数据长度</p><ul><li>可以靠这个把数据报和填充分开, 比如以太网最低要求 46 字节的帧</li></ul></li><li><p>标识, 标记和分段偏移: 和分段有关, 下一节讨论</p></li><li><p><strong>生存时间: 能经过路由器转发的数量, 每个路由器收到后先减一</strong>, 为 0 时直接丢弃, 并回送一个错误信息</p></li><li><p>协议: 指定了该数据报使用的高层协议, 例如 TCP UDP ICMP 等</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/image-20210622215836726.png" alt="image-20210622215836726" style="zoom:67%;"></li><li><p>校验和: 只检验数据报的首部 (数据部分的校验和由高层协议负责)</p><ul><li>将头部按照 16 位划分</li><li>对这些数求和, 正常进位, 同时最高位的进位加到最低位上</li><li>对结果取反码</li></ul></li><li><p>选项: 可选的选项,</p></li></ul><h2 id="二-分片与-MTU"><a href="#二-分片与-MTU" class="headerlink" title="二.  分片与 MTU"></a>二.  分片与 MTU</h2><h3 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h3><ul><li>一个数据报可以通过几个不同的网络进行传输。</li><li>分段在传输层进行</li><li>每一个路由器将它所接收的帧拆封成IPv4数据报，对它进行处理，然后再将它封装成另一个帧。</li></ul><h3 id="最大传输单元（MTU）"><a href="#最大传输单元（MTU）" class="headerlink" title="最大传输单元（MTU）"></a>最大传输单元（MTU）</h3><blockquote><p>MTU: Maximum Transmission Unit</p></blockquote><ul><li>每个数据链路层协议都有自己的帧格式, 也就定义了该协议下最大的数据长度</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/image-20210622220259763.png" alt="image-20210622220259763" style="zoom:67%;"><ul><li><p>为了让 IPv4 协议与物理网络无关, IPv4 数据报的最大长度为 65535 字节, 是常见的网络中最大的 MTU 值</p></li><li><p>数据报在到达最终目的端前, 可能被多次分段</p></li><li><p>标识: 一个序列号, 定义了特定的从源端发出的数据报, <strong>分段不改变标识</strong></p></li><li><p>标记: 3 位字段</p><ul><li>第一位: 保留不用</li><li>第二位: 不分段位 (DF, Don’t Fragment), 为 1 时强制禁止分段；0进行分段</li><li>第三位: 多分段位, 若为 1 表明这不是最后的分段, 为 0 表示是最后或唯一的分段</li></ul></li><li><p>分段偏移: 表示了该分段的第一个字节在整个数据报中的相对位置,单位是 8 字节, 也就是除以 8</p><ul><li>所以分段时每个分段的长度必须满足使每个分段的第一个字节的位置为 8 的整数倍</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/image-20210622220625702.png" alt="image-20210622220625702" style="zoom:67%;"></li><li><p>重组方法:</p><ul><li>第一个分段的分段偏移为 0</li><li>第一个分段的长度除以 8 得到第二个分段的偏移值</li><li>第一二个分段的长度之和除以 8 得到第三个分段的偏移值</li><li>重复以上过程, 最后一个分段的 多分段位 为 0</li></ul></li><li><p>当数据报封装成帧时，该数据报的总长度必须小于这个最大数据长度。</p></li><li><p>MTU的值取决于物理网络协议。</p></li><li><p>不同协议的MTU：</p></li></ul><h2 id="三-IPv4-校验和"><a href="#三-IPv4-校验和" class="headerlink" title="三. IPv4 校验和"></a>三. IPv4 校验和</h2><ul><li>计算方法：<ul><li>首先，将校验和字段置为0。然后，将整个头部划分为16位的部分，并将各部分相加。将计算结果（和）取反码，插入到校验和字段中。</li><li>IPv4分组中的校验和只对头部进行，而不在数据部分进行。</li><li>具体校验和计算方法查看第十章</li></ul></li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/image-20210622220811504.png" alt="image-20210622220811504" style="zoom:67%;"></li></ul><h2 id="四-IPv6-分组格式"><a href="#四-IPv6-分组格式" class="headerlink" title="四. IPv6 分组格式"></a>四. IPv6 分组格式</h2><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/20200403204857506.png" alt="在这里插入图片描述" style="zoom:67%;"><ul><li><strong>基本头部固定 40 字节, 选项等放在扩展头部</strong></li><li>版本VER: IPv6 的版本号, 为 6</li><li>优先级PRI: 发生拥塞时决定丢弃顺序, 分为可进行拥塞控制的通信量和不可进行…<ul><li>可进行拥塞控制: 分 0~7, 0 最低, 不同服务类型的优先级不同</li><li>不可进行拥塞控制: 尚未指定, 8~15, 8 为具有最大冗余度的数据 (就是丢一点儿影响也没那么大的)</li></ul></li><li>流标号Flow label: 标识了一个数据报系列, 它们来源于同一个地址, 去往同一个地址, 使用同样的服务</li><li>有效载荷长度: <strong>定义存在冲突, 见下面</strong></li><li>下一个头部: 下一个可选的扩展头部的位置, 或者是上层协议 (比如 UDP/TCP) 的头部</li><li>跳数限制: 类似于 IPv4 中的 TTL (生存时间)</li><li>源地址: 发送方的地址</li><li>目的地址: 若使用了源路由选择, 则为下一个路由器的地址, 否则就是最终目的地的地址</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/%E7%AC%AC20%E7%AB%A0_IP%20%E5%8D%8F%E8%AE%AE/image-20210622221205342.png" alt="image-20210622221205342" style="zoom:67%;"><h2 id="五-IP-v4-和-IPv6-混合"><a href="#五-IP-v4-和-IPv6-混合" class="headerlink" title="五. IP v4 和 IPv6 混合"></a>五. IP v4 和 IPv6 混合</h2><ul><li>双协议栈: 同时支持 IPv4 和 v6</li><li>隧道技术<ul><li>v6 -&gt; v4 -&gt; v6</li><li>通过在 v6 分组前添加一个 v4 的头部来让分组通过仅支持 v4 的区域</li></ul></li><li>头部转换<ul><li>v6 -&gt; v4</li><li>由于接收方仅支持 v4, 但发送方使用 v6, 因此在最后转发给接收方前把 v6 的头部转换为 v4 的头部</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 逻辑寻址 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-19-章-逻辑寻址"><a href="#第-19-章-逻辑寻址" class="headerlink" title="第 19 章 逻辑寻址"></a>第 19 章 逻辑寻址</h1><h2 id="一-IPv4地址"><a href="#一-IPv4地址" class="headerlink" title="一. IPv4地址"></a>一. IPv4地址</h2><p><strong>A、B、C、D 和  E 类地址、掩码、子网和超网的概念</strong></p><ul><li>IPv4地址（IPv4 address）是<strong>一个32位地址</strong></li><li><strong>是唯一的与通用的。</strong></li><li><strong>IPv4的地址空间是2<sup>32</sup>或4 294 967 296。</strong></li><li>使用二进制标记法和点分十进制标记法<ul><li>二进制标记法: 二进制表示, 八位一个空格</li><li>点分十进制: 每个字节表示为十进制数, 中间用小数点分割</li></ul></li></ul><h3 id="分类寻址：ABCDE"><a href="#分类寻址：ABCDE" class="headerlink" title="分类寻址：ABCDE"></a>分类寻址：ABCDE</h3><ul><li>A类地址(Class A address)是为那些具有大量的主机或路由器的大型组织机构所设计的。</li><li>B类地址(Class B address)是为那些可能具有数万台主机或路由器的中型组织机构所设计的。</li><li>C类地址(Class C address)是为那些具有少量主机或路由器的小型组织机构所设计的。</li><li>在分类寻址中，大部分可用的地址被浪费了。</li><li>在A类中，一个字节定义网络号而三个字节定义主机号。在B类中，二个字节定义网络号，二个字节定义主机号。在C类中，三个字节定义网络号而一个字节定义主机号。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622163524235.png" alt="image-20210622163524235" style="zoom:67%;"><h3 id="掩码"><a href="#掩码" class="headerlink" title="掩码"></a>掩码</h3><ul><li>用连续1的串后跟连续0的串组成的一个32位掩码(mask)(也称为<strong>默认掩码</strong>(default mark))。</li><li>掩码能帮助我们找到网络号和主机号。</li><li>A、B、C类的掩码表：</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622163635284.png" alt="image-20210622163635284" style="zoom:67%;"><h3 id="子网和超网的概念"><a href="#子网和超网的概念" class="headerlink" title="子网和超网的概念"></a>子网和超网的概念</h3><ul><li>子网化：<ul><li>如果一个组织机构指派A类或B类中 一大块地址，它可将这些地址划分为几个类组，并赋予每一组为较小的网络(称为子网，subnet)。</li><li>子网化是在掩码中增加1的个数。</li></ul></li><li>超网化：<ul><li>一个组织机构能将几个C类块地址构成更大范围的地址空间。将几个网络联合起来构成一个超网（supernet）。</li><li>超网化是在掩码中减小1的个数。</li></ul></li></ul><h4 id="无类寻址"><a href="#无类寻址" class="headerlink" title="无类寻址"></a>无类寻址</h4><ul><li>没有类的概念, 但是仍划分为地址块</li><li>地址块的限制条件<ul><li>块中地址必须连续</li><li>块中地址个数必须为 2 的整数次幂</li><li>块的起始地址必须能被块中地址个数整除</li></ul></li><li>通过 CIDR 标记法定义块地址<ul><li>x.y.z.t/n</li><li>其中 /n 为掩码, n 为掩码中 1 的位数 (掩码中的 1 必定连续)</li></ul></li><li>起始地址: <strong>通过将块中某个地址的后 32-n 位置为 0 求得</strong> (也就是把地址和掩码进行与运算)</li><li>最后的地址: <strong>通过将块中某个地址的后 32-n 位置为 1 求得</strong>（可用给定地址与掩码的反码进行OR运算）</li><li>地址个数: 掩码求反，十进制数+1</li><li>网络地址: 代表整个网络, 通常是块的起始地址</li></ul><h2 id="二-子网划分方法、子网范围计算"><a href="#二-子网划分方法、子网范围计算" class="headerlink" title="二.  子网划分方法、子网范围计算"></a>二.  子网划分方法、子网范围计算</h2><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/20200327230800927.png" alt="在这里插入图片描述" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622172938197.png" alt="image-20210622172938197" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622173119841.png" alt="image-20210622173119841" style="zoom:67%;"><h2 id="三-NAT-的概念"><a href="#三-NAT-的概念" class="headerlink" title="三. NAT 的概念"></a>三. NAT 的概念</h2><ul><li>网络地址转换(network address translation, NAT)能使用户在内部拥有大量的地址，而在外部只有少量的地址。</li><li>内部通信能使用内部的地址，而外部通信能使用外部地址。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622170550812.png" alt="image-20210622170550812" style="zoom:67%;"><blockquote><p>NAT实现</p></blockquote><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622170659921.png" alt="image-20210622170659921" style="zoom:67%;"><blockquote><p>NAT地址转换</p></blockquote><h2 id="四-IPv6-地址及其缩短形式"><a href="#四-IPv6-地址及其缩短形式" class="headerlink" title="四. IPv6 地址及其缩短形式"></a>四. IPv6 地址及其缩短形式</h2><ul><li><p>16 个字节, 128 位</p></li><li><p>采用十六进制冒号标记法</p><ul><li>每两个字节一部分, 作为四个十六进制数字</li><li>每部分之间用冒号分隔</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622174406428.png" alt="image-20210622174406428" style="zoom:67%;"><blockquote><p>IPv6 地址用二进制与十六进制冒号标记法</p></blockquote></li><li><p>缩短，需满足：</p><ul><li>在两个冒号之间 (所以开头和结尾不能缩短)</li><li>高位的连续的 0 可以缩短</li><li>若有连续的几个部分仅包含 0, 则可以把这些 0 用两个冒号代替, <strong>但这种缩短只能用一次</strong></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC4%E9%83%A8%E5%88%86_%E7%BD%91%E7%BB%9C%E5%B1%82/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/%E7%AC%AC19%E7%AB%A0_%E9%80%BB%E8%BE%91%E5%AF%BB%E5%9D%80/image-20210622174536443.png" alt="image-20210622174536443" style="zoom:67%;"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 虚电路网络：帧中继和 ATM * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-18-章-虚电路网络：帧中继和-ATM"><a href="#第-18-章-虚电路网络：帧中继和-ATM" class="headerlink" title="第 18 章 虚电路网络：帧中继和 ATM"></a>第 18 章 虚电路网络：帧中继和 ATM</h1><h2 id="一-帧中继"><a href="#一-帧中继" class="headerlink" title="一. 帧中继"></a>一. 帧中继</h2><p><strong>帧中继的特征</strong>、帧中继的结构、永久虚电路、呼叫虚电路</p><h3 id="帧中继的特征"><a href="#帧中继的特征" class="headerlink" title="帧中继的特征"></a>帧中继的特征</h3><ul><li>以较高的速率（1.544Mbps以及最近的44.376Mbps）工作</li><li>工作在物理层和数据链路层</li><li>允许突发性数据</li><li>允许的帧大小为9 000字节，适合于所有的局域网帧</li><li>帧中继比其他传统的广域网花费少</li><li>帧中继仅在数据链路层有错误检测，没有流量或错误控制。-&gt;不需要序列号</li><li>帧中继中的 VCI (虚电路标识符) 称作 DLCI</li></ul><blockquote><p>VCI: Virtual Circuit Identifer<br>DLCI: DataLink Connection Identifer</p></blockquote><h3 id="帧中继的结构"><a href="#帧中继的结构" class="headerlink" title="帧中继的结构"></a>帧中继的结构</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/image-20210622152734913.png" alt="image-20210622152734913" style="zoom:67%;"><h3 id="永久虚电路PVC"><a href="#永久虚电路PVC" class="headerlink" title="永久虚电路PVC"></a>永久虚电路PVC</h3><blockquote><p> PVC: Permanent Virtual Circuit</p></blockquote><ul><li>由管理员为所有的交换机建立统一设置: 源地址分配一个 VCI, 目的地址分配一个 VCI</li><li>缺点:<ul><li>花费大, 即使未使用也需一直付费 (因为连接一直存在)</li><li>只能在一个源地址和一个目的地址间建立连接</li></ul></li></ul><h3 id="交换虚电路SVC"><a href="#交换虚电路SVC" class="headerlink" title="交换虚电路SVC"></a>交换虚电路SVC</h3><blockquote><p>SVC: Switched Virtual Circuit</p></blockquote><ul><li>建立短的, 临时的连接</li><li>需要连接建立和终止阶段</li><li>该连接只存在于源地址和目的地址的数据传输过程中。</li></ul><h2 id="二-异步传输模式ATM"><a href="#二-异步传输模式ATM" class="headerlink" title="二. 异步传输模式ATM"></a>二. 异步传输模式ATM</h2><blockquote><p>ATM: Asychoronous Transfer Mode</p></blockquote><p>ATM 的特征、信元的结构、虚路径  VP、虚电路  VC、VCI</p><h3 id="特征"><a href="#特征" class="headerlink" title="特征"></a>特征</h3><ul><li>定义了三个层，分别为应用适配层，ATM层和物理层<ul><li>物理层：信元可以在任何物理层介质中传输</li><li>ATM层：提供路由、通信量管理、交换和复用服务</li><li>应用适配层：用来支持两个ATM概念</li></ul></li><li>高速互联, 作为网间主干互联的协议</li><li>面向连接, 提供准确可预测的传输</li><li>是信元网络, 采用固定大小的信元作为数据交换的基本单位<ul><li>可以避免多路复用时先到达的大型帧对后到达的小型帧的长时间阻塞</li></ul></li><li>采用异步的时分复用 (TDM) 实现多路复用<ul><li>时隙大小为一个信元的大小</li><li>可以存在空时隙</li></ul></li></ul><h3 id="信元"><a href="#信元" class="headerlink" title="信元"></a>信元</h3><ul><li>ATM网络中的基本数据单元称为信元。</li><li><strong>信元网络使用信元作为数据交换的基本单位.信元定义为一个小的、固定大小的信息块.</strong></li><li>一个信元只有53字节长度，其中5个字节为头部， 48个字节为有效载荷（用户数据可能少于48个字节）。</li></ul><h3 id="传输路径-TP"><a href="#传输路径-TP" class="headerlink" title="传输路径 TP"></a>传输路径 TP</h3><ul><li>Transmission Path</li><li>是端点与交换机之间, 或两交换机之间的所有物理连接</li><li>类似于连接两个城市的高速公路的集合</li></ul><h3 id="虚路径-VP"><a href="#虚路径-VP" class="headerlink" title="虚路径 VP"></a>虚路径 VP</h3><ul><li>Virtual Path</li><li>两个交换机之间的一条或多条连接的集合</li><li>类似于两城市间的一条高速公路</li></ul><h3 id="虚电路-VC"><a href="#虚电路-VC" class="headerlink" title="虚电路 VC"></a>虚电路 VC</h3><ul><li>Virtual Circuit</li><li>信元网络基于虚电路</li><li>属于同一报文的所有信元沿着同一条虚电路传输, 同时保持先后次序</li></ul><p>通过 VPI 和 VCI 来定义一个虚连接, 前者定义特定 VP, 后者定义特定 VC</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/20210620160805.png" alt="TP VP VC" style="zoom:67%;"><blockquote><p>TP VP VC 间关系</p></blockquote><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/%E7%AC%AC18%E7%AB%A0_%E8%99%9A%E7%94%B5%E8%B7%AF%E7%BD%91%E7%BB%9C%EF%BC%9A%E5%B8%A7%E4%B8%AD%E7%BB%A7%E5%92%8CATM/20210620160831.png" alt="TP VP VC" style="zoom:67%;"><blockquote><p>VP和VC的例子</p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC17%E7%AB%A0_%E5%B9%BF%E5%9F%9F%E7%BD%91SONET/%E7%AC%AC17%E7%AB%A0_%E5%B9%BF%E5%9F%9F%E7%BD%91SONET/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC17%E7%AB%A0_%E5%B9%BF%E5%9F%9F%E7%BD%91SONET/%E7%AC%AC17%E7%AB%A0_%E5%B9%BF%E5%9F%9F%E7%BD%91SONET/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 广域网 SONET/SDH * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-17-章-广域网-SONET-SDH"><a href="#第-17-章-广域网-SONET-SDH" class="headerlink" title="第 17 章 广域网 SONET/SDH"></a>第 17 章 广域网 SONET/SDH</h1><h2 id="SONET-SDH"><a href="#SONET-SDH" class="headerlink" title="SONET/SDH"></a>SONET/SDH</h2><ul><li><strong>SONET由ANSI定义；SDH 由 ITU-T定义</strong></li><li>SONET标准包括四个功能层：**光子层(photonic layer),   段层(section layer), 线路层(line layer),路径层(path layer).**它们对应于物理层和数据链路层.</li><li><strong>使用SONET设备, 可以建立一个SONET网络, 它可以用做承载来自诸如ATM或IP负载的高速骨干网.</strong> </li><li><strong>SONET网络大致分为三类: 线状, 环状和网状网络.</strong></li><li>SONET/SDH是使用同步TDM多路复用的同步网络。系统中的所有时钟都锁定于主时钟。</li><li>SONET定义了称为同步传输信号(synchronous transport signal, STS)的电子信号等级体系。相应的光信号称为光载波(optical carrier, OC)。</li><li>SDH也规定了一个相似的系统，称为同步传 输模块(synchronous transport module, STM)。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 有线局域网：以太网 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-15-章-连接局域网、主干网和虚拟局域网"><a href="#第-15-章-连接局域网、主干网和虚拟局域网" class="headerlink" title="第 15 章 连接局域网、主干网和虚拟局域网"></a>第 15 章 连接局域网、主干网和虚拟局域网</h1><h2 id="一-连接设备"><a href="#一-连接设备" class="headerlink" title="一.  连接设备"></a>一.  连接设备</h2><p><strong>无源集线器、中继器、有源集线器、网桥、透明网桥、生成树、二层交换机、路由器、三层交换机，广播域和冲突域的划分</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622143939392.png" alt="image-20210622143939392" style="zoom:67%;"><blockquote><p>五类连接设备</p></blockquote><h3 id="无源集线器"><a href="#无源集线器" class="headerlink" title="无源集线器"></a>无源集线器</h3><ul><li>概念：<ul><li>是个连接器，连接来自不同分支的线路。</li><li>在星型拓扑以太网中，无源集线器只是一个来自不同站点的信号冲突点，集线器是冲突点。</li><li>在物理层之下</li></ul></li></ul><h3 id="中继器"><a href="#中继器" class="headerlink" title="中继器"></a>中继器</h3><ul><li>概念：<ul><li>仅工作在物理层。</li><li>中继器接收信号，并且在信号变得很弱或者被破坏之前，重新生成原始的位模式，然后中继器发送新生成的信号。</li></ul></li><li><strong>中继器连接一个局域网的各个网段。</strong></li><li>中继器不能连接采用不同协议的两个局域网。</li><li><strong>中继器转发每一帧，它没有过滤能力。</strong></li><li><strong>中继器是再生器，不是放大器。</strong></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622144239819.png" alt="image-20210622144239819" style="zoom:67%;"><h3 id="有源集线器"><a href="#有源集线器" class="headerlink" title="有源集线器"></a>有源集线器</h3><ul><li>概念：<ul><li>是一个多端口的中继器。</li><li>用于星型拓扑结构中，在站点间建立连接。</li></ul></li></ul><h3 id="网桥"><a href="#网桥" class="headerlink" title="网桥"></a>网桥</h3><ul><li>概念：<ul><li>工作在物理层和数据链路层。</li><li>用做物理层设备时，它重新生成接收到的信号。</li><li>用做数据链路层设备时，它可以检査帧所包含的物理（MAC）地址（源地址和目标地址）。</li></ul></li><li>过滤：检查帧的目的地址，并决定该帧是被转发或丢弃</li><li><strong>网桥有一个用做过滤决策的表。</strong></li><li><strong>网桥不改变帧中所包含的物理（MAC）地址。</strong></li></ul><h3 id="透明网桥"><a href="#透明网桥" class="headerlink" title="透明网桥"></a>透明网桥</h3><ul><li>概念：<ul><li>一个它所连接的站点完全意识不到其存在的网桥。</li><li>在系统中增加或移除一个透明网桥，则不需要重新配置。</li></ul></li><li>通过学习网络中的帧传输方式生成自己的表<ul><li>接收到帧时, 即可记录下该帧的物理地址和接受端口的对应关系</li><li>转发时, 若无包含目的地址的条目, 则从每个端口转发</li><li>可能造成帧泛滥</li></ul></li><li>在两个 LAN 之间存在多个透明网桥时, 可能会出现<strong>循环问题</strong> (同一帧被转发多次)</li></ul><h3 id="生成树"><a href="#生成树" class="headerlink" title="生成树"></a>生成树</h3><ul><li>概念：<ul><li>是一个没有循环路径的图</li><li>建立每个局域网都能通过唯一路径（没有循环）到达其他任何LAN的拓扑结构。</li><li>使用生成树算法建立无循环的拓扑结构 (因为树必定无环)<ul><li>网桥和 LAN 都视为节点</li><li>从网桥到 LAN 的跳数为 1, LAN 到网桥跳数为 0</li><li>网桥广播自己的 ID, 最小的作为树根</li><li>计算根网桥到每个网桥与 LAN 的最小成本的路径</li><li>路径组合即为生成树</li></ul></li><li>属于生成树的为转发端口, 不属于的为阻塞端口 (相当于被禁用了)</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC15%E7%AB%A0_%E8%BF%9E%E6%8E%A5%E5%B1%80%E5%9F%9F%E7%BD%91%E3%80%81%E4%B8%BB%E5%B9%B2%E7%BD%91%E5%92%8C%E8%99%9A%E6%8B%9F%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622145030146.png" alt="image-20210622145030146" style="zoom:67%;"></li></ul><h3 id="两层交换机"><a href="#两层交换机" class="headerlink" title="两层交换机"></a>两层交换机</h3><ul><li>概念：<ul><li>工作在物理层和数据链路层。</li><li>一个有许多端口并且有更好（更快）性能的网桥。</li><li>有少量端口的网桥只可以连接几个局域网。</li><li>有更多端口的网桥可以给每个站点分配唯一的端口-&gt;没有通信量竞争</li><li>通过物理地址转发帧</li></ul></li></ul><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><ul><li>概念：<ul><li>是三层设备，它基于分组的逻辑地址（主机到主机寻址）路由分组。</li><li>连接LAN和路由器中的WAN,它有一张表用来决策路由。</li><li>路由表通常是动态的，使用路由协议更新。</li></ul></li></ul><h3 id="三层交换机"><a href="#三层交换机" class="headerlink" title="三层交换机"></a>三层交换机</h3><ul><li>概念：<ul><li>工作在网络层，路由器的一种。</li><li>三层交换机中的交换光纤允许更快的表査询和转发。</li></ul></li></ul><h3 id="广播域和冲突域的划分"><a href="#广播域和冲突域的划分" class="headerlink" title="广播域和冲突域的划分"></a>广播域和冲突域的划分</h3><h4 id="冲突域"><a href="#冲突域" class="headerlink" title="冲突域"></a>冲突域</h4><ul><li>在物理层, 在同一总线 (或者其他物理网段) 上的站点之和</li><li>因此, 仅工作在物理层或之下的设备无法划分冲突域, 例如<ul><li>无源集线器, 有源集线器</li><li>中继器</li></ul></li></ul><blockquote><p>是物理层面的概念</p></blockquote><h4 id="广播域"><a href="#广播域" class="headerlink" title="广播域"></a>广播域</h4><ul><li>能接收到同样广播帧的节点的之和, 在数据链路层</li><li>因此, 仅工作在数据链路层及以下的设备无法划分广播域, 例如<ul><li>无法划分冲突域的设备 👆</li><li>二层交换机</li><li>网桥和透明网桥</li></ul></li><li>通过划分 VLAN 可以隔离广播域, 所以每一个 VLAN 都是一个广播域</li></ul><blockquote><p>涉及到了帧, 是数据链路层的概念</p></blockquote><h2 id="二-虚拟局域网"><a href="#二-虚拟局域网" class="headerlink" title="二.  虚拟局域网"></a>二.  虚拟局域网</h2><p><strong>概念及划分方法</strong></p><ul><li>将 LAN 划分为逻辑上的网段</li><li>不同 VLAN 之间不能直接通信, 这就划分了广播域</li><li>可以基于端口, 物理地址, 逻辑地址, 多播地址等划分 VLAN</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 有线局域网：以太网 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-14-章-无线局域网"><a href="#第-14-章-无线局域网" class="headerlink" title="第 14 章 无线局域网"></a>第 14 章 无线局域网</h1><h2 id="一-WLAN-体系结构与-IEEE-802-11-标准"><a href="#一-WLAN-体系结构与-IEEE-802-11-标准" class="headerlink" title="一. WLAN 体系结构与 IEEE 802.11 标准"></a>一. WLAN 体系结构与 IEEE 802.11 标准</h2><h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><h4 id="基本服务集-BSS"><a href="#基本服务集-BSS" class="headerlink" title="基本服务集(BSS)"></a>基本服务集(BSS)</h4><ul><li><p>无线局域网的基本组成部分</p></li><li><p>分为特别网络和基础设施网络</p><ul><li>特别网络: 不带 AP (access point, 访问点/接入点)</li><li>基础设施网络: 有一个 AP, 也称作基础网络</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622111944801.png" alt="image-20210622111944801" style="zoom:67%;"></li></ul><h4 id="扩展服务集-ESS"><a href="#扩展服务集-ESS" class="headerlink" title="扩展服务集(ESS)"></a>扩展服务集(ESS)</h4><ul><li><p>由两个或更多个带有 AP 的 BSS 组成</p></li><li><p>通过分布式系统连接各 AP, 连接方式为任意的 IEEE 局域网, 例如以太网</p></li><li><p>移动站点: 普通的站点; 固定站点: AP</p></li><li><p>同 BSS 内可以直接通信, 但不同 BSS 下不能直接通信</p></li><li><p>移动站点可以同时属于多个 BSS</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622111958865.png" alt="image-20210622111958865" style="zoom:67%;"></li></ul><h4 id="站点类型"><a href="#站点类型" class="headerlink" title="站点类型"></a>站点类型</h4><ul><li>不迁移: 不动或者仅在一个 BSS 内部移动</li><li>BSS 迁移: 在同一个 ESS 下, 可以在 BSS 间移动</li><li>ESS 迁移: 可以在不同的 ESS 间迁移, 但不保证连续</li></ul><h2 id="二-MAC-子层"><a href="#二-MAC-子层" class="headerlink" title="二.MAC 子层"></a>二.MAC 子层</h2><p><strong>（DCF 和 PCF）</strong>、帧结构</p><h3 id="分布式协调功能（DCF）"><a href="#分布式协调功能（DCF）" class="headerlink" title="分布式协调功能（DCF）"></a>分布式协调功能（DCF）</h3><blockquote><p>DCF: Distributed Coordination Function</p></blockquote><ul><li><p>采用 CSMA/CA 作为访问方式, 原因:</p><ul><li>否则需要发送时同时侦听, 提高成本</li><li>由于隐藏站点可能无法检测冲突</li><li>站点间距导致的信号衰减可能会使两端无法检测到对方的冲突</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622113856105.png" alt="image-20210622113856105" style="zoom:67%;">### 点协调功能（PCF）</li></ul><blockquote><p>PCF: Point Coordination Function</p></blockquote><ul><li>集中式无竞争轮询</li><li>优先级高于 DCF, 主动权在 AP</li><li>主要用于对时间敏感数据的传输</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622114445632.png" alt="image-20210622114445632" style="zoom:67%;"><h3 id="帧结构"><a href="#帧结构" class="headerlink" title="帧结构"></a>帧结构</h3><ul><li><p>帧格式</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622114520052.png" alt="image-20210622114520052" style="zoom:67%;"></li><li><p>9 个字段: 帧控制 (FC), D, 地址 (有四个), 序列号, 帧主题, FCS (帧校验和, CRC-32)</p></li><li><p>三种类型: 管理帧, 控制帧, 数据帧</p></li></ul><h2 id="三-802-11-物理层、寻址方式、隐藏站点和暴露站点"><a href="#三-802-11-物理层、寻址方式、隐藏站点和暴露站点" class="headerlink" title="三. 802.11 物理层、寻址方式、隐藏站点和暴露站点"></a>三. 802.11 物理层、寻址方式、隐藏站点和暴露站点</h2><h3 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622115313831.png" alt="image-20210622115313831" style="zoom:67%;"><blockquote><p>FHSS调频扩频；DHSS直接序列扩频；红外线，PMM脉冲位置调制</p><p>OFDM正交频分多路复用；DSSS高速率直接序列扩频；OFDM正交频分多路复用</p></blockquote><ul><li><p>除红外线外, 均在 ISM 频带: 902<del>928 MHz, 2.4</del>4.835 GHz, 5.725~5.850 GHz</p><ul><li>ISM: 工业的, 科学的, 医学的</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622115632888.png" alt="image-20210622115632888" style="zoom:67%;"></li></ul><h3 id="寻址机制"><a href="#寻址机制" class="headerlink" title="寻址机制"></a>寻址机制</h3><ul><li>四种情况: 站点间, AP 间, 站点和 AP 之间 (双向)</li><li>通过 FC 中的 To DS (发往分布式系统, 差不多就是某个 AP) 和 From DS (来自分布式系统, 如前) 确定具体情况, 见下</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/20210619231301.png" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622114850116.png" alt="image-20210622114850116" style="zoom:67%;"><ol><li>该帧既不是发往一个分布式系统，也不是来自于一个分布式系统，而是从同一个BSS中的一个站点到另外一个站点，不经过DS，需要给原始发送站回送ACK帧</li><li>该帧来自于分布式系统，从一个AP来，到一个站点去，ACK帧将被回送给AP</li><li>该帧要发送给一个分布式系统，从一个站点发往AP，ACK帧将被发送到原始站点</li><li>暗示分布式系统也是无线的，从一个DS的AP发送到另外一个DS的AP；<br>因为如果其中一个DS是一个有线局域网，则这里就不需要定义地址</li></ol><h3 id="隐藏站点"><a href="#隐藏站点" class="headerlink" title="隐藏站点"></a>隐藏站点</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/image-20210622115055557.png" alt="image-20210622115055557" style="zoom:67%;"><ul><li>若 B -&gt; A, C -&gt; A, 由于 B C 之间相互隐藏, 不知道对方存在, 因此会造成冲突</li><li>解决方法: 使用握手帧 (RTS 和 CTS, 请求发送和允许发送)</li></ul><h3 id="暴露站点"><a href="#暴露站点" class="headerlink" title="暴露站点"></a>暴露站点</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/%E7%AC%AC14%E7%AB%A0_%E6%97%A0%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91/20210619232117.png" alt="img" style="zoom:67%;"><ul><li>若 A -&gt; B, 开始后 C -&gt; D, 由于前者干扰导致后者必须等待 (即使 D 不在 A 范围)</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 有线局域网：以太网 * @Description:  * @Author: SoulCompiler/horizon/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-13-章-有线局域网：以太网"><a href="#第-13-章-有线局域网：以太网" class="headerlink" title="第 13 章 有线局域网：以太网"></a>第 13 章 有线局域网：以太网</h1><h2 id="一-IEEE-标准"><a href="#一-IEEE-标准" class="headerlink" title="一. IEEE 标准"></a>一. IEEE 标准</h2><p><strong>LLC 和 MAC</strong></p><h3 id="IEEE-标准"><a href="#IEEE-标准" class="headerlink" title="IEEE 标准"></a>IEEE 标准</h3><ul><li>将数据链路层划分为 LLC (逻辑链路控制层) 和 MAC子层 (介质访问控制层), 前者在后者上面</li><li>LLC 对所有的IEEE局域网均适用(使MAC子层变得透明), 定义了一个协议数据单元, 提供流量控制和差错控制(接近网络层，和网络有关)</li><li>MAC子层为每种相应的局域网协议定义了网络方法和成帧格式(接近物理层，和物理层有关)</li></ul><h3 id="逻辑链路控制层（LLC）"><a href="#逻辑链路控制层（LLC）" class="headerlink" title="逻辑链路控制层（LLC）"></a>逻辑链路控制层（LLC）</h3><ul><li>流量控制、差错控制和部分成帧的职能都被集中到称为逻辑链路控制层的子层中。</li><li>LLC为所有的IEEE局域网提供一个单一的数据链路控制协议。</li><li>一个单一的LLC协议能使不同的局域网之间进行相互交换，因为它使MAC子层变得透明。</li><li>LLC的目的是为需要流量控制和差错控制的上层协议提供这些服务。</li></ul><h3 id="介质访问控制层-MAC"><a href="#介质访问控制层-MAC" class="headerlink" title="介质访问控制层(MAC)"></a>介质访问控制层(MAC)</h3><ul><li>为每个局域网定义特定的访问方法。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/image-20210622100051700.png" alt="image-20210622100051700" style="zoom:67%;"><h2 id="二-标准以太网的-MAC-子层"><a href="#二-标准以太网的-MAC-子层" class="headerlink" title="二. 标准以太网的 MAC 子层"></a>二. 标准以太网的 MAC 子层</h2><p><strong>帧格式、MAC 地址、CSMA/CD 最短帧长</strong>、编码和解码、10Base5、10 Base 2、10 Base -T、10 Base -F</p><ul><li><p>标准以太网: 10Mbps</p></li><li><p><code>IEEE 802.3标准是一种基带总线型的局域网标准，它描述物理层和数据链路子层MAC子层的实现方法。</code></p></li></ul><h3 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h3><ul><li><p>以太网的帧包括7个字段：前导符、SFD(帧开始定界符)、DA(目的地址)、SA(源地址)、长度/类型、上层数据和CRC。</p></li><li><p><strong>帧的长度：最小值：64字节（512位） 最大值：1518字节（12 144位）</strong>；即数据位在46B-1500B</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/image-20210622100611624.png" alt="image-20210622100611624" style="zoom:67%;"></li></ul><h3 id="MAC-地址"><a href="#MAC-地址" class="headerlink" title="MAC 地址"></a>MAC 地址</h3><ul><li>以太网地址是6字节（48位） 的，通常用十六进制表示法（hexadecimal notation）来表示，两两一组, 冒号分隔。</li><li>单播, 多播与广播地址:<ul><li><strong>第一个字节决定了地址的类型最低位，若为 0, 则为单播地址; 为 1, 则为多播地址</strong></li><li><strong>广播目的地址的每一位都是 1, 是多播的特例</strong></li></ul></li><li>源地址永远是一个单播地址——帧只来自一个站点。</li><li>目的地址既可以是单播地址，也可以是多播地址，还可以是广播地址。</li><li>发送顺序: 每个字节的低位在前, 逐字节发送<ul><li>例如 <code>47:20</code>, 发送顺序为 <code>111100010 00000100</code></li></ul></li></ul><h3 id="CSMA-CD-最短帧长"><a href="#CSMA-CD-最短帧长" class="headerlink" title="CSMA/CD 最短帧长"></a>CSMA/CD 最短帧长</h3><ul><li>时隙：一个帧最大的往返时间加上发送干扰信号所需的时间<ul><li>以太网的时隙以位来定义。他是一个站点发送512位所需的时间。</li><li>实际的时隙取决于数据速率，10Mbps的以太网是51.2us。</li></ul></li><li>最大网络长度：<ul><li>$最大长度=传播速度\times(时隙/2)=(2\times10^8)\times(51.2\times10^{-6}/2)=5120m$</li><li>实际上为 2500m, 由于中继器等延迟</li></ul></li></ul><h3 id="编码和解码"><a href="#编码和解码" class="headerlink" title="编码和解码"></a>编码和解码</h3><ul><li><p>所有标准的实现都使用10Mbps的数字信号（基带）。</p></li><li><p>采用曼彻斯特编码</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/image-20210622102654048.png" alt="image-20210622102654048" style="zoom:67%;"></li></ul><h3 id="标准以太网的分类"><a href="#标准以太网的分类" class="headerlink" title="标准以太网的分类"></a>标准以太网的分类</h3><ul><li>10Base5 粗缆以太网:使用一个有外部收发器的总线拓扑，并通过一个外接口与粗轴电缆相连接</li><li>10Base2 细缆以太网: 总线型 同轴电缆 细缆 有弹性</li><li>10Base-T 双绞线以太网: 物理星形拓扑结构，双绞线在站点和集线器间形成了两条通路, 冲突在集线器中</li><li>10Base-F: 星型 两条光纤 +网络集线器</li></ul><p><strong>标准以太网实现的总结：</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/image-20210622103253505.png" alt="image-20210622103253505" style="zoom:67%;"><h2 id="三-桥接以太网、交换式以太网、全双工以太网"><a href="#三-桥接以太网、交换式以太网、全双工以太网" class="headerlink" title="三.  桥接以太网、交换式以太网、全双工以太网"></a>三.  桥接以太网、交换式以太网、全双工以太网</h2><h3 id="桥接以太网"><a href="#桥接以太网" class="headerlink" title="桥接以太网"></a>桥接以太网</h3><ul><li>将局域网用网桥（bridge）分割。</li><li>网桥的两个作用：<ul><li>提高带宽：一个网桥将网络分成两个或更多的网络。</li><li>分割冲突域：在有桥接的情况下，冲突域会变得更小而且冲突的概率大幅度减少。</li></ul></li></ul><h3 id="交换式以太网"><a href="#交换式以太网" class="headerlink" title="交换式以太网"></a>交换式以太网</h3><ul><li>通过二层交换机连接 N<em>N</em> 个以太网, 相当于一个多口网桥</li><li>带宽仅有站点和交换机之间共享</li><li>冲突域也划分为了 N<em>N</em> 个</li></ul><h3 id="全双工以太网"><a href="#全双工以太网" class="headerlink" title="全双工以太网"></a>全双工以太网</h3><ul><li>在站点与交换机之间不是使用一条链路，而是使用两条链路：一个用于传送，另一个则用于接收。</li><li>站点和交换机间点对点, 不需要共享, 没有冲突，不需要CSMA/CD方法。</li><li>为了在全双工交换式以太网中提供流量控制和差错控制，在LLC子层和MAC子层之间又增加了一个新的子层叫做MAC控制</li></ul><h2 id="四-快速以太网"><a href="#四-快速以太网" class="headerlink" title="四.  快速以太网"></a>四.  快速以太网</h2><p>MAC 子层、拓扑结构、100Base -TX、100Base-FX、100Base –T4</p><ul><li>100Mbps</li><li>不触及 MAC子层</li><li>放弃总线拓扑而只保留星型拓扑</li><li>不需要 CSMA/CD, 但为了兼容保留</li><li>支持自动协商<ul><li>它允许一个站点或一个集线器有一定的能力范围。</li><li>允许两个设备协商它们的运行模式和传输速率。</li></ul></li><li>类型:<ul><li>100Base-TX: 两条双绞线(五类双绞线/STP), MLT-3 编码</li><li>100Base-FX: 两条双光纤, NRZ-I 编码</li><li>100Base-T4: 四条三类UTP, 8B/6T 编码</li></ul></li></ul><ul><li><p>快速以太网实现的总结：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/%E7%AC%AC13%E7%AB%A0_%E6%9C%89%E7%BA%BF%E5%B1%80%E5%9F%9F%E7%BD%91%EF%BC%9A%E4%BB%A5%E5%A4%AA%E7%BD%91/image-20210622104222461.png" alt="image-20210622104222461" style="zoom:67%;"></li></ul><h2 id="五-千兆以太网"><a href="#五-千兆以太网" class="headerlink" title="五.千兆以太网"></a>五.千兆以太网</h2><p>MAC 子层、拓扑结构、1000Base -SX、1000Base-LX、1000Base –CX</p><ul><li>1000Mbps</li><li>触及MAC子层</li><li><strong>在千兆以太网的全双工模式中，不存在冲突；电缆长度的最大值取决于电缆中信号的衰减程度。</strong></li><li>半双工与全双工方法:<ul><li>半双工模式:<ul><li>使用集线器而不是交换机，使用CSMA/CD</li><li>传统方法: 相同的最小帧长 (512位)</li><li>载波扩展方法: 定义最小帧长 512 字节, 4096 位</li><li>帧突发方法: 发送成倍的帧, 类似一个非常大的帧在传输</li></ul></li><li>全双工方法:<ul><li>使用交换机, 不需要 CSMA/CD</li></ul></li></ul></li><li>类型:<ul><li>1000Base-SX: 两条短波光纤</li><li>1000Base-LX: 两条长波光纤</li><li>1000Base-CS: 两条铜管线 STP</li><li>1000Base-T: 四条 UTP</li></ul></li></ul><h2 id="六-总线型以太网的信道利用率简单分析"><a href="#六-总线型以太网的信道利用率简单分析" class="headerlink" title="六.  总线型以太网的信道利用率简单分析"></a>六.  总线型以太网的信道利用率简单分析</h2><ul><li>书上无</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 多路访问 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-12-章-多路访问"><a href="#第-12-章-多路访问" class="headerlink" title="第 12 章 多路访问"></a>第 12 章 多路访问</h1><h2 id="一-随机访问"><a href="#一-随机访问" class="headerlink" title="一.  随机访问"></a>一.  随机访问</h2><p><strong>纯ALOHA、时隙ALOHA、CSMA（三种持续方法：1-持续、非持续、p-持续）、CSMA/CD（最短帧长）、CSMA/CA</strong></p><h3 id="1️⃣-ALOHA协议"><a href="#1️⃣-ALOHA协议" class="headerlink" title="1️⃣ ALOHA协议"></a>1️⃣ ALOHA协议</h3><ul><li>ALOHA协议是由美国夏威夷大学开发的一种网络协议。处于OSI模型中的数据链路层。它属于随机存取协议（Random Access Protocol）中的一种。它分为<code>纯ALOHA协议和分段ALOHA协议</code>（或时隙ALOHA协议）。</li></ul><h4 id="纯ALOHA"><a href="#纯ALOHA" class="headerlink" title="纯ALOHA"></a>纯ALOHA</h4><ul><li>概念：<ul><li>只要每个站点有帧要发送，它就发送帧。</li></ul></li><li>每帧都有定时器, 超时未收到接收方的确认帧则等待一段时间 (称为补偿时间 T<del>B</del>）后重发</li><li>脆弱时间：2T<sub>fr</sub></li><li><strong>吞吐量：$S = G \times e^{-2G}$。当G = 1/2时，最大吞吐量S <sub>max</sub> = 0.184</strong></li><li><em>G</em> 为一个帧传输时间内系统产生的帧的平均数</li><li>若传输的最长时间为T<del>P</del>, 帧平均传输时间为T<del>fr</del>,<ul><li>则$ T_B=R \times (T_P \ 或 \ T_{fr}) R \in [0,\ 2^k-1]$, 取决于实现</li><li>称为二进制指数退避</li></ul></li></ul><h5 id="时隙-ALOHA"><a href="#时隙-ALOHA" class="headerlink" title="时隙 ALOHA"></a>时隙 ALOHA</h5><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320213738438.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="时隙ALOHA"><a href="#时隙ALOHA" class="headerlink" title="时隙ALOHA"></a>时隙ALOHA</h4><ul><li>概念：<ul><li>把时间分割成T<sub>fr</sub>秒的时隙，并强制站点只有在时隙开始之时才能发送。</li></ul></li><li>脆弱时间：T<sub>fr</sub></li><li>吞吐量：$S = G \times e^{-G}$。当G = 1时，最大吞吐量S <sub>max</sub> = 0.368</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320214209487.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="对比纯ALOHA和时隙ALOHA"><a href="#对比纯ALOHA和时隙ALOHA" class="headerlink" title="对比纯ALOHA和时隙ALOHA"></a>对比纯ALOHA和时隙ALOHA</h4><ol><li>纯ALOHA比时隙ALOHA 吞吐量更低，效率更低</li><li>纯ALOHA想发就发，时隙ALOHA只有在时间片段开始时才能发</li></ol><h3 id="2️⃣-载波侦听多路访问-CSMA"><a href="#2️⃣-载波侦听多路访问-CSMA" class="headerlink" title="2️⃣ 载波侦听多路访问(CSMA)"></a>2️⃣ 载波侦听多路访问(CSMA)</h3><ul><li>全称Carrier Sense Multiple Access (CSMA)，是一种允许多个设备在同一信道发送信号的协议，其中的设备监听其它设备是否忙碌，只有在线路空闲时才发送。</li><li>概念：<ul><li>每一个站点在发送之前首先要监听介质(或者检査介质的状态)。</li></ul></li><li>虽然CSMA能够减少冲突的槪率，但是它不能消除冲突，因为还有传播的延迟。</li><li>脆弱时间：传播时间T <sub>p</sub>。这是一个信号从介质的末端到另一端的传播时间。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320215004525.png" alt="在这里插入图片描述" style="zoom:67%;"><p>三种持续方法：</p><h4 id="1-持续："><a href="#1-持续：" class="headerlink" title="1-持续："></a>1-持续：</h4><ul><li><code>忙:一直监听</code></li><li>如果站点发现线路空闲，那么它就立即发送帧(概率是1 ) 。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320215439238.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="非持续："><a href="#非持续：" class="headerlink" title="非持续："></a>非持续：</h4><ul><li><code>忙:随机时间后监听</code></li><li>要发送帧的站点侦听线路，如果线路空闲，它就立即发送。如果线路不空闲，站点就等待一个随机时间，然后再次侦听线路。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320215750381.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="p-持续："><a href="#p-持续：" class="headerlink" title="p-持续："></a>p-持续：</h4><ol><li><code>空闲:p概率传输，1-p概率等待下次时间传输;忙:随机时间后监听</code></li><li>如果概率是p，站点发送帧。</li><li>如果概率是q=1-p.站点会等待下一个时隙的开始并再次检査线路。<br> a. 如果线路空闲，它将进入步骤1。<br> b. 如果线路繁忙，它会当做一个冲突已经发生了并使用补偿程序。</li></ol><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320220143493.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="三种CSMA对比总结"><a href="#三种CSMA对比总结" class="headerlink" title="三种CSMA对比总结"></a><strong>三种CSMA对比总结</strong></h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320220510354.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="3️⃣带冲突检测的载波侦听多路访问-CSMA-CD"><a href="#3️⃣带冲突检测的载波侦听多路访问-CSMA-CD" class="headerlink" title="3️⃣带冲突检测的载波侦听多路访问(CSMA/CD)"></a>3️⃣带冲突检测的载波侦听多路访问(CSMA/CD)</h3><ul><li>概念：<ul><li>任意站点都可以发送帧，然后就监控介质看传送是否成功。如果成功，站点完成发送；如果不成功，就说明存在冲突，需要重新发送此帧。</li></ul></li><li>帧的最小长度：<ul><li>在发送帧的最后一位前，发送站点必须检测冲突，如有任何冲突要放弃传输。</li><li>帧传输时间T<sub>fr</sub>必须至少是最大传播时间T<sub>p</sub>的两倍。</li></ul></li></ul><ul><li><p>简介:</p></li><li><p><strong>边发送边监听的半双工网络</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320231105488.png" alt="在这里插入图片描述" style="zoom:67%;"></li></ul><h4 id="传播时延对载波监听的影响"><a href="#传播时延对载波监听的影响" class="headerlink" title="传播时延对载波监听的影响"></a><strong>传播时延对载波监听的影响</strong></h4><ul><li><p>最多两倍的总线端到端的传播时延(2t)知道发生碰撞</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320231607656.png" alt="在这里插入图片描述" style="zoom:67%;"></li></ul><h4 id="截断二进制指数规避算法"><a href="#截断二进制指数规避算法" class="headerlink" title="截断二进制指数规避算法"></a><strong>截断二进制指数规避算法</strong></h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320232120485.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="最小帧长问题"><a href="#最小帧长问题" class="headerlink" title="最小帧长问题"></a><strong>最小帧长问题</strong></h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200320232331351.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="4️⃣带冲突避免的载波侦听多路访问-CSMA-CA"><a href="#4️⃣带冲突避免的载波侦听多路访问-CSMA-CA" class="headerlink" title="4️⃣带冲突避免的载波侦听多路访问(CSMA/CA)"></a>4️⃣带冲突避免的载波侦听多路访问(CSMA/CA)</h3><ul><li>概念：<ul><li>一个站点在传输过程中检测到冲突时，要有能力去接收信号。</li><li>当没有冲突时，站点接收到一种信号：它自身的信号。</li><li>当冲突发生时，站点接收到两种信号：它自身的信号和第二个站点传输的信号。</li></ul></li></ul><h4 id="CSMA-CA工作原理"><a href="#CSMA-CA工作原理" class="headerlink" title="CSMA/CA工作原理"></a>CSMA/CA工作原理</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/202003211904410.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="CSMA-CA与CSMA-CD比较"><a href="#CSMA-CA与CSMA-CD比较" class="headerlink" title="CSMA/CA与CSMA/CD比较"></a>CSMA/CA与CSMA/CD比较</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200321191055967.png" alt="在这里插入图片描述" style="zoom:67%;"><h2 id="二-受控访问：预约、轮询、令牌环"><a href="#二-受控访问：预约、轮询、令牌环" class="headerlink" title="二.  受控访问：预约、轮询、令牌环"></a>二.  受控访问：预约、轮询、令牌环</h2><h3 id="1️⃣预约"><a href="#1️⃣预约" class="headerlink" title="1️⃣预约"></a>1️⃣预约</h3><ul><li>概念：<ul><li>站点在发送数据之前需要预约。将时间划分为时隙，在每一个时隙内，在数据帧之前先发送一个预约帧。</li><li>如果系统中有N个站点，在预约帧中就恰好会有2N个预约子时隙。每个子时隙均属于一个站点。</li><li>当一个站点想要发送一个数据帧时，它在自己的子时隙中做一个预约。已经预约完的站点可以在预约帧之后发送数据帧。</li></ul></li></ul><h3 id="2️⃣轮询"><a href="#2️⃣轮询" class="headerlink" title="2️⃣轮询"></a>2️⃣轮询</h3><ul><li><p>轮询访问控制的特点：在轮询访问中，用户不能随机地发送信息，而要通过一个集中控制的监控站，以循环方式轮询每个结点，再决定信道的分配。当某结点使用信道时，其他结点都不能使用信道。</p></li><li><p>这里我们只讨论两类：<code>轮询协议与令牌传递协议</code></p></li><li><p>概念：</p><ul><li>一个设备作为主站，而另一些设备作为从站。</li><li>所有的数据交换都要通过主站点进行，即使最终的目的站点是从站点时也是这样。</li><li>主设备控制链路，而从设备只是跟随着它的指令工作。</li><li>主设备决定在给定的时间内哪个设备被容许使用通道。</li><li>主设备始终是一个会话的发起者。</li></ul></li><li><p>轮询：</p><ul><li>如果主设备希望接收数据，它就询问从设备是否有数据要发送。</li></ul></li><li><p>选择：</p><ul><li>如果主设备希望发送数据，它就通知从设备准备接收。</li></ul><h5 id="轮询协议"><a href="#轮询协议" class="headerlink" title="轮询协议"></a>轮询协议</h5><ul><li>轮询协议要求节点中有一个被指定为主节点，其余节点是从属节点。</li></ul><ul><li>主节点以循环的方式轮询每一个从属节点，“邀请”从属节点发送数据（实际上是向从属节点发送一个报文，告诉从属节点可以发送帧以及可以传输帧的最大数量），只有被主节点“邀请”的从节点可以发送数据，没有被“邀请”的节点不能发送，只能等待被轮询。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200321193444582.png" alt="在这里插入图片描述" style="zoom:67%;"></li></ul><h3 id="3️⃣令牌传递"><a href="#3️⃣令牌传递" class="headerlink" title="3️⃣令牌传递"></a>3️⃣令牌传递</h3><ul><li>概念：<ul><li>网络中的站点被组织在一个逻辑环中。</li><li>对每一个站点来说，都有它的前驱和后继。</li><li>前驱是指逻辑环中处于该站点之前的站点；而后继是指在环中处于该站点之后的站点。</li><li>该站点是目前正在进行访问的站点。</li><li>访问的权限由该站点的前驱站点传递给它。当该站点没有数据再要发送时，便将权限传递给它的后继站点。</li></ul></li><li>权限如何传递：<ul><li>令牌的持有赋予站点访问通道并发送数据的权限。</li><li>当一个站点有一些数据要发送时，它要等待从它的前驱站点传来的令牌。</li><li>持有令牌并发送数据。</li><li>当这个站点没有数据再要发送时，它释放令牌并传递给环中的下一个逻辑站点。</li><li>站点只有在下一个循环中再次收到令牌时才能再发送数据。</li><li>如果一个站点收到了令牌，但是它没有数据要发送，它便将令牌传递给下一个站点。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/20200321195854637.gif" alt="在这里插入图片描述" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/%E7%AC%AC12%E7%AB%A0_%E5%A4%9A%E8%B7%AF%E8%AE%BF%E9%97%AE/2020032119591739.png" alt="在这里插入图片描述" style="zoom: 67%;"></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 数据链路控制 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-11-章-数据链路控制"><a href="#第-11-章-数据链路控制" class="headerlink" title="第 11 章 数据链路控制"></a>第 11 章 数据链路控制</h1><h2 id="一-成帧"><a href="#一-成帧" class="headerlink" title="一.  成帧"></a>一.  成帧</h2><ul><li><p>概念：</p><ul><li>通过添加发送方地址和接收方地址，组帧（framing）将一条从源端到目的端的报文分离开来，或者将到不同目的端的报文分离开来。</li><li>目的地址定义了分组要去的地方，而发送方地址帮助接收方确认接收。</li></ul></li><li><p>若一个帧很大，将使得流量和差错控制变得十分低效。当一个巨大的帧承载一条报文时，即使一个字节的错误也需要重新传递整条报文。</p></li><li><p>成帧分类：</p><ul><li>固定长度成帧：<ul><li>不需要定义帧的边界，长度本身可以用作分隔符。</li></ul></li><li>可变长度成帧：<ul><li>使用方法来规定一个帧的结束和下一个帧的开始。主要有两种：<ul><li>面向字符协议：<ul><li><p>头部通常携带源端地址和目的端地址以及其他控制信息，而尾部携带检错或纠错冗余位。</p></li><li><p>为了将一个帧与下一个分离开来，在帧的开始和结束增加了8位（1字节）的标记（flag）。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200310183159293.png" alt="在这里插入图片描述" style="zoom:67%;"></li></ul></li><li>面向位协议：<ul><li><p>帧的数据段是一个位的序列。</p></li><li><p>使用一个特殊的8位模式的标记01111110作为分隔符来标明帧的开始和结束。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200310183754650.png" alt=" 5‘1’1‘0' " style="zoom:67%;"></li></ul></li></ul></li></ul></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/image-20210621175951201.png" alt="image-20210621175951201" style="zoom:67%;"><p>(王道)<strong>封装成帧、帧定界、帧同步</strong>：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200310181452970-1624269740472.png" alt="王道成帧" style="zoom:67%;"></li></ul><h2 id="二-流量控制和差错控制的概念"><a href="#二-流量控制和差错控制的概念" class="headerlink" title="二.  流量控制和差错控制的概念"></a>二.  流量控制和差错控制的概念</h2><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><ul><li>概念：<ul><li>流量控制是数据链路层的一种功能，流量控制对数据链路上的帧的发送速率进行控制，以使接收方有足够的缓冲空间来接受每个帧</li><li>流量控制的基本方法是由接收方控制发送方发送数据的速率</li><li>常见的流量控制方式有两种：<code>停止-等待协议、滑动窗口协议</code></li><li>每个接收设备都有一块存储区，称之为缓冲区，存储进入的数据直到它们被处理。如果缓冲区也装满了， 接收方必须能告知发送方停止传输直到它能够再次接收为止。</li><li><strong>流量控制就是一系列过程，用来限制发送方在等到确认之前发送的数据数量。</strong></li></ul></li></ul><h3 id="差错控制"><a href="#差错控制" class="headerlink" title="差错控制"></a>差错控制</h3><ul><li>概念：<ul><li>使得接收方能够提示发送方在传输过程中有帧的丢失或破坏，并协调发送方重新传输这些帧。</li><li><strong>数据链路层的差错控制基于自动重复请求，即重传数据。</strong></li><li>自动重复请求：<ul><li>在交换的任何时刻检测到一个差错， 就要重传这个出错的帧。</li></ul></li></ul></li></ul><h2 id="三-ARQ、GBN、SR"><a href="#三-ARQ、GBN、SR" class="headerlink" title="三.  ARQ、GBN、SR"></a>三.  ARQ、GBN、SR</h2><p><strong>停止等待ARQ、后退 N 帧 ARQ（发送方窗口大小  2m-1，接收方窗口大小为 1）和选择重发 ARQ（发送方窗口大小  2m-1，接收方窗口大小与发送方一致）的窗口控制过程</strong></p><h3 id="停止等待自动重复请求ARQ"><a href="#停止等待自动重复请求ARQ" class="headerlink" title="停止等待自动重复请求ARQ"></a>停止等待自动重复请求ARQ</h3><ul><li><code>停止-等待协议也称为单帧滑动窗口与停止-等待协议</code></li><li>该协议规定发送方每发送一帧后就要停下来，等待接收方已正确接收的确认（acknowledgement）返回后才能继续发送下一帧。</li><li>由于接收方需要判断接收到的帧是新发的帧还是重新发送的帧，因此发送方要为每一个帧加一个序号。</li><li>由于停等协议规定只有一帧完全发送成功后才能发送新的帧，因而只用一比特来编号就够了。</li></ul><ul><li>检错：<ul><li>需要给数据帧加上冗余的位。</li><li>当帧到达接收方站点时，它被检测，如果它被损坏了，它会被无声地丢弃。</li><li>此协议中差错检测由接收方的静音来证明。</li><li>为帧编号，当接收方接收到一个无序的数据帧时，就意味着这些帧或者是丢失的或者是被复制的。</li></ul></li><li>重发：<ul><li><p>发送方保留已发送帧的副本，并启动一个定时器。</p></li><li><p>如果定时器到时且没有收到已发送帧的ACK,就要重发该帧，保留副本并重启定时器。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/image-20210621182102800.png" alt="image-20210621182102800" style="zoom:67%;"></li></ul></li></ul><h3 id="回退N帧自动重发请求GBN"><a href="#回退N帧自动重发请求GBN" class="headerlink" title="回退N帧自动重发请求GBN"></a>回退N帧自动重发请求GBN</h3><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li><code>类似于流水线技术</code></li><li>后退n协议中，发送方在发完一个数据帧后，不停下来等待应答帧，而是连续发送若干个数据帧，即使在连续发送过程中收到了接收方发来的应答帧，也可以继续发送。且发送方在每发送完一个数据帧时都要设置超时定时器。只要在所设置的超时时间内仍未收到确认帧，就要重发相应的数据帧。</li><li>如：当发送方发送了N个帧后，若发现该N帧的前一个帧在计时器超时后仍未返回其确认信息，则该帧被判为出错或丢失，此时发送方就不得不重新发送出错帧及其后的N帧。</li><li>从这里不难看出，后退n协议一方面因连续发送数据帧而提高了效率，但另一方面，在重传时又必须把原来已正确传送过的数据帧进行重传（仅因这些数据帧之前有一个数据帧出了错），这种做法又使传送效率降低。</li></ul><h4 id="GBN发送方和接受方之间的传输过程"><a href="#GBN发送方和接受方之间的传输过程" class="headerlink" title="GBN发送方和接受方之间的传输过程"></a>GBN发送方和接受方之间的传输过程</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/image-20210621182653645.png" alt="image-20210621182653645" style="zoom:67%;"><h4 id="GBN重点知识"><a href="#GBN重点知识" class="headerlink" title="GBN重点知识"></a>GBN重点知识</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200317000350171.png" alt="GBN重点知识" style="zoom:67%;"><h4 id="滑动窗口长度"><a href="#滑动窗口长度" class="headerlink" title="滑动窗口长度"></a>滑动窗口长度</h4><ul><li><p><strong>Go-Back-N ARQ，发送窗口小于2^m^ ； 接收窗口总是1。</strong></p></li><li><p>m为序列号字段长度</p></li><li><p>下图为正确舍弃以及窗口大小过大导致的错误接收</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/image-20210621183641085.png" alt="image-20210621183641085" style="zoom:67%;"></li></ul><p><code>停等ARQ是窗口大小为1的后退N帧ARQ(GBN)的特殊情况。</code></p><h3 id="选择性重复ARQ-SR"><a href="#选择性重复ARQ-SR" class="headerlink" title="选择性重复ARQ(SR)"></a>选择性重复ARQ(SR)</h3><ul><li>在后退n协议中，接收方若发现错误帧就不再接收后续的帧，即使是正确到达的帧，这显然是一种浪费。由此诞生了SR（SELECTICE REPEAT）</li><li>SR工作原理：当接收方发现某帧出错后，其后继续送来的正确的帧虽然不能立即递交给接收方的高层，但接收方仍可收下来，存放在一个缓冲区中，同时要求发送方重新传送出错的那一帧。一旦收到重新传来的帧后，就可以将已存于缓冲区中的其余帧一并按正确的顺序递交上一层。</li><li>显然，选择重发减少了浪费，但要求接收方有足够大的缓冲区空间。</li></ul><h4 id="1-SR的滑动窗口图"><a href="#1-SR的滑动窗口图" class="headerlink" title="1.SR的滑动窗口图"></a>1.SR的滑动窗口图</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200317134823157.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="2-SR发送方必须响应的三件事"><a href="#2-SR发送方必须响应的三件事" class="headerlink" title="2.SR发送方必须响应的三件事"></a>2.SR发送方必须响应的三件事</h4><h5 id="1️⃣-上层的调用"><a href="#1️⃣-上层的调用" class="headerlink" title="1️⃣ 上层的调用"></a>1️⃣ 上层的调用</h5><ul><li>从上层收到数据后，SR发送方检查下一个可用于该帧的序号，如果序号位于发送窗口内，则发送数据帧;否则就像GBN一样，要么将数据缓存，要么返回给上层之后再传输。</li></ul><h5 id="2️⃣-收到一个ACK确认帧"><a href="#2️⃣-收到一个ACK确认帧" class="headerlink" title="2️⃣ 收到一个ACK确认帧"></a>2️⃣ 收到一个ACK确认帧</h5><ul><li>如果收到ACK，加入该帧序号在窗口内，则SR发送方将那个被确认的帧标记为已接收。<code>如果该帧序号是窗口的下界(最左边第-一个窗口对应的序号)，则窗口向前移动到具有最小序号的未确认帧处。</code>如果窗口移动了并且有序号在窗口内的未发送帧，则发送这些帧。</li></ul><h5 id="3️⃣-超时处理"><a href="#3️⃣-超时处理" class="headerlink" title="3️⃣ 超时处理"></a>3️⃣ 超时处理</h5><ul><li>每个帧都有自己的定时器，一个超时事件发生后只重传一个帧。</li></ul><h4 id="3-SR接受方要做的事"><a href="#3-SR接受方要做的事" class="headerlink" title="3.SR接受方要做的事"></a>3.SR接受方要做的事</h4><ul><li>SR接收方将确认-一个正确接收的帧而不管其是否按序。失序的帧将被缓存，并返回给发送方一个该帧的确认帧[收谁确认谁]，直到所有帧(即序号更小的帧)皆被收到为止，这时才可以将一-批帧按序交付给 上层，然后向前移动滑动窗口。</li></ul><h4 id="4-SR发送方和接受方之间的传输过程"><a href="#4-SR发送方和接受方之间的传输过程" class="headerlink" title="4.SR发送方和接受方之间的传输过程"></a>4.SR发送方和接受方之间的传输过程</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200317141305197.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="5-SR滑动窗口的大小限制"><a href="#5-SR滑动窗口的大小限制" class="headerlink" title="5.SR滑动窗口的大小限制"></a>5.SR滑动窗口的大小限制</h4><ul><li>发送方和接收方长度最好等于，且W<del>max</del>=2^(n-1)^</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200317142346880.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="6-SR重点知识"><a href="#6-SR重点知识" class="headerlink" title="6.SR重点知识"></a>6.SR重点知识</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200317142511757.png" alt="在这里插入图片描述" style="zoom:67%;"><h2 id="四-高级数据链路控制（HDLC）"><a href="#四-高级数据链路控制（HDLC）" class="headerlink" title="四.高级数据链路控制（HDLC）"></a>四.高级数据链路控制（HDLC）</h2><h4 id="1-简介及特点"><a href="#1-简介及特点" class="headerlink" title="1.简介及特点"></a>1.简介及特点</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322162037977.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="2-两种配置"><a href="#2-两种配置" class="headerlink" title="2.两种配置"></a>2.两种配置</h4><ul><li>HDLC适用于链路的两种基本配置:<code>非平衡配置和平衡配置</code>。<br>1)<code>非平衡配置</code>的特点是由一个主站控制整个链路的工作。<br>2)<code>平衡配置</code>的特点是链路两端的两个站都是复合站，每个复合站都可以平等地发起数据传<br>输，而不需要得到对方复合站的允许。</li></ul><h4 id="3-三种站"><a href="#3-三种站" class="headerlink" title="3.三种站"></a>3.三种站</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322164043741.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="4-三种数据操作方式"><a href="#4-三种数据操作方式" class="headerlink" title="4.三种数据操作方式"></a>4.三种数据操作方式</h4><p>1)<code>正常响应方式</code>。这是一种非平衡结构操作方式，即主站向从站传输数据，从站响应传输，<br>但从站只有在收到主站的许可后，才可进行响应。<br>2)<code>异步平衡方式</code>。这是一种平衡结构操作方式。在这种方式中，每个<strong>复合站</strong>都可以进行对<br>另一站的数据传输。<br>3)<code>异步响应方式</code>。这是一种非平衡结构操作方式。在这种方式中，<strong>从站</strong>即使未受到主站的<br>允许，也可进行传输。</p><h4 id="5-HDLC的帧格式"><a href="#5-HDLC的帧格式" class="headerlink" title="5.HDLC的帧格式"></a>5.HDLC的帧格式</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322164334748.png" alt="在这里插入图片描述" style="zoom:67%;"><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322162814962.png" alt="在这里插入图片描述" style="zoom:67%;"><h2 id="五-PPP-协议"><a href="#五-PPP-协议" class="headerlink" title="五. PPP 协议"></a>五. PPP 协议</h2><h4 id="1-简介及特点-1"><a href="#1-简介及特点-1" class="headerlink" title="1.简介及特点"></a>1.简介及特点</h4><ul><li>点到点协议（Point to Point Protocol，PPP）是为在同等单元之间传输数据包这样的简单链路设计的链路层协议。 这种链路提供<code>全双工</code>操作，并按照顺序传递数据包。设计目的主要是用来通过拨号或专线方式建立点对点连接发送数据，使其成为各种主机、网桥和路由器之间简单连接的一种共通的解决方案。</li></ul><h4 id="2-三个组成部分"><a href="#2-三个组成部分" class="headerlink" title="2.三个组成部分"></a>2.三个组成部分</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322155207617.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="3-状态图"><a href="#3-状态图" class="headerlink" title="3.状态图"></a>3.状态图</h4><ul><li>当线路处于静止状态时，不存在物理层连接。</li><li>当线路检测到载波信号时，建立物理连接，线路变为建立状态。此时，LCP 开始选项商定，商定成功后就进入身份验证状态。</li><li>双发身份验证通过后，进入网络状态。这时，采用NCP配置网络层，配置成功后，进入打开状态，然后就可进行数据传输。</li><li>当数据传输完成后，线路转为终止状态。载波停止后则回到静止状态。</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322155937718.png" alt="在这里插入图片描述" style="zoom:67%;"><h4 id="4-PPP帧协议的帧格式"><a href="#4-PPP帧协议的帧格式" class="headerlink" title="4.PPP帧协议的帧格式"></a>4.PPP帧协议的帧格式</h4><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322160812207.png" alt="在这里插入图片描述" style="zoom:67%;"><h3 id="HDLC与PPP的异同"><a href="#HDLC与PPP的异同" class="headerlink" title="HDLC与PPP的异同"></a>HDLC与PPP的异同</h3><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/%E7%AC%AC11%E7%AB%A0_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E6%8E%A7%E5%88%B6/20200322162949363.png" alt="在这里插入图片描述" style="zoom:67%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 检错与纠错 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第-10-章-检错与纠错"><a href="#第-10-章-检错与纠错" class="headerlink" title="第 10 章 检错与纠错"></a>第 10 章 检错与纠错</h1><h2 id="一-差错的类型"><a href="#一-差错的类型" class="headerlink" title="一. 差错的类型"></a>一. 差错的类型</h2><ul><li>单个位差错<ul><li><p><strong>在单比特差错中，数据单位中仅有一比特发生变化。</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620212106022.png" alt="image-20210620212106022" style="zoom:67%;"></li></ul></li><li>突发性差错<ul><li><p><strong>一个突发差错意味着数据单元中两位或多位发生变化。</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620212124831.png" alt="image-20210620212124831" style="zoom:67%;"></li></ul></li></ul><h2 id="二-块编码的概念"><a href="#二-块编码的概念" class="headerlink" title="二.  块编码的概念"></a>二.  块编码的概念</h2><ul><li>概念：<ul><li><p>把报文划分成块，每个块有k位，称为<strong>数据字</strong>，并增加r个冗余位使其长度变为n = k + r，形成n位的块称为<strong>码字</strong>。</p></li><li><p>块编码处理是一对一，相同的数据字总是编码成相同的码字。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620212333025.png" alt="image-20210620212333025" style="zoom:67%;"></li></ul></li></ul><h2 id="三-纠错的概念与方法"><a href="#三-纠错的概念与方法" class="headerlink" title="三.  纠错的概念与方法"></a>三.  纠错的概念与方法</h2><p><strong>汉明距离、最小汉明距离</strong></p><h3 id="汉明距离"><a href="#汉明距离" class="headerlink" title="汉明距离"></a>汉明距离</h3><ul><li>概念：<ul><li><strong>两个（相同长度）字的汉明距离是对应位不同的数量。</strong></li><li><strong>最小汉明距离是一组字中所有可能对的最小汉明距离。</strong></li></ul></li><li>方法：<ul><li>以d （x, y）表示两个字之间的汉明距离。</li><li>对两个字进行异或操作并计算1的个数，就可以很容易地得出汉明距离。</li><li>汉明距离大于零。</li></ul></li></ul><h3 id="最小汉明距离"><a href="#最小汉明距离" class="headerlink" title="最小汉明距离"></a>最小汉明距离</h3><ul><li>概念：<ul><li>在一组字中，最小汉明距离是所有可能对中的最小汉明距离。</li><li><strong>为了保证==检测==出最多s个错误，块编码中最小汉明距离一定是d<del>min</del> = s + 1。</strong></li><li><strong>为了保证最多能==纠正==t个差错，块码中最小汉明距离是d<del>min</del> = 2t + 1。</strong></li></ul></li><li>方法：<ul><li>以d<sub>min</sub> 定义编码方案中的最小汉明距离。</li><li>导出所有字的汉明距离并选择最小值。</li></ul>e.g.  d<del>min</del>=3<img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620213559278.png" alt="image-20210620213559278" style="zoom:67%;"></li></ul><h2 id="四-线性块编码"><a href="#四-线性块编码" class="headerlink" title="四.  线性块编码"></a>四.  线性块编码</h2><p><strong>线性块编码的距离、简单奇偶校验编码、两维奇偶校验编码、汉明码</strong></p><h3 id="线性块编码"><a href="#线性块编码" class="headerlink" title="线性块编码"></a>线性块编码</h3><ul><li>非正式定义：<ul><li><strong>线性块编码是一种由任何两个有效码字的异或（XOR）产生的另一个有效码字。</strong></li></ul></li><li>线性块编码的最小距离<ul><li>具有最小1的个数的非0有效码字中1的个数。（非零码字的1的个数）</li></ul></li></ul><h3 id="简单奇偶校验编码"><a href="#简单奇偶校验编码" class="headerlink" title="简单奇偶校验编码"></a>简单奇偶校验编码</h3><ul><li>概念：<ul><li><strong>简单的奇偶校验码是n = k + 1，且 d<del>min</del> = 2的单比特检错码。</strong></li><li>n位码字，k位数据</li></ul></li><li><strong>简单奇偶校验编码能检测出奇数个差错。</strong></li></ul><h3 id="两维奇偶校验编码"><a href="#两维奇偶校验编码" class="headerlink" title="两维奇偶校验编码"></a>两维奇偶校验编码</h3><ul><li>概念：<ul><li>数据字以表格形式（行和列）组织。</li><li>对于每一行和每一列，计算出一个奇偶校验位，然后将整个表发送给接收方，接收方将分别得出每一行和每一列的校正子。</li></ul></li><li>两维奇偶校验能检测出表中任何位置发生的最多三个差错（箭头指向生成的非零校正子位置）。4位的差错无法检测到。</li></ul><h3 id="汉明编码"><a href="#汉明编码" class="headerlink" title="汉明编码"></a>汉明编码</h3><ul><li>概念：<ul><li><strong>汉明距离m与码字长n和数据字长k的关系为n = 2^m^-1,  k=n-m, 校验位个数r=m</strong></li><li>d<sub>min</sub> = 3</li><li>$n = 2^m - 1$</li><li>详见计组</li></ul></li></ul><h2 id="5-循环冗余编码-CRC"><a href="#5-循环冗余编码-CRC" class="headerlink" title="5.  循环冗余编码 CRC"></a>5.  循环冗余编码 CRC</h2><p><strong>计算、检错能力分析（检测单个位差错、两个独立的位差错、奇数个差错、突发性差错）</strong></p><h3 id="循环冗余校验的计算"><a href="#循环冗余校验的计算" class="headerlink" title="循环冗余校验的计算"></a>循环冗余校验的计算</h3><p>​    <img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/CRC.jpg" style="zoom:67%;"></p><h3 id="CRC-的检错能力分析"><a href="#CRC-的检错能力分析" class="headerlink" title="CRC 的检错能力分析"></a>CRC 的检错能力分析</h3><ul><li>单个位差错<ul><li><strong>如果生成多项式至少有两项并且x<sup>0</sup>的系数为1，那么所有单个位差错都可以被捕捉到。</strong></li></ul></li><li>两个独立的单个位差错<ul><li><strong>如果生成多项式不能整除$x^t+1$(t在0和n-1之间)，那么所有独立的双差错都能被检测到。</strong></li><li>若能整除$x^t+1$，则两个相隔t个位置的单个位差错不能检测到</li></ul></li><li>奇数个差错<ul><li><strong>包含因子x+1的生成多项式能检测到所有奇数个差错。</strong></li></ul></li><li>突发性差错<ul><li><strong>所有L&lt;=r的突发性差错都会被检测到。</strong></li><li><strong>所有L=r+1的突发性差错有$1-(1/2)^{r-1}$的概率会被检测到。</strong></li><li><strong>所有L&gt;r+1的突发性差错有$1-(1/2)^r$的概率会被检测到。</strong></li></ul></li><li>生成多项式检错能力总结：<ol><li>至少有两项</li><li>x0的系数应该是1</li><li>应该不能整除xt + 1（2 &lt; t &lt; n-1） </li><li>应该有因子 x + 1。</li></ol></li></ul><h2 id="六-校验和及其计算方法"><a href="#六-校验和及其计算方法" class="headerlink" title="六.  校验和及其计算方法"></a>六.  校验和及其计算方法</h2><ul><li><p>概念：</p><ul><li><p>假设要发送的目的数据是5个4位数。除了发送这些数，还发送它们的和。例如，如果数字组是 (7, 11, 12, 0, 6), 那么我们发送 (7, 11, 12, 0, 6, 36), 这里 36 是原来的数字的和。接收方将这5个数字求和并比较。如果相等，接收方认为没有差错；否则认为有差错。</p></li><li><p>可发送校验和的补码</p></li><li><p>约束和(wrapped sum)：多出的位数与和相加</p></li><li><p>校验和：求总和的补码。可用$2^n-1$减去这个数</p><p>p.s. 图左右下角都有错</p></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620220541371.png" alt="image-20210620220541371" style="zoom:67%;"></li><li><p><strong>计算方法：</strong></p><ul><li>发送方：<ol><li>报文被划分为16位字。</li><li>校验和字的值设为0。</li><li>所有字包括校验和使用反码运算相加。</li><li>对这个和求反变成校验和。</li><li>校验和随数据一起发送。</li></ol></li><li>接收方：<ol><li>报文（包括校验和）被划分成16位字。</li><li>用反码加法将所有字相加。</li><li>对该和求反生成新的校验和。</li><li>如果校验和的值是0,接收报文；否则就丢弃报文。</li></ol><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC3%E9%83%A8%E5%88%86_%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/%E7%AC%AC10%E7%AB%A0_%E6%A3%80%E9%94%99%E4%B8%8E%E7%BA%A0%E9%94%99/image-20210620221132200.png" alt="image-20210620221132200" style="zoom:67%;"></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC9%E7%AB%A0_%E4%BD%BF%E7%94%A8%E7%94%B5%E8%AF%9D%E7%BD%91%E5%92%8C%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E7%AC%AC9%E7%AB%A0_%E4%BD%BF%E7%94%A8%E7%94%B5%E8%AF%9D%E7%BD%91%E5%92%8C%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC9%E7%AB%A0_%E4%BD%BF%E7%94%A8%E7%94%B5%E8%AF%9D%E7%BD%91%E5%92%8C%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/%E7%AC%AC9%E7%AB%A0_%E4%BD%BF%E7%94%A8%E7%94%B5%E8%AF%9D%E7%BD%91%E5%92%8C%E6%9C%89%E7%BA%BF%E7%94%B5%E8%A7%86%E7%BD%91%E8%BF%9B%E8%A1%8C%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 使用电话网和有线电视网进行数据传输 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第9章-使用电话网和有线电视网进行数据传输"><a href="#第9章-使用电话网和有线电视网进行数据传输" class="headerlink" title="第9章 使用电话网和有线电视网进行数据传输"></a>第9章 使用电话网和有线电视网进行数据传输</h1><h2 id="一-信令的概念"><a href="#一-信令的概念" class="headerlink" title="一. 信令的概念"></a>一. 信令的概念</h2><ul><li>电路交换网在通信双方之间为了确定与终止路径必须有建立阶段与拆除阶段，采用信令。</li><li>带内信令:信令和通话是同一电路.</li><li>语音通道的带宽与信令通道的带宽是分离的</li><li><strong>数据传输和信令任务在现代电话网中是分开的：一个网络用来执行数据传输，另一个用来执行信令任务。</strong></li><li>信令任务：<ul><li>提供拨号音、振铃和忙音；</li><li>办公室电话号码转移；</li><li>维护和监控呼叫；</li><li>保留账单信息；</li><li>维护和监控电话网络设备；</li><li>提供其他功能，如呼叫方ID和语音信箱等。</li></ul></li></ul><h2 id="二-调制与解调的概念"><a href="#二-调制与解调的概念" class="headerlink" title="二.  调制与解调的概念"></a>二.  调制与解调的概念</h2><ul><li>调制器(modulator)从二进制数据生成带通模拟信号。</li><li>解调器(demodulator)将调制信号中恢复为二进制数据。</li></ul><h2 id="三-非对称数字用户线路（ADSL）的概念"><a href="#三-非对称数字用户线路（ADSL）的概念" class="headerlink" title="三. 非对称数字用户线路（ADSL）的概念"></a>三. 非对称数字用户线路（ADSL）的概念</h2><ul><li>非对称：ADSL的下行（从因特网到住户）速率（比特率）比上行（从住户到因特网）速率要高。</li><li><strong>ADSL是专门针对住宅用户而设计的非对称通信技术，它不适合于商业应用。</strong></li><li>使用现有本地回路。</li><li> <strong>现有的本地回路能够处理的带宽可以高达1.1 MHz。</strong></li><li><strong>是一种自适应技术，系统使用的数据速率依据本地回路的线路状况而定。</strong></li><li>ADSL的标准调制技术称为离散多音频技术。</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 传输介质 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第8章-交换-传输时延分析"><a href="#第8章-交换-传输时延分析" class="headerlink" title="第8章 交换(传输时延分析)"></a>第8章 交换(传输时延分析)</h1><p>交换网分类法：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/image-20210620165243858.png" alt="image-20210620165243858" style="zoom:67%;"><h2 id="一-电路交换的概念"><a href="#一-电路交换的概念" class="headerlink" title="一. 电路交换的概念"></a>一. 电路交换的概念</h2><ul><li>概念：<ul><li>由物理链路连接的一组交换机组成。</li><li>两个站点的连接是由一条或多条链路组成的专用路径来实现。每次连接仅使用每条链路上的一专用通道。</li><li>通常每条链路用FDM或TDM划分成n个通道。</li></ul></li><li><strong>电路交换是在物理层。</strong></li><li><strong>电路交换网络由物理链路连接的一组交换机组成，每条链路被分成了n个通道。</strong></li><li><strong>在电路交换中，建立阶段必须预留资源，以作为整个数据传输间的专用资源直到拆除阶段。</strong></li><li>通信开始前，站点必须对通信时间所用的资源给以预留。</li><li>两个站点之间数据传输不打包（物理层传输信号）。</li><li>数据传输期间没有寻址，交换机基于它们占有频带（FDM）或时隙（TDM）发送数据。在建立阶段，存在端到端的寻址。</li><li>传统电话网物理层的交换采用电路交换方法。<h3 id="三个阶段"><a href="#三个阶段" class="headerlink" title="三个阶段"></a>三个阶段</h3></li></ul><ol><li><p>连接建立阶段</p><ul><li>连接建立是交换机之间建立一些专用通道</li><li>端到端系统的寻址要求建立两个端系统之间的连接。</li></ul></li><li><p>数据传输阶段</p></li><li><p>拆除阶段</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/image-20210620165840149.png" alt="image-20210620165840149" style="zoom:67%;"></li></ol><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><ul><li><p> 虽然电路交换网的效率低，但是时延最小。</p></li><li><p> 总时延 = 建立连接时间 + 数据传输时间 + 拆除电路时间</p></li></ul>  <img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/image-20210620170206290.png" alt="image-20210620170206290" style="zoom:67%;"><h2 id="二-数据报交换的概念"><a href="#二-数据报交换的概念" class="headerlink" title="二.  数据报交换的概念"></a>二.  数据报交换的概念</h2><ul><li>概念：<ul><li>分组不存在资源预留。链路没有预留的带宽，以及对每个分组没有安排预定的处理时间。</li><li>资源按需分配，基于先来先服务的原则。</li><li>每个分组独立处理，与其他分组无关。</li></ul></li><li><strong>在分组交换网中，不存在资源预留，资源按需分配</strong></li><li><strong>数据报交换通常是在网络层。</strong></li><li>传统上称数据报网中的交换机为路由器</li><li>因特网在网络层用数据报方法对分组进行交换。</li></ul><h3 id="路由表"><a href="#路由表" class="headerlink" title="路由表"></a>路由表</h3><ul><li><strong>数据报网中的交换机使用基于目的地址的路由表。</strong></li><li><strong>数据报网分组的头部中的目的地址在分组传送期间保持不变。</strong></li></ul><h3 id="延迟-1"><a href="#延迟-1" class="headerlink" title="延迟"></a>延迟</h3><p>​    下图中    总延迟时间 = 3个传输时间 + 3个传播延迟 + 2个等待时间</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/image-20210620170723433.png" alt="image-20210620170723433" style="zoom:67%;"><h2 id="三-虚电路交换的概念"><a href="#三-虚电路交换的概念" class="headerlink" title="三. 虚电路交换的概念"></a>三. 虚电路交换的概念</h2><ul><li><strong>是结合电路交换网络与数据报网络的产物</strong></li><li>特征：<ul><li>在数据传输阶段，如同电路交换网络一样有<strong>建立阶段</strong>与<strong>拆除阶段</strong>。</li><li>同电路交换网络或数据报网络一样，按需在建立阶段期间分配资源：</li><li>同数据报网络一样，数据被划为分组，每一分组的头部含有地址</li><li>所有分组沿着连接期间建立的路径传送</li><li><strong>虚电路网络通常在数据链路层实现</strong></li></ul></li><li><strong>在虚电路交换中，属于相同源端与目的端的所有分组都按同一路径传送；但如果资源按需分配，分组到达目的端可能有不同延迟。</strong></li><li><strong>在交换广域网中，数据链路层通常采用虚电路技术实现。</strong></li></ul><h3 id="延迟-2"><a href="#延迟-2" class="headerlink" title="延迟"></a>延迟</h3><ul><li>在建立阶段分配资源，那么个别分组没有等待时间</li><li>总延迟时间 = 3t<del>传输</del> + 3t<del>传播</del> + t<del>建立</del>+t<del>拆除</del></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/%E7%AC%AC8%E7%AB%A0_%E4%BA%A4%E6%8D%A2(%E4%BC%A0%E8%BE%93%E6%97%B6%E5%BB%B6%E5%88%86%E6%9E%90)/image-20210620171226330.png" alt="image-20210620171226330" style="zoom:67%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 传输介质 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第7章-传输介质"><a href="#第7章-传输介质" class="headerlink" title="第7章 传输介质"></a>第7章 传输介质</h1><h2 id="一-导向介质"><a href="#一-导向介质" class="headerlink" title="一. 导向介质"></a>一. 导向介质</h2><p><strong>双绞线及其特点、同轴电缆和光纤的概念</strong></p><p>有向介质是指那些在设备之间提供通路的介质，包括双绞线、同轴电缆和光缆。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620160931787.png" alt="图 7.2  传输介质的分类" style="zoom:67%;"><h3 id="双绞线"><a href="#双绞线" class="headerlink" title="双绞线"></a>双绞线</h3><ul><li>由两根导线(通常是铜线)构成，其中的每一根导线都有自己的塑料绝缘层，两者绞在一起</li><li>分为非屏蔽双绞线(UTP )和屏蔽双绞线( STP)</li><li>对于模拟传输，要用放大器放大衰减信号；对于数字传输，要用中继器将失真的信号整形</li><li>特点：<ul><li><p>绞合可以使两条线路同等地受到外部影响，这意味着接收方不会通过计算两者之间的差值接收到有害信号。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620162147912.png" alt="image-20210620162147912" style="zoom:67%;"></li></ul></li></ul><h3 id="同轴电缆"><a href="#同轴电缆" class="headerlink" title="同轴电缆"></a>同轴电缆</h3><ul><li>概念：<ul><li><p>可以传输更高频率范围的信号</p></li><li><p>使用一根位于中央的实心或者多股绞合的核心金属丝导体（通常是铜的），导体封装在绝缘护套中，然后再把它封装在金属箔、金属网或者两者的组合成的外部导体中。</p></li><li><p>外部金属包装既可以屏蔽噪声，又可以作为第二导体，构成回路。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620162218490.png" alt="image-20210620162218490" style="zoom:67%;"></li></ul></li></ul><h3 id="光缆"><a href="#光缆" class="headerlink" title="光缆"></a>光缆</h3><ul><li><p>特点：</p><ol><li><p>传输损耗小</p></li><li><p>抗雷电和电磁干扰性能好</p></li><li><p>不易被窃听或截取数据</p></li><li><p>体积小，重量轻</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620162245690.png" alt="image-20210620162245690" style="zoom:67%;"></li></ol></li></ul><h2 id="二-无线传输介质"><a href="#二-无线传输介质" class="headerlink" title="二.  无线传输介质"></a>二.  无线传输介质</h2><p><strong>无线波谱、无线电波、微波和红外波</strong></p><h3 id="无线波谱"><a href="#无线波谱" class="headerlink" title="无线波谱"></a>无线波谱</h3><ul><li><p>无线波谱图：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620162346608.png" alt="image-20210620162346608" style="zoom:67%;"></li></ul><h3 id="无线电波"><a href="#无线电波" class="headerlink" title="无线电波"></a>无线电波</h3><ul><li><p>通常将频率范围在3~1GHz之间的电磁波称为无线电波。</p></li><li><p>大部分无线电波是全方向的。</p></li><li><p>可以传输很长的距离。</p></li><li><p>低、中频率的电波，可以穿透墙体。</p></li><li><p><strong>无线电波用于多播通信，如收音机、电视以及寻呼系统。</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/%E7%AC%AC7%E7%AB%A0_%E4%BC%A0%E8%BE%93%E4%BB%8B%E8%B4%A8/image-20210620162431480.png" alt="image-20210620162431480" style="zoom:67%;"></li></ul><h3 id="微波"><a href="#微波" class="headerlink" title="微波"></a>微波</h3><ul><li>频率范围在1~300GHz的电磁波称为微波。</li><li>微波是单向的。</li><li>微波传播属于视线传播。</li><li>甚高频微波不能穿透墙体。</li><li><strong>微波用于单播通信，如移动电话、卫星网络和无线局域网。</strong></li></ul><h3 id="红外波"><a href="#红外波" class="headerlink" title="红外波"></a>红外波</h3><ul><li>红外信号的频率范围为300GHz<del>400THz （波长为1 mm</del>770nm）。</li><li>用于短距离通信。</li><li>频率很髙，不能穿透墙体。</li><li>在建筑物外面不能使用红外波，因为太阳射线中包含可能干扰通信的红外波。</li><li><strong>红外信号可以在封闭区域用于短距离通信，使用视线传播。</strong></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 带宽利用 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第6章-带宽利用"><a href="#第6章-带宽利用" class="headerlink" title="第6章 带宽利用"></a>第6章 带宽利用</h1><p><strong>为达到特定目的，带宽利用是可用带宽的合理使用.</strong></p><p><strong>复用(multiplexing)可获得效率，</strong><br><strong>扩频(spreading)可以到保密与抗干扰</strong></p><h2 id="一-复用"><a href="#一-复用" class="headerlink" title="一.  复用"></a>一.  复用</h2><p><strong>FDM、同步 TDM、统计 TDM 和 WDM 的概念</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620151724326-1624173445542.png" alt="Figure 6.2  多路复用的分类" style="zoom:67%;"><h3 id="频分复用（FDM）"><a href="#频分复用（FDM）" class="headerlink" title="频分复用（FDM）"></a>频分复用（FDM）</h3><ul><li><p>概念：</p><ul><li><p>在链路带宽（以Hz为单位）大于要传输的信号的带宽之和时采用。</p></li><li><p>每个发送设备生成的信号用于调制不同的载波频率。调制后的信号再被合并为一个可以通过链路传输的复合信号。</p></li><li><p>载波频率之间的频率差必须能够容纳调制信号的带宽。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620151959190-1624173600330.png" alt="image-20210620151959190" style="zoom:67%;"></li></ul></li><li><p><strong>FDM是用来组合模拟信号的模拟多路复用技术。</strong></p></li><li><p>复用过程：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620151915145-1624173556225.png" alt="image-20210620151915145" style="zoom:67%;"></li><li><p>分离过程：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620151939848-1624173580909.png" alt="image-20210620151939848" style="zoom:67%;"></li></ul><h3 id="波分复用-WDM"><a href="#波分复用-WDM" class="headerlink" title="波分复用(WDM)"></a>波分复用(WDM)</h3><ul><li>概念：<ul><li><p>用于具有高数据速率传输能力的光缆。</p></li><li><p>除了复用和多路分离包括通过光纤通道传输的光信号以外，波分复用在概念上与FDM相同。</p></li><li><p>都是将不同频率的不同信号合并。但其差别是这些频率非常髙。</p></li><li><p>概念示意图：</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620152330166.png" alt="image-20210620152330166" style="zoom:67%;"></li></ul></li><li><strong>WDM是合并多个光信号的模拟多路复用技术。</strong></li></ul><h3 id="时分复用-TDM"><a href="#时分复用-TDM" class="headerlink" title="时分复用(TDM)"></a>时分复用(TDM)</h3><ul><li>概念：<ul><li><p>TDM是一个数字化的过程，它允许多个连接共享一条高带宽链路</p></li><li><p>TDM在时间上共享，每个连接占用链路的一个时间片段。</p></li><li><p>TDM将不同源端的数字数据合并到一个时间共享的链路上。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620152504054.png" style="zoom:67%;"></li><li><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620152504054.png" alt="image-20210620152504054" style="zoom:67%;"></li></ul></li></ul><h4 id="同步时分复用"><a href="#同步时分复用" class="headerlink" title="同步时分复用"></a>同步时分复用</h4><ul><li><p>概念：</p><ul><li><p>每个输入连接的数据流被划分为多个单元，其中每个输入占用一个输入时隙。</p></li><li><p>一个单元可以是一位，一个字符或一个数据块。</p></li><li><p>每个输入单元成为一个输出单元，占用一个输出时隙。</p></li><li><p>输入单元持续T秒，则每个时隙持续时间是T/n，而每个帧持续时间是T。</p></li><li><p><strong>在同步TDM中,  链路速率是数据速率的 n 倍，并且比单元持续时间短 n 倍 .</strong></p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620153105955.png" alt="image-20210620153105955" style="zoom:67%;"></li></ul></li></ul><h4 id="统计时分复用"><a href="#统计时分复用" class="headerlink" title="统计时分复用"></a>统计时分复用</h4><ul><li><p>概念：</p><ul><li>动态地分配时隙以提髙带宽的效率。仅当输入线有发送数据，时隙才有意义并在输出帧中给予一个时隙。</li><li>每个帧中时隙的个数小于输入线的条数。</li><li>复用器循环顺序地检测每条输入线，如果输入线有数据发送， 则对输入线分配一个时隙，否则跳过这条线检测下一条线。</li></ul></li><li><p>同步和统计TDM的差别：</p><ul><li>寻址：<ul><li><strong>在同步TDM中，输出时隙全部由数据占用；而在统计TDM中，输出时隙需要携带数据和目的地址。</strong></li><li>在同步TDM中不需要寻址，作为输入和输出的地址之间关系是同步的和指定的。</li><li>在统计TDM中，由于输入和输出之间不存在指定或预定的时隙，它们之间没有固定的关系，需要在每个时隙中包含接收方地址以表明将要传送的地方。</li></ul></li><li>时隙大小：<ul><li>在统计TDM中，通常一个数据块有许多字节而地址只有很少字节。</li></ul></li><li>同步位：<ul><li>统计TDM没有同步位，它是处于帧级，不需要同步。</li></ul></li><li>带宽：<ul><li><p>在统计TDM中，链路的容量通常小于每个通道容量之和。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620154652209.png" alt="TDM 时隙比较" style="zoom:67%;"></li></ul></li></ul></li></ul><h2 id="二-数字层次、T1-载波及其特性、E1-载波及其特性"><a href="#二-数字层次、T1-载波及其特性、E1-载波及其特性" class="headerlink" title="二. 数字层次、T1 载波及其特性、E1 载波及其特性"></a>二. 数字层次、T1 载波及其特性、E1 载波及其特性</h2><h3 id="数字信号服务"><a href="#数字信号服务" class="headerlink" title="数字信号服务"></a>数字信号服务</h3><ul><li>一种数字信号的层次结构实现TDM</li></ul><h3 id="T线路"><a href="#T线路" class="headerlink" title="T线路"></a>T线路</h3><ul><li><p>线路的容量与DS-1到DS-4的数据速率是精确匹配的</p></li><li><p>T线路是为数字数据、音频或者视频设计的数字线路，也可以用于模拟传输，前提是要对模拟信号采样，然后使用TDM</p><h4 id="T-1帧"><a href="#T-1帧" class="headerlink" title="T-1帧"></a>T-1帧</h4><ul><li>通常为193位，分为24个8位的时隙，每帧附加1位用于同步(24*8+1=193)</li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620154052929.png" alt="Figure 6.25  T-1 帧结构" style="zoom:67%;"></li></ul><h3 id="E线路"><a href="#E线路" class="headerlink" title="E线路"></a>E线路</h3><ul><li>欧洲使用的T线路版本为E线路</li></ul><h2 id="三-波分和码分的概念"><a href="#三-波分和码分的概念" class="headerlink" title="三. 波分和码分的概念"></a>三. 波分和码分的概念</h2><ul><li>波分多路复用就是光的频分多路复用。具体看波分复用WDM</li><li>码分复用(见12章)</li></ul><h2 id="四-扩频：FHSS-和-DSSS-的概念"><a href="#四-扩频：FHSS-和-DSSS-的概念" class="headerlink" title="四.  扩频：FHSS 和  DSSS 的概念"></a>四.  扩频：FHSS 和  DSSS 的概念</h2><h3 id="跳频扩频-FHSS"><a href="#跳频扩频-FHSS" class="headerlink" title="跳频扩频(FHSS)"></a>跳频扩频(FHSS)</h3><ul><li>概念：<ul><li><p>用源信号调制M个不同的载波频率。</p></li><li><p>频率表使用这个模式查找频率作为跳周期的频率</p></li><li><p>在某一时刻用信号调制1个载波频率，在下一时刻信号调制另一个频率。虽然调制是一次使用一个频率，但在最终用了M个频率。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620155340813.png" alt="image-20210620155340813" style="zoom:67%;"></li></ul></li></ul><h3 id="直接序列扩频-DSSS"><a href="#直接序列扩频-DSSS" class="headerlink" title="直接序列扩频(DSSS)"></a>直接序列扩频(DSSS)</h3><ul><li>概念：<ul><li><p>每个数据位用扩展编码的n位代替。</p></li><li><p>每一位被编码 为a个码片，此处码片的速率是数据比特率的a倍。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/%E7%AC%AC6%E7%AB%A0_%E5%B8%A6%E5%AE%BD%E5%88%A9%E7%94%A8/image-20210620155551081.png" alt="image-20210620155551081" style="zoom:67%;"></li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/"/>
    <url>/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<!-- * @Title: 模拟传输 * @Description:  * @Author: SoulCompiler/prinscarce * @Email: prinscarce@outlook.com * @Blog: prinscarce.github.io * @LastEditors: prinscarce   --><h1 id="第5章-模拟传输"><a href="#第5章-模拟传输" class="headerlink" title="第5章 模拟传输"></a>第5章 模拟传输</h1><h2 id="一-比特率和波特率"><a href="#一-比特率和波特率" class="headerlink" title="一. 比特率和波特率"></a>一. 比特率和波特率</h2><ul><li><strong>比特率和波特率的关系定义：</strong><br>  $$<br>S = N \times \frac{1}{r}<br>$$<ul><li>S是波特率（baud），N是数据速率（bps）, r是一个信号元素携带的数据元素个数。</li><li><strong>模拟传输中r值为r = log<sub>2</sub>L,这里L是信号元素类型，而不是电平个数。</strong>(类似于码元种类)</li></ul></li><li><strong>比特率是每秒发送的位数，波特率是每秒发送的信号元素数。在数字数据模拟传输中，波特率小于等于比特率。</strong></li></ul><h2 id="二-数字到模拟转换的概念"><a href="#二-数字到模拟转换的概念" class="headerlink" title="二. 数字到模拟转换的概念"></a>二. 数字到模拟转换的概念</h2><h3 id="1-ASK幅移键控"><a href="#1-ASK幅移键控" class="headerlink" title="1.ASK幅移键控"></a>1.ASK幅移键控</h3><p> <strong>ask的概念及 ASK 的带宽</strong></p><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><ul><li>ASK常用的信号元素只用两个电平。这称为二进制幅移键控或开关键控（OOK）。一个信号电平的振幅峰值是0,另一个和载波频率振幅一样。</li></ul><h4 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h4><ul><li><p><strong>计算公式：</strong><br>$$<br>B = (1 + d) \times S<br>$$</p></li><li><p>S是信号速率，B是带宽。d在0和1之间。</p></li><li><p>r=1</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/image-20210620142848447.png" alt="Figure 5.3  Binary amplitude shift keying 二进制幅移键控" style="zoom:67%;"></li></ul><h3 id="2-FSK-频移键控"><a href="#2-FSK-频移键控" class="headerlink" title="2.FSK 频移键控"></a>2.FSK 频移键控</h3><p><strong>FSK的概念及 BFSK 的带宽</strong></p><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li><p>选择了两个载波频率：f<sub>1</sub>和f<sub>2</sub>。如果数据元素是0,使用第一个载波，如果数据元素是1,则使用第二个载波。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/image-20210620141705997-1624169827200.png" alt="Figure 5.6  Binary frequency shift keying" style="zoom:67%;"></li><li><p>如图所示，一个带宽中点的频率是f<sub>1</sub>，而另一个带宽中点的频率是f<sub>2</sub>。f<sub>1</sub>和f<sub>2</sub>离这两个带的中点距离都是Δf,则两个频率之差是2Δf。</p></li><li><p>r=1</p></li></ul><h4 id="带宽-1"><a href="#带宽-1" class="headerlink" title="带宽"></a>带宽</h4><ul><li>计算公式：<br>$$<br>B = (1 + d) \times S + 2\Delta{f}<br>$$</li></ul><h3 id="3-PSK、BPSK、QPSK-和-QAM-的概念"><a href="#3-PSK、BPSK、QPSK-和-QAM-的概念" class="headerlink" title="3.PSK、BPSK、QPSK 和 QAM 的概念"></a>3.PSK、BPSK、QPSK 和 QAM 的概念</h3><h4 id="二进制PSK（BPSK）"><a href="#二进制PSK（BPSK）" class="headerlink" title="二进制PSK（BPSK）"></a>二进制PSK（BPSK）</h4><ul><li><strong>概念</strong>：<ul><li>只用两个信号元素，一个相位是0°,另一个相位是180°。</li><li>在ASK中，位检测的标准是信号振幅；在PSK中则是相位。</li><li>PSK比ASK更不易受噪声影响。PSK优于FSK是因为不需要两个载波信号。</li></ul></li><li><strong>带宽</strong>：<ul><li><p>和二进制ASK—样，但比BFSK少。</p></li><li><p>没有浪费带宽用来分离成两个载波信号。</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/image-20210620143313414-1624170794692.png" alt="image-20210620143313414" style="zoom:67%;"></li></ul></li></ul><h4 id="正交PSK（QPSK）"><a href="#正交PSK（QPSK）" class="headerlink" title="正交PSK（QPSK）"></a>正交PSK（QPSK）</h4><ul><li>概念：<ul><li><p>使用两个独立的BPSK调制；一个是同相的，另一个是正交的（异相）。</p></li><li><p>进入的2个位先经过串行到并行的转换，它发送一个位给一个调制器，发送下一个位给另一个调制器。</p></li><li><p>如果进入信号中的每个位的持续时间是T，发送相应BPSK信号的每个位持续时间就是2T。</p></li><li><p>r=2</p></li><li><p>如右图，上方为同相载波，下为正交载波</p><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/image-20210620143439848-1624170881215.png" alt="Figure 5.11  QPSK and its implementation" style="zoom:67%;"></li></ul></li></ul><h4 id="正交振幅调制-QAM"><a href="#正交振幅调制-QAM" class="headerlink" title="正交振幅调制(QAM)"></a>正交振幅调制(QAM)</h4><ul><li>概念：<ul><li>使用两个载波，一个同相而另一个正交，而且每个载波都用不同的振幅。</li><li><strong>正交振幅调制是ASK和PSK的结合。</strong></li></ul></li><li>带宽：<ul><li>QAM传输所需的最小带宽与ASK和PSK传输所需的最小带宽相同。</li></ul></li></ul><img src="/2021/07/16/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/%E7%AC%AC5%E7%AB%A0_%E6%A8%A1%E6%8B%9F%E4%BC%A0%E8%BE%93/20200306230830184.png" alt="调制" style="zoom:67%;">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 第2章 网络模型</title>
    <link href="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/"/>
    <url>/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="第-2-章-网络模型"><a href="#第-2-章-网络模型" class="headerlink" title="第 2 章 网络模型"></a>第 2 章 网络模型</h1><h2 id="一-层次结构、层间接口和封装的概念"><a href="#一-层次结构、层间接口和封装的概念" class="headerlink" title="一. 层次结构、层间接口和封装的概念"></a>一. 层次结构、层间接口和封装的概念</h2><h3 id="层次结构"><a href="#层次结构" class="headerlink" title="层次结构"></a>层次结构</h3><ul><li>7个层次可以为分属于3个子功能组。<ol><li>第一层、第二层和第三层（物理层、数据链路层和 网络层）是网络支持层，它们处理从一设备到另一个设备数据传输的物理方面问题.</li><li>第五层、第六层和第七层（会话层、 表示层和应用层）可认为是用户支持层，它们允许不相关的软件系统间的互操作。</li><li>第四层即 传输层，将这两个子功能组连接起来，并保证下层是以上层能够使用的形式传输的。</li></ol></li><li><strong>服务</strong>：每一层都使用其直接下层提供的功能</li></ul><h3 id="层间接口"><a href="#层间接口" class="headerlink" title="层间接口"></a>层间接口</h3><ul><li>每一层接口都定义了该层必须向上层提供信息和服务。</li><li>接口（访问服务点SAP）：上层使用下层服务的入口。</li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ul><li>第N-1层的分组中的数据部分是第N层的完整分组（数据、头部、也可能有尾部)称为封装。</li><li>第N-1层不知道被封装分组中，那些部分是数据，那些部分是头部或尾部。</li><li>对于第N-1层来说，来自第N层的分组是作为一个整体单元处理的。</li></ul><h2 id="二-OSI-参考模型的概念和各层基本功能"><a href="#二-OSI-参考模型的概念和各层基本功能" class="headerlink" title="二. OSI 参考模型的概念和各层基本功能"></a>二. OSI 参考模型的概念和各层基本功能</h2><h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><ul><li><p>OSI模型提供了一个用来进行网络系统设计的层次化框架。它由7个相互独立但又有互相关联的层次组成，每一层都定义了通过网络传递信息的一部分功能。</p></li><li><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_1.png" alt="图片9" style="zoom:67%;"></li><li><p>使用 OSI 模型传输过程</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_2.png" alt="图片2_2" style="zoom:67%;"></li></ul><h3 id="各层基本功能（自底向上）"><a href="#各层基本功能（自底向上）" class="headerlink" title="各层基本功能（自底向上）"></a>各层基本功能（自底向上）</h3><h4 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h4><ul><li>定义了接口与传输介质的机械和电气特性，也定义了物理设备和接口为了传输而必须执行的过程和功能。</li><li>主要任务是在物理媒体上实现比特流的透明传输。</li><li><strong>物理层负责位（bits）从一跳（节点）到另一跳（节点）的传递</strong></li></ul><h4 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h4><ul><li>将物理层——对数据不做任何改动的传输通道变成可靠的链路，这样可以将物理层的数据无差错地传递给上层。</li><li><strong>数据链路层负责帧(frame)从一跳（节点）到下一跳（节点）传递。</strong></li><li>具体任务：<ul><li><p>成帧（定义帧的开始和结束）</p></li><li><p>物理寻址</p></li><li><p>流量控制</p></li><li><p>差错控制</p></li><li><p>访问控制（控制对信道的访问）</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_4.png" alt="图片2_4" style="zoom:67%;"></li></ul></li></ul><h4 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h4><ul><li><p>如果两个系统在不同的网络（链路）上并通过网络（链路）之间的设备连接，通常就需要网络层以完成源端到目 的端的传递。</p></li><li><p>网络层负责将各个分组（packet）从源地址传递到目的地址，可能会通过多个网络（链路）</p></li><li><p><strong>网络层负责将各个分组从源地址传递到目的地址。</strong></p></li><li><p>具体任务：</p><ul><li><p>逻辑寻址</p></li><li><p>路由选择（最佳路径）</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_5.png" alt="图片2_5" style="zoom:67%;"></li></ul></li></ul><h4 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h4><ul><li><p>负责整个报文的<strong>进程到进程的传递</strong>，进程是主机上运行的应用程序。</p></li><li><p>尽管网络层监管各个分组的<strong>源端到目的端传递</strong>，但是它并不了解这些分组之间的相互关系。传输层确保整个报文无差错并按顺序地到达目的地，并在源到目的层次进行差错控制和流量控制。</p></li><li><p><strong>传输层负责一个报文（message）从一个进程到另一个进程的传递。</strong></p></li><li><p>具体任务：</p><ul><li><p>服务点寻址</p></li><li><p>分段和组装</p></li><li><p>连接控制</p></li><li><p>流量控制</p></li><li><p>差错控制</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_6.png" alt="图片2_6" style="zoom:67%;"></li></ul></li></ul><h4 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h4><ul><li>会话层是网络的对话控制器，它建立和维护以及同步通信系统间的交互操作。</li><li><strong>会话层负责对话控制和同步。</strong></li><li>具体任务：<ul><li><p>对话控制</p></li><li><p>同步</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_7.png" alt="图片2_7" style="zoom:67%;"></li></ul></li></ul><h4 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h4><ul><li>表示层是两个系统之间交换信息的语义和语法。</li><li><strong>表示层负责翻译、加密和压缩数据。</strong></li><li>具体任务：<ul><li><p>翻译</p></li><li><p>加密</p></li><li><p>压缩</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_8.png" alt="图片2_8" style="zoom:67%;"></li></ul></li></ul><h4 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h4><ul><li>应用层提供了用户接口 和服务支持。</li><li><strong>应用层负责向用户提供服务。</strong></li><li>具体服务：<ul><li><p>网络虚拟终端</p></li><li><p>文件传输、访问和管理</p></li><li><p>邮件服务</p></li><li><p>目录服务</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_9.png" alt="图片2_9" style="zoom:67%;"></li></ul></li></ul><p>小结：</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_10.png" alt="图片2_10" style="zoom:67%;"><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/各层功能小结.png" alt="小结" style="zoom:67%;"><h2 id="三-TCP-IP-协议簇和各层基本功能，与-OSI-做对比"><a href="#三-TCP-IP-协议簇和各层基本功能，与-OSI-做对比" class="headerlink" title="三. TCP/IP 协议簇和各层基本功能，与 OSI 做对比"></a>三. TCP/IP 协议簇和各层基本功能，与 OSI 做对比</h2><ul><li>TCP/IP协议族 由5层组成：物理层、数据链路层、网络层、传输层和应用层。</li><li>当TCP/IP与OSI模型比较时：<ul><li>前面4层提供物理标准、网络 接口、网际互联和传输功能，它相应于OSI模型前的4层。</li><li>OSI模型最上面的3层由TCP/IP一个 称为应用层（参看图2.16）的单一层来表示。</li></ul></li><li>在传输层，TCP/IP定义了3个协议：<ul><li>传输控制协议（TCP）</li><li>用户数据报协议（UDP）</li><li>流控制传输协议（SCTP）</li></ul></li><li>在网络层，由TCP/IP定义的主要协议有网际协议（IP）</li><li>支持网际协议的4个协议：<ul><li><p>地址解析协议（ARP）</p></li><li><p>逆地址解析协议（RARP）</p></li><li><p>因特网控制报文协议（ICMP）</p></li><li><p>因特网组报文协议（IGMP）</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/prinscarce\XDU\STDUY\大二下\计算机网络\picture\图片2_11.png" alt="图片2_11" style="zoom:67%;"></li></ul></li></ul><h2 id="四-物理地址、逻辑地址和端口地址"><a href="#四-物理地址、逻辑地址和端口地址" class="headerlink" title="四. 物理地址、逻辑地址和端口地址"></a>四. 物理地址、逻辑地址和端口地址</h2><h3 id="物理地址（MAC）"><a href="#物理地址（MAC）" class="headerlink" title="物理地址（MAC）"></a>物理地址（MAC）</h3><ul><li>物理地址，也称为链路地址，它是局域网或广域网定义的节点地址。它包含在数据链路层所用的帧中，是最低级的地址。</li><li>大多数局域网使用48位（6个字节）的物理地址，该地址被写作12个十六进制的数字，每个字节（2个十六进制数）用冒号分隔开。e.g.  07:01:02:01:2C:4B</li></ul><h3 id="逻辑地址（IP）"><a href="#逻辑地址（IP）" class="headerlink" title="逻辑地址（IP）"></a>逻辑地址（IP）</h3><ul><li><p>因特网的逻辑地址现在流行的是32位地址（IPv4），它唯一定义了连接到因特网的一台主机。因特网上没有两台主机具有相同的IP地址。</p></li><li><p><strong>跳到跳时物理地址将改变，但逻辑地址保持不变。</strong></p></li><li><p>字母：逻辑地址</p><p>数字：物理地址(下图)</p><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/图片2_12.png" alt="IP地址" style="zoom:67%;"></li></ul><h3 id="端口地址（port）"><a href="#端口地址（port）" class="headerlink" title="端口地址（port）"></a>端口地址（port）</h3><ul><li>为了使这些进程同时接收数据，需要有一种方法标记不同的进程。赋于进程的标识符称为端口地址。它的长度是16位。</li><li><strong>跳到跳时物理地址要改变，但端口地址保持不变。</strong></li><li>16位端口地址用单个数字表示。  e.g. 753</li></ul><img src="/2021/06/21/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/%E7%AC%AC2%E7%AB%A0_%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/image-20210619183717570-1624099042970.png" alt="端口图片" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 第4章 数字传输</title>
    <link href="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/"/>
    <url>/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/</url>
    
    <content type="html"><![CDATA[<h1 id="第4章-数字传输"><a href="#第4章-数字传输" class="headerlink" title="第4章 数字传输"></a>第4章 数字传输</h1><h2 id="一-线路编码"><a href="#一-线路编码" class="headerlink" title="一. 线路编码"></a>一. 线路编码</h2><p><strong>数据元素和信号元素的区别、数据速率和信号速率的区别、最小带宽、最大数据速率、直流分量、自同步</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619204638066.png" alt="线路编码和解码" style="zoom:67%;"><h3 id="数据元素和信号元素"><a href="#数据元素和信号元素" class="headerlink" title="数据元素和信号元素"></a>数据元素和信号元素</h3><ul><li>数据元素是表示一块信息的最小实体，即位。</li><li>信号元素是数字信号的最小单元。</li><li>区别：<ul><li>数据元素是我们需要发送的，而信号元素是我们能发送的。</li><li>数据元素是被承载，而信号元素是载体。</li><li>用比喻说明：每个数据元素是需要从一个地方运到另一个地方的人。运送人的车辆是信号元素。可以每个人驾驶一辆车，也可以多个人乘坐一辆车，还可以一个人驾驶一辆车和一辆拖车。</li></ul></li></ul><h3 id="数据速率和信号速率"><a href="#数据速率和信号速率" class="headerlink" title="数据速率和信号速率"></a>数据速率和信号速率</h3><ul><li><p>数据速率定义了1秒发送的数据元素(位)的数量，单位是每秒位(bps)。又称<strong>比特率</strong>。</p></li><li><p>信号速率是1秒发送的信号元素的数量，单位是波特(baud)。又称脉冲速率,调制速率或<strong>波特率</strong>。</p></li><li><p>数据通信中的一个目标是增加数据速率而降低信号速率。增加数据速率增加了传输速度，降低信号速率降低了带宽需求。</p></li><li><p>数据速率和信号速率之间的关系公式化：<br>  $$<br>S = c \times N\times \frac{1}{r}<br>$$</p><ul><li><p>S是信号元素数量(单位baud)， c是情形因子，通常c=1/2，N是数据速率(单位bps)，会根据每种情形改变，比率r为每个信号元素承载的数据元素的数量。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619204419744-1624106661744.png" alt="image-20210619204419744" style="zoom:67%;"></li></ul></li></ul><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul><li><strong>虽然数字信号的真实带宽是无限的，但有效带宽是有限的。</strong></li><li>是波特率而不是比特率决定了数字信号的带宽。如果我们使用运输作为类比，是 车辆数量影响了交通，而不是运输的人数。</li></ul><h4 id="最小带宽"><a href="#最小带宽" class="headerlink" title="最小带宽"></a>最小带宽</h4><p>$$<br>B_{min} = c \times N \times \frac{1}{r}<br>$$</p><ul><li>B带宽，N波特率，r比率</li><li>波特率和带宽是有关系的</li><li>平均信号速率S=c* N *1/r，带宽（频率范围）与信号速率（波特率）成正比。</li></ul><h4 id="最大数据速率"><a href="#最大数据速率" class="headerlink" title="最大数据速率"></a>最大数据速率</h4><p>$$<br>N_{max} = \frac{1}{c} \times B \times r=2\times B\times\log_2L<br>$$</p><ul><li>与奈氏公式一致</li><li>若给定通道带宽，则可以得到最大数据速率</li></ul><h3 id="直流分量-DC-Components"><a href="#直流分量-DC-Components" class="headerlink" title="直流分量 DC Components"></a>直流分量 DC Components</h3><ul><li>当数字信号中的电平保持一段时间的恒定时，频谱会产生很低的频率。这些接近于零的频率称为DC （直流）成分。</li></ul><h3 id="自同步"><a href="#自同步" class="headerlink" title="自同步"></a>自同步</h3><ul><li>接收方的位间隔与发送方的位间隔严格对应与匹配。</li><li>为了正确地解释从发送方接收到的信号，接收方的位间隔必须与发送方的位间隔严格对应。</li><li>如果信号中包含有提示接收方起始、中间和结束位置的脉冲的跳变就可以完成自同步。</li></ul><h2 id="二-线路编码方案"><a href="#二-线路编码方案" class="headerlink" title="二. 线路编码方案"></a>二. 线路编码方案</h2><p><strong>单极性编码（NRZ）、极性编码（NRZ-L 和 NRZ-I）、归零码（RZ）、 双相码（Manchester 和 Differential Manchester）、双极性编码（AMI 和伪三进制码）、多电平编码（mBnL，2B1Q、8B6T、MLT-3 了解）</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619211644704.png" alt="Line coding schemes" style="zoom:67%;"><h3 id="1-单极性编码"><a href="#1-单极性编码" class="headerlink" title="1.单极性编码"></a>1.单极性编码</h3><h4 id="不归零编码（NRZ）"><a href="#不归零编码（NRZ）" class="headerlink" title="不归零编码（NRZ）"></a>不归零编码（NRZ）</h4><ul><li><p>所有的信号电平都在时间轴的一边，或者时间轴的上面/时间轴的下面。</p></li><li><p>单级编码方案设计成不归零(non-return-to-zero, NRZ)方案，不归零是指在为中间信号不会回零， 在此方案中正电平定义成位1而零电平定义成位0。</p></li><li><p>缺点：这个方案成本很高,标准功率(每个单元线路阻抗发送1位所需的功率)是极性NRZ方案的两倍。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619210221616-1624107742791.png" alt="image-20210619210221616" style="zoom:67%;"></li></ul><h3 id="2-极性编码方案"><a href="#2-极性编码方案" class="headerlink" title="2.极性编码方案"></a>2.极性编码方案</h3><h4 id="NRZ-L-NRZ电平编码"><a href="#NRZ-L-NRZ电平编码" class="headerlink" title="NRZ-L(NRZ电平编码)"></a>NRZ-L(NRZ电平编码)</h4><ul><li>NRZ-L（NRZ电平编码，NRZ-Level）,<strong>信号电平决定了位值。</strong></li></ul><h4 id="NRZ-I-NRZ反向编码"><a href="#NRZ-I-NRZ反向编码" class="headerlink" title="NRZ-I(NRZ反向编码)"></a>NRZ-I(NRZ反向编码)</h4><ul><li><p>NRZ-I（NRZ反相编码，NRZ-Invert）, <strong>信号电平是否反相转或跳变决定了位值</strong>。如果没有跳变，位值是0,如果有跳变，位值是1。</p><p><strong>NRZ-L和NRZ-I都有N/2 Baud的平均信号速率。</strong>来自S=c *N *1/r,  c=1/2,r=1</p><p><strong>NRZ-L和NRZ-I都有DC成分问题。</strong></p></li></ul><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619210514987.png" alt="NRZ-L和NRZ-I" style="zoom:67%;"><h4 id="极性归零码-Polar-RZ"><a href="#极性归零码-Polar-RZ" class="headerlink" title="极性归零码(Polar RZ)"></a><strong>极性归零码(Polar RZ)</strong></h4><ul><li><p>在每个位中间信号变为0</p></li><li><p>使用三个值：正值、负值和零</p></li><li><p>缺点：占用的带宽大，三个电平的生成和辨别更加困难</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619211841370-1624108722647.png" alt="Polar RZ scheme" style="zoom:67%;"></li></ul><h4 id="曼彻斯特编码-Manchester"><a href="#曼彻斯特编码-Manchester" class="headerlink" title="曼彻斯特编码 (Manchester)"></a>曼彻斯特编码 <strong>(Manchester)</strong></h4><ul><li><strong>RZ的位中间跳变+ NRZ-L</strong></li><li>位的持续时间被二等分，在前半部分电平保持一个水平，后半部分变成另一个水平。</li><li>位中间的跳变提供了同步。</li><li><strong>0：高to低，1：低to高</strong></li></ul><h4 id="差分曼彻斯特-Differential-Manchester"><a href="#差分曼彻斯特-Differential-Manchester" class="headerlink" title="差分曼彻斯特 (Differential Manchester)"></a>差分曼彻斯特 (Differential Manchester)</h4><ul><li><p><strong>RZ + NRZ-I</strong></p></li><li><p>中间总有跳变，值在位起始位置</p></li><li><p><strong>下一个是1不跳变，下一个是0跳变</strong></p><p><strong>在曼彻斯特编码和差分曼彻斯特编码中，位中间的跳变用于同步，值要么在位中间，要么在位起始位置</strong></p><p><strong>曼彻斯特编码和差分曼彻斯特编码的最小带宽是NRZ的两倍</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619212212836-1624108934959.png" alt="Manchester and differential Manchester schemes" style="zoom:67%;"></li></ul><h3 id="3-双极性方案-bipolar"><a href="#3-双极性方案-bipolar" class="headerlink" title="3.双极性方案(bipolar)"></a>3.双极性方案(bipolar)</h3><ul><li><strong>一个数据元素的电平是0，另一个数据元素的电平在正值和负值间交替。</strong></li><li><strong>在双极性编码中，使用三种电平：正电平，负电平，零</strong></li></ul><h4 id="交替传号反转（AMI）"><a href="#交替传号反转（AMI）" class="headerlink" title="交替传号反转（AMI）"></a>交替传号反转（AMI）</h4><ul><li><strong>0: 0电平， 1：交替正负电平</strong></li></ul><h4 id="伪三元编码"><a href="#伪三元编码" class="headerlink" title="伪三元编码"></a>伪三元编码</h4><ul><li><strong>1编码成0电平，而位0编码成交替正负电平</strong><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619213555680.png" alt="Bipolar schemes: AMI and pseudoternary" style="zoom:67%;"></li></ul><h3 id="4-多电平方案-multilevel-了解"><a href="#4-多电平方案-multilevel-了解" class="headerlink" title="4.多电平方案(multilevel)了解"></a>4.多电平方案(multilevel)了解</h3><h4 id="mBnL"><a href="#mBnL" class="headerlink" title="mBnL"></a>mBnL</h4><ul><li><p><strong>m个数据元素模式编码成n个信号元素模式，2<sup>m</sup>&lt;=L<sup>n</sup></strong></p></li><li><p>L是信号的电平数，若L=2，用B替换；若L=3，则用T替换；若L=4，则用Q替换</p></li><li><p>2B1Q</p><ul><li><p>使用长度为2的2位数据模式编码成一个4电平信号元素。</p></li><li><p>m = 2、n = 1、L = 4</p></li><li><p>平均信号速率是<br>$$<br>S=N/4<br>$$</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619214240933.png" alt="2B1Q" style="zoom:67%;"></li></ul></li><li><p>8B6T</p><ul><li><p>8个二元、6个三元</p></li><li><p>平均信号速率是<br>$$<br>S_{ave} = \frac{1}{2} \times N \times \frac{6}{8}<br>$$</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619214646161-1624110407159.png" alt="8B6T" style="zoom:67%;"></li></ul></li></ul><h4 id="MLT-3"><a href="#MLT-3" class="headerlink" title="MLT-3"></a>MLT-3</h4><ul><li>使用三个电平（+V、0、-V）和三个跳变规则在电平间变动。</li><li>规则：<ul><li><p>如果下一个位是0,没有跳变。</p></li><li><p>如果下一个位是1而且当前电平不是0,下一个电平是0。</p></li><li><p>如果下一个位是1而且当前电平是0,下一个电平是最后一个非零电平的相反值。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619215011507.png" alt="MLT-3" style="zoom:67%;"></li></ul></li></ul><h2 id="三-块编码（了解）"><a href="#三-块编码（了解）" class="headerlink" title="三. 块编码（了解）"></a>三. 块编码（了解）</h2><p><strong>块编码通常称为mB/nB 编码技术，用 n-bit位组替换m-bit.</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619215503222-1624110904290.png" alt="block coding concept" style="zoom:67%;"><h3 id="4B-5B"><a href="#4B-5B" class="headerlink" title="4B/5B"></a>4B/5B</h3><ul><li>4个二元/5个二元（four binary/five binary, 4B/5B）编码方案设计出来和NRZ-I组合使用。</li><li>4B/5B编码方案解决了同步问题，克服了NRZ-I的缺陷，但是它增加了NRZ-I的信号速率，冗余位增加20%的波特</li></ul><h3 id="8B-10B"><a href="#8B-10B" class="headerlink" title="8B/10B"></a>8B/10B</h3><ul><li>8B/10B块编码实际上是5B/6B编 码和3B/4B编码的组合。</li><li>比起4B/5B,它提供了更强的差错检测能力。</li></ul><h2 id="四-扰码"><a href="#四-扰码" class="headerlink" title="四.  扰码"></a>四.  扰码</h2><p><strong>B8ZS 和 HDB3</strong></p><ul><li>两相编码使用于LAN中间站的专用链路，不适用于长距离通信</li><li>块编码和NRZ编码的组合有DC分量，也不适合于长距离通信</li><li>双极性AMI有窄带宽，且没有DC分量，当连续0的长序列会失去同步。</li></ul><h3 id="B8ZS"><a href="#B8ZS" class="headerlink" title="B8ZS"></a>B8ZS</h3><ul><li>8零置换的双极编码方案：<ul><li><p><strong>把8个连续零置换成000VB0VB</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619230320207-1624115001527.png" alt="Two cases of B8ZS scrambling technique" style="zoom:67%;"></li></ul></li></ul><h3 id="HDB3"><a href="#HDB3" class="headerlink" title="HDB3"></a>HDB3</h3><ul><li><p>高密度双极3零方案：</p><ol><li>如果最后一次置换后的非零脉冲数是奇数， 置换模式是000V,这样使得非零脉冲总数为偶数。</li><li>如果最后一次置换后的非零脉冲数是偶数， 置换模式是B00V,这样使得非零脉冲总数为偶数。</li></ol></li><li><p><strong>HDB3技术根据最后一次置换后非零脉冲数把四个连续零置换成000V或B00V。</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619231104052.png" alt="Different situations in HDB3 scrambling technique" style="zoom:67%;"></li></ul><h2 id="五-脉码调制-PCM"><a href="#五-脉码调制-PCM" class="headerlink" title="五.  脉码调制 PCM"></a>五.  脉码调制 PCM</h2><p><strong>采样、量化等级、量化误差</strong></p><ul><li>PCM编码器有三个过程：<ol><li>对模拟信号进行采样；</li><li>对采样后信号进行量化；</li><li>量化后的值编码成位流。</li></ol></li></ul><h3 id="采样"><a href="#采样" class="headerlink" title="采样"></a>采样</h3><ul><li><p>每隔T<sub>s</sub>秒对模拟信号进行采样，T<sub>s</sub>是样本间隔或周期。</p></li><li><p>采样间隔的倒数称为采样率或采样频率,定义成f<sub>s</sub></p></li><li><p>$$<br>f_s = \frac{1}{T_s}<br>$$</p></li><li><p>三种采样方法：</p><ul><li><p>理想采样：对来自模拟信号的脉冲进行采样。</p></li><li><p>自然采样：当采样发生时髙速开关开启很短的时间，样本序列保持了模拟信号的形状。</p></li><li><p>方顶采样：采样和保持技术，通过适用电路产生方顶样本。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619231656433-1624115817281.png" alt="Figure 4.22  Three different sampling methods for PCM" style="zoom:67%;"></li></ul></li><li><p>采样速率：</p><ul><li><p><strong>根据奈奎斯特定理，采样速率必须至少是信号所含最高频率的2倍。</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619231946521-1624115989507.png" alt="image-20210619231946521" style="zoom:67%;"></li></ul></li></ul><h3 id="量化"><a href="#量化" class="headerlink" title="量化"></a>量化</h3><ul><li><p>量化步骤：</p><ol><li><p>我们假定原始模拟信号有介于V<sub>min</sub>和V<sub>max</sub>的瞬时振幅。</p></li><li><p>我们把范围分成L个区间，每个区间髙度为 Delta。<br>$$<br>\Delta = \frac{V_{max} - V_{min}}{L}<br>$$</p></li><li><p>我们分配0到L-1的量化值给每个区间的中点。</p></li><li><p>样本振幅值近似为量化值。</p></li></ol></li><li><p>量化等级：</p><ul><li>L（等级数）的选择取决于模拟信号振幅范围以及我们需要准确恢复信号的程度。</li></ul></li><li><p>量化误差：</p><ul><li><p>量化误差改变了信号的信噪比，根据香农理论，这反过来减小了上限容量。</p></li><li><p>量化误差（quantization error）对信号SNR<sub>dB</sub>的影响取决于量化级别L或每个样本位数n<sub>b</sub>。如下所示：<br>$$<br>SNR_{dB} = 6.02n_b + 1.76<br>$$<br><strong>结论：增加级别数就会增加SNR.</strong></p></li></ul><p><strong>PCM带宽</strong><br>$$<br>B_{min} = n_{b} + B_{analog}<br>$$<br>数字信号的最小带宽是模拟信号带宽的n<sub>b</sub>倍</p></li></ul><h3 id="Delta调制"><a href="#Delta调制" class="headerlink" title="Delta调制"></a>Delta调制</h3><ul><li><p>PCM得到每个样本的信号振幅值，DM 从前一个样本中得到变化。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233055903.png" alt="image-20210619233055903" style="zoom:67%;"></li></ul><h2 id="六-传输模式"><a href="#六-传输模式" class="headerlink" title="六.  传输模式"></a>六.  传输模式</h2><p><strong>异步传输、同步传输、并行传输、串行传输的概念</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233144204.png" alt="image-20210619233144204" style="zoom:67%;"><h3 id="并行传输"><a href="#并行传输" class="headerlink" title="并行传输"></a>并行传输</h3><ul><li><p>每次使用n条线路传送n位</p></li><li><p>并行传输的优点是速度</p></li><li><p>缺点是成本高，需要n条线路</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233204250.png" style="zoom:67%;"></li><li><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233204250.png" alt="image-20210619233204250" style="zoom:67%;"></li></ul><h3 id="串行传输"><a href="#串行传输" class="headerlink" title="串行传输"></a>串行传输</h3><ul><li><p>位是一个一个依次传输的。</p></li><li><p>串行传输的成本大约只是并行传输的1/n。</p></li><li><p>两个通信设备之间只需要一条通道</p></li><li><p>串行传输可以使用三种方式之一：异步、同步和等时。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233228483.png" alt="image-20210619233228483" style="zoom:67%;"></li></ul><h3 id="异步传输"><a href="#异步传输" class="headerlink" title="异步传输"></a>异步传输</h3><ul><li><p>在传输中信号的时序并不重要，信息的接收和转换通过约定的模式进行。</p></li><li><p>约定模式基于将位流组成字节的方式建立，作为一个单位沿着链路传输</p></li><li><p>因为没有同步时钟，所以增加：</p><ul><li>起始位：在每一个字节的开始处增加一个位（通常是0）。通知接收方有一个新的组到达。</li><li>停止位：在字节的结束位置会增加一个或者多个位（通常是1）。为了让接收方知道字节已经结束。</li></ul></li><li><p><strong>在异步传输过程中，需要在每个字节开始时发送1个起始位，结束时发送1个或者多个停止位。在每个字节之间会有一个时间间隔</strong>。</p></li><li><p><strong>异步在这里是指在字节级上的异步，但是每位仍然要同步，它们的持续时间是相同的。</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233523961-1624116925700.png" alt="image-20210619233523961" style="zoom:67%;"></li></ul><h3 id="同步传输"><a href="#同步传输" class="headerlink" title="同步传输"></a>同步传输</h3><ul><li><p>数据以一种不间断的1和0位串进行传输，接收方将位流分割成重构信息所需的一个个字节。</p></li><li><p><strong>在同步传输模式中，依次发送位流而不含起始位、停止位和间隙。接收方负责将位进行分组。</strong></p></li><li><p>同步传输的优点是速度快</p></li><li><p>同步传输通常多用于传输大块二进制数据</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/%E7%AC%AC4%E7%AB%A0_%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93/image-20210619233611171-1624116975669.png" alt="image-20210619233611171" style="zoom:67%;"></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 第3章 数据与信号</title>
    <link href="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/"/>
    <url>/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="第-3-章-数据与信号"><a href="#第-3-章-数据与信号" class="headerlink" title="第 3 章 数据与信号"></a>第 3 章 数据与信号</h1><h2 id="一-数字信号"><a href="#一-数字信号" class="headerlink" title="一. 数字信号"></a>一. 数字信号</h2><p><strong>基带传输、低通通道、宽带传输的概念</strong></p><h3 id="基带传输"><a href="#基带传输" class="headerlink" title="基带传输"></a>基带传输</h3><ul><li><p>基带传输就是通过通道发送数字信号，该信号不转换成模拟信号</p></li><li><p><strong>数字信号是无穷大带宽的复合模拟信号。</strong></p></li><li><p>==基带传输是需要一个带宽下限频率为0的<strong>低通通道</strong>==，即带宽从0开始的通道</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619190711502.png" alt="基带传输" style="zoom:67%;"></li></ul><h3 id="低通通道"><a href="#低通通道" class="headerlink" title="低通通道"></a>低通通道</h3><h4 id="宽带宽的低通通道"><a href="#宽带宽的低通通道" class="headerlink" title="宽带宽的低通通道"></a>宽带宽的低通通道</h4><ul><li><p><strong>只有我们有无穷大或非常大带宽的低通通道，保持数字信号形状的数字信号基带传输才是可能的。</strong></p></li><li><p>使用专用介质的基带传输，f1很接近0，f2很接近无穷大，则可以更准确的传输非周期数字信号。（见下图）</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619190910173-1624100958331.png" alt="使用专用介质的基带传输" style="zoom:67%;"></li></ul><h4 id="有限带宽的低通通道"><a href="#有限带宽的低通通道" class="headerlink" title="有限带宽的低通通道"></a>有限带宽的低通通道</h4><ul><li><p>在有限带宽的低通通道中，我们把数字信号近似成模拟信号。</p></li><li><p>近似程度：</p><ul><li><p>大致近似（第一谐波频率N/2）：</p><p>所需带宽：<br>$$<br>带宽 = \frac{N}{2} - 0 = \frac{N}{2}<br>$$</p></li><li><p>更好近似：</p><ul><li>同样比特率情况下，叠加更多谐波，其合成后的模拟信号越近似于数字信号，则需要更宽的带宽，尽管比特率没有增加，但更容易识别信号。</li><li><strong>在基带传输中，所需的带宽与比特率成正比；如果我们需要更快地发送位，我们就需要更大的带宽。</strong></li></ul></li></ul></li></ul><h3 id="宽带传输"><a href="#宽带传输" class="headerlink" title="宽带传输"></a>宽带传输</h3><ul><li><p>宽带传输或调制就是把数字信号转换成模拟信号传输。调制允许我们使用带通通道,即<strong>带宽不从0开始的通道</strong>。</p></li><li><p>低通通道可以看做是较低频率从0开始的带通通道。</p></li><li><p><strong>如果可用通道是带通通道，我们不能直接发送数字信号到通道；我们需要在传输前把 数字信号转换成模拟信号。</strong></p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619191903137-1624101544816.png" alt="带通通道的带宽" style="zoom:67%;"></li></ul><h2 id="二-典型的传输减损"><a href="#二-典型的传输减损" class="headerlink" title="二. 典型的传输减损"></a>二. 典型的传输减损</h2><p><strong>衰减、失真、噪声和信噪比的概念</strong></p><h3 id="衰减"><a href="#衰减" class="headerlink" title="衰减"></a>衰减</h3><ul><li><p>当某种简单或者复合的信号通过某种介质传输时，它会失去一些能量用于克服介质的阻抗。</p></li><li><p>能量的损失（振幅降低）</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619192940362-1624102182134.png" alt="衰减" style="zoom:67%;"></li></ul><h3 id="分贝"><a href="#分贝" class="headerlink" title="分贝"></a>分贝</h3><ul><li><p>说明信号损失或增益的强度</p></li><li><p>分贝用于计算两种信号之间或者同一信号在两个不同位置之间的相对强度。</p></li><li><p>若信号被衰减了，则分贝为负值：若信号被放大了，则分贝为正值。</p></li><li><p><strong>分贝计算公式（功率）:</strong><br>  $$<br>  dB = 10 \times \log_{10}\frac{P_2}{P_1}<br>  $$</p></li><li><p>P<sub>1</sub>和P<sub>2</sub>分别是信号在位置1和位置2的功率。</p></li><li><p><strong>分贝计算公式（电压）</strong>：<br>  $$<br>  dB = 20 \times \log_{10}\frac{V_2}{V_1}<br>  $$</p></li></ul><h3 id="失真"><a href="#失真" class="headerlink" title="失真"></a>失真</h3><ul><li><p>失真（distortion）意味着信号改变了形态或形状，产生在由不同频率成分组成的复合信号当中。</p></li><li><p>如果延迟与周期时间不完全一致，那么延迟的差异就会产生相位的差异。</p></li><li><p>接收方的信号成分与发送方的信号成分存在相位差异，复合信号的形状会不一样。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619194434027-1624103075278.png" alt="失真" style="zoom:67%;"></li></ul><h3 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h3><ul><li>有几种类型的噪声，如热噪声、感应噪声、串扰和脉冲噪声，都会损害信号。<ul><li><p>热噪声是电缆中的电子随机移动而产生的额外信号，而不是信号发送装置发送的。</p></li><li><p>感应噪声的来源是发动机和设备。</p></li><li><p>串扰是电缆之间的互相影响。</p></li><li><p>脉冲噪声是一种尖峰信号(在非常短时间内有很高能量的一种信号)，来自输电 线、闪电等。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619194519410.png" alt="噪声" style="zoom:67%;"></li></ul></li></ul><h3 id="信噪比（SNR）"><a href="#信噪比（SNR）" class="headerlink" title="信噪比（SNR）"></a>信噪比（SNR）</h3><ul><li><p>公式定义：<br>  $$<br>  SNR = \frac{平均信号功率}{平均噪声功率}<br>  $$</p></li><li><p>SNR实际上是我们需要的（信号）和我们不需要的（噪声）之间的比率。较髙的SNR意味着信号较少地被噪裒破坏，较低的SNR意味着信号被噪声更多地破坏。</p></li><li><p><strong>SNR一般用分贝单位描述，SNR<sub>dB</sub>的定义：</strong><br>  $$<br>  SNR_{dB} = 10 \times \log_{10}SNR<br>  $$</p></li></ul><h2 id="三-数据速率限制"><a href="#三-数据速率限制" class="headerlink" title="三. 数据速率限制"></a>三. 数据速率限制</h2><p><strong>奈奎斯特速率、香农容量定理，二者结合使用给出传输时需要的信号电平数，注意信噪比 dB 的转换</strong></p><h3 id="无噪声通道：奈奎斯特比特率"><a href="#无噪声通道：奈奎斯特比特率" class="headerlink" title="无噪声通道：奈奎斯特比特率"></a>无噪声通道：奈奎斯特比特率</h3><ul><li><p><strong>奈氏准则：理想低通信道下的极限数据传输率，带宽受限无噪声</strong></p></li><li><p>公式定义：<br>  $$<br>理想低通信道下的极限数据传输率 =2 \times带宽\times \log_2L<br>$$</p><ul><li>带宽是指通道的带宽（单位Hz），L是用于表示数据的信号电平的数量/几种码元，比特率单位为bps</li></ul></li><li><p><strong>增加信号电平数会减弱系统的可靠性。</strong></p></li><li><p>计算需给出所需的电平数</p></li></ul><h3 id="噪声通道：香农容量定理"><a href="#噪声通道：香农容量定理" class="headerlink" title="噪声通道：香农容量定理"></a>噪声通道：香农容量定理</h3><ul><li><p><strong>香农定理：信道的极限数据传输速率，带宽受限有噪声</strong></p></li><li><p>公式定义：<br>$$<br>通道容量 C = 带宽\times\log_2(1+SNR)<br>$$<br>理论通道容量可以简化为：<br>$$<br>C=B\times \frac{SNR_{dB}}{3}<br>$$</p><ul><li>公式中，带宽是指通道的带宽（单位Hz），SNR是信噪比，通道容量是指通道的传输容量，即每秒的比特数（单位bps）。</li></ul></li><li><p>香农容量定理用于计算噪声通道理论上的最髙数据速率。</p></li></ul><h3 id="实际应用：两种都要使用"><a href="#实际应用：两种都要使用" class="headerlink" title="实际应用：两种都要使用"></a>实际应用：两种都要使用</h3><ul><li><p><strong>香农容量定理给出数据速率的上限，奈奎斯特公式给出所需的信号电平数。</strong></p></li><li><p>实际运用中，通常是先用香农算出通道容量（比特率）上限，再用奈奎斯特计算出小于且最接近通道容量上限的电平数，以此获得最佳性能。</p></li><li><p>奈氏准则和香农公式在数据通信系统中的作用范围 (见下图)</p><p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619195943460-1624103985594.png" alt="image-20210619195943460"></p></li></ul><h2 id="四-性能"><a href="#四-性能" class="headerlink" title="四. 性能"></a>四. 性能</h2><p><strong>带宽、吞吐量、延迟、传播时间、传输时间、排队时间、带宽与延迟的乘积的概念</strong></p><h3 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h3><ul><li>以赫兹衡量的带宽<ul><li><strong>以赫兹衡量的带宽是复合信号包含的频率范围或者通道能通过的频率范围。</strong></li></ul></li><li>以每秒比特数衡量的带宽<ul><li><strong>指通道、链路或者甚至网络每秒能发送的位数。</strong></li></ul></li><li>两者关系<ul><li>C(bps)和B(Hz)成正比</li><li>它们之间的关系取决于是否有基带传输或者调制传输。详情见第4章和第5章。</li></ul></li></ul><h3 id="吞吐量"><a href="#吞吐量" class="headerlink" title="吞吐量"></a>吞吐量</h3><ul><li>用于衡量通过网络发送数据的快慢</li><li><strong>带宽是链路的潜在衡量值，而吞吐量是发送速度快慢的实际衡量值。</strong></li><li>例如：我们可以有一条带宽为1Mbps的链路，但是连接到链路末端的设备只能处理200kbps。这意味着我们不能通过这条链路发送数据高于200kbps。</li></ul><h3 id="延迟"><a href="#延迟" class="headerlink" title="延迟"></a>延迟</h3><ul><li><p><strong>延迟：报文第一个bit从源开始发送到整个报文完全到达目的站点所经历的时间。</strong></p></li><li><p>延迟的四个组成部分：<br>  $$<br>  延迟=传播时间+传输时间+排队时间+处理延迟<br>  $$</p></li></ul><h3 id="传播时间"><a href="#传播时间" class="headerlink" title="传播时间"></a>传播时间</h3><ul><li><p>传播时间衡量一个位从源传输到目标所需的时间。（发送器产生的时延+在来链路上产生的时延）</p></li><li><p>计算公式：<br>  $$<br>  传播时间=距离/传播速度<br>  $$</p></li></ul><h3 id="传输时间"><a href="#传输时间" class="headerlink" title="传输时间"></a>传输时间</h3><ul><li><p>第一个位较早离开到达也较早，最后一个位较晚离开也较晚到达。可以理解为把一个报文从主机端推到链路上所需要的时间。（一个报文中，从第一个比特出门到最后一个比特出门之间的时间）</p></li><li><p>传输一个报文的长度(bit)和通道的带宽</p></li><li><p>报文较短而带宽较高，主导素是传播时间而不是传输时间，此时传输时间可以忽略不计。</p></li><li><p>报文较长而带宽不是很高，主导因素是传输时间而不是传播时间，此时传播时间可以忽略不计。</p></li><li><p>计算公式：<br>  $$<br>  传输时间=报文长度/带宽<br>  $$</p></li></ul><h3 id="排队时间"><a href="#排队时间" class="headerlink" title="排队时间"></a>排队时间</h3><ul><li>每个中间或端设备在处理报文前保持报文所需的时间。</li><li>排队时间不是固定因素，它会根据网络负载改变。</li></ul><h3 id="带宽与延迟的乘积"><a href="#带宽与延迟的乘积" class="headerlink" title="带宽与延迟的乘积"></a>带宽与延迟的乘积</h3><ul><li><strong>带宽和延迟的乘积是能充满链路的位的个数。</strong></li></ul><p>e.g.</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/image-20210619201027867-1624104629352.png" alt="**在情形1中用位充满链路**" style="zoom:67%;"><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC2%E9%83%A8%E5%88%86_%E7%89%A9%E7%90%86%E5%B1%82%E5%92%8C%E4%BB%8B%E8%B4%A8/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/%E7%AC%AC3%E7%AB%A0_%E6%95%B0%E6%8D%AE%E4%B8%8E%E4%BF%A1%E5%8F%B7/带宽与延迟的乘积.png" alt="情形2" style="zoom:67%;">]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机网络 第1章 绪论</title>
    <link href="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/"/>
    <url>/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="第1章-绪论"><a href="#第1章-绪论" class="headerlink" title="第1章 绪论"></a>第1章 绪论</h1><h2 id="一-数据通信"><a href="#一-数据通信" class="headerlink" title="一.数据通信"></a>一.数据通信</h2><p><strong>概念及模型：五个组成部分</strong></p><ul><li>概念：<ul><li>数据通信是在两台设备之间通过诸如线缆的某种形式的传输介质进行的数据交换。</li></ul></li><li>模型（五个组成部分）：<ol><li><strong>报文</strong>。</li><li><strong>发送方</strong>。</li><li><strong>接收方</strong>。</li><li><strong>传输介质</strong>。</li><li><strong>协议</strong>。</li></ol></li></ul><h2 id="二-数据流"><a href="#二-数据流" class="headerlink" title="二. 数据流"></a>二. 数据流</h2><p><strong>单工，半双工，全双工</strong></p><ul><li>单工：<ul><li>通信是单方向的，两台设备只有一台能够发送，另一台则只能接收。</li></ul></li><li>半双工：<ul><li>每台主机均能发送和接收，但不能同时进行。</li></ul></li><li>全双工：<ul><li>双方主机都能同时发送和接收。<br><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E5%9B%BE%E7%89%871.png"></li></ul></li></ul><h2 id="三-连接类型和拓扑结构"><a href="#三-连接类型和拓扑结构" class="headerlink" title="三. 连接类型和拓扑结构"></a>三. 连接类型和拓扑结构</h2><p><strong>点到点和多点，网状、星型、总线、环型</strong></p><h3 id="连接类型"><a href="#连接类型" class="headerlink" title="连接类型"></a>连接类型</h3><ul><li>点到点：<ul><li>提供两台设备之间专用的链路。链路全部的能力均为两台设备之间的传输所共用。</li></ul></li><li>多点连接：<ul><li><p>两台以上设备共享单一链路的情形。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片2.png" alt="图片2" style="zoom: 67%;"></li></ul></li></ul><h3 id="物理拓扑结构"><a href="#物理拓扑结构" class="headerlink" title="物理拓扑结构"></a>物理拓扑结构</h3><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片5.png" alt="图片5" style="zoom:67%;"><ul><li><strong>网状</strong>：<ul><li><p>每台设备之间都有一条专用的点到点链路。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片3.png" alt="图片3" style="zoom:67%;"></li></ul></li><li><strong>星型</strong>：<ul><li><p>每台设备拥有一条仅与中央控制器连接的点到点专用链路，中央控制器通常称为集线器。</p></li><li><p>星型拓扑结构不允许设备之间有直接的通信量。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片4.png" alt="图片4" style="zoom:67%;"></li></ul></li><li><strong>总线</strong>：<ul><li><p>多点连接，由一条较长的线缆作为主干来连接网络上所有的设备。</p></li><li><p>安装简易，增加新设备比较困难。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片6.png" alt="图片6" style="zoom:67%;"></li></ul></li><li><strong>环状</strong>：<ul><li><p>每台设备只与其两侧的设备有一条专用的点到点的连接。</p></li><li><p>信号以一个方向在环中传输，从一台设备到达另一台设备，直到其到达目的设备。</p></li><li><p>环中的每台设备中安装有一个中继器。当设备接收到发给另一台设备的信号时，它的中继器会再生并转发这些位。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片7.png" alt="图片7" style="zoom:67%;"></li></ul></li></ul><h2 id="四-网络分类"><a href="#四-网络分类" class="headerlink" title="四. 网络分类"></a>四. 网络分类</h2><p><strong>局域网、城域网、广域网</strong></p><h3 id="局域网"><a href="#局域网" class="headerlink" title="局域网"></a>局域网</h3><ul><li><p>LAN的规模限制在几公里的范围内。</p></li><li><p>最常见的LAN拓扑结构是总线结构、环状结构和星型结构。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片8.png" alt="图片8" style="zoom:67%;"></li></ul><h3 id="广域网"><a href="#广域网" class="headerlink" title="广域网"></a>广域网</h3><ul><li><p>提供远距离的数据、音频、图像和视频信息传输，传输跨越的地理区域包括国家、大陆甚至整个世界。</p></li><li><p>含有一个路由器（网际互联设备），它连接另一个局域网或广域网。</p><img src="/2021/06/20/%E8%AE%A1%E7%BD%91%E6%9C%9F%E6%9C%AB%E5%A4%8D%E4%B9%A0_MarkdownNotes_1.0/%E7%AC%AC1%E9%83%A8%E5%88%86_%E6%A6%82%E8%BF%B0/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/%E7%AC%AC1%E7%AB%A0_%E7%BB%AA%E8%AE%BA/图片10.png" alt="image-20210619163456387" style="zoom:67%;"></li></ul><h3 id="城域网"><a href="#城域网" class="headerlink" title="城域网"></a>城域网</h3><ul><li>规模界于局域网与广域网之间，它通常的覆盖范围是一个乡镇或一个城市。</li><li>为需要高速地连接因特网的用户而设计的。</li></ul><h2 id="五-协议和标准"><a href="#五-协议和标准" class="headerlink" title="五. 协议和标准"></a>五. 协议和标准</h2><p><strong>协议的三要素语法、语义、时序</strong></p><h3 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h3><p>​    用来管理数据通信的一组规则，规定了通信的内容、通信的方式和通信的时间。</p><ul><li><strong>语法</strong><ul><li>指的是数据的结构或格式，即它们是以何种顺序表示的。</li></ul></li><li><strong>语义</strong><ul><li>指的是每一个位片断的含义：如何解释一个特别的位模式，基于该解释应该采取什么操作？</li></ul></li><li><strong>时序</strong><ul><li>指的是两个特性：报文发送的时间和发送的速率。</li></ul></li></ul><h3 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h3><ul><li>事实标准  TCP/IP<ul><li>那些未经组织团体承认但已经在广泛使用中被接受的标准。</li><li>事实标准通常是由制造商在打算定义新的产品或技术的功能时最初建立的。</li></ul></li><li>法定标准  OSI<ul><li>由官方认可的团体制定的标准。</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>计算机网络</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机网络</tag>
      
      <tag>笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/10/04/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/"/>
    <url>/2020/10/04/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/</url>
    
    <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>约瑟夫环 </p><h3 id="时间限制"><a href="#时间限制" class="headerlink" title="时间限制"></a>时间限制</h3><p>2 S </p><h3 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h3><p>10000 Kb </p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>习题集P79。编号为1,2,…,n的n个人按顺时针方向围坐一圈，每人持有一个密码（正整数）。现在给定一个随机数m&gt;0，从编号为1的人开始，按顺时针方向1开始顺序报数，报到m时停止。报m的人出圈，同时留下他的密码作为新的m值，从他在顺时针方向上的下一个人开始，重新从1开始报数，如此下去，直至所有的人全部出圈为止。 </p><h3 id="问题输入"><a href="#问题输入" class="headerlink" title="问题输入"></a>问题输入</h3><p>输入数据第一行为两个正整数n和m，分别表示人的个数及初始随机数，每组数据的第二行为n个整数，表示每个人持有的密码。 </p><h3 id="问题输出"><a href="#问题输出" class="headerlink" title="问题输出"></a>问题输出</h3><p>用一行输出n个整数表示依次出圈人的编号，整数之间用空格分隔 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>7 20</p><p>3 1 7 2 4 8 4</p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>6 1 4 7 2 3 5 </p><h3 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h3><p>使用不带头节点的循环链表 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 1.构造线性表 </span><br><span class="hljs-comment">// 2.录入密码</span><br><span class="hljs-comment">// 3.约瑟夫环</span><br><span class="hljs-comment">// 4.打印线性表 </span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> ElemType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>ElemType data;<br>ElemType sequence;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">next</span>;</span><br>&#125;LNode,*LinkList; <span class="hljs-comment">//创建单链表存储结构</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(LinkList &amp;L, <span class="hljs-keyword">int</span> n)</span></span>;   <span class="hljs-comment">//创建并输入数据 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Josephus</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>;<span class="hljs-comment">//约瑟夫环的实现+打印出圈人 </span><br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">int</span> n,m;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br><br>LinkList L;<br>CreateList(L, n);<br>Josephus(L, n, m);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreateList</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> n)</span></span>&#123; <br><br><span class="hljs-comment">//输入第一个密码 </span><br>LinkList head = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>head-&gt;sequence = <span class="hljs-number">1</span>;<br>head-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;head-&gt;data);<br>L = head;<br><br>LinkList p = head;<br><span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>; i&lt;=n; i++)&#123;<br>LinkList s = (LinkList)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(LNode));<br>s-&gt;sequence = i;<br>s-&gt;next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;s-&gt;data);<br><br>p-&gt;next = s;<br>p = s;<br>&#125;<br>p-&gt;next = L;<br><br>&#125;<span class="hljs-comment">//创建并输入数据 </span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Josephus</span><span class="hljs-params">(LinkList L,<span class="hljs-keyword">int</span> n,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">1</span>;<br>LinkList p = L, q = L;<br><br><span class="hljs-keyword">while</span>(p-&gt;next!=p)&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;m;i++)&#123;<br>q = p;<br>p = p-&gt;next;<br>&#125;<span class="hljs-comment">//i == m; </span><br>m = p-&gt;data;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,p-&gt;sequence);<span class="hljs-comment">//输出出圈人的编号</span><br><br>q-&gt;next = p-&gt;next;<br><span class="hljs-built_in">free</span>(p);<br>p = q-&gt;next; <span class="hljs-comment">//删除出圈人 </span><br>&#125; <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,p-&gt;sequence);<span class="hljs-comment">//输出最后一个出圈人的编号</span><br><span class="hljs-built_in">free</span>(p);<br><br>&#125;<span class="hljs-comment">//约瑟夫环的实现+打印出圈人 </span><br></code></pre></td></tr></table></figure><p><img src="/2020/10/04/%E7%BA%A6%E7%91%9F%E5%A4%AB%E7%8E%AF/Users\W\AppData\Roaming\Typora\typora-user-images\image-20201003223113139.png" alt="image-20201003223113139"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一元稀疏多项式计算器</title>
    <link href="/2020/10/04/%E4%B8%80%E5%85%83%E7%A8%80%E7%96%8F%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <url>/2020/10/04/%E4%B8%80%E5%85%83%E7%A8%80%E7%96%8F%E5%A4%9A%E9%A1%B9%E5%BC%8F%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    
    <content type="html"><![CDATA[<h3 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h3><p>一元稀疏多项式计算器</p><h3 id="时间限制"><a href="#时间限制" class="headerlink" title="时间限制"></a>时间限制</h3><p>2S </p><h3 id="内存限制"><a href="#内存限制" class="headerlink" title="内存限制"></a>内存限制</h3><p>10000 Kb </p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>见习题集P81 </p><h3 id="问题输入"><a href="#问题输入" class="headerlink" title="问题输入"></a>问题输入</h3><p>每组数据有3行构成，第1行为3个正整数n，m，t， n表示第一个多项式的项数，m表示第二个多项式的项数，t表示运算类型，0为加法，1为减法，每组数据的第2行包含2n个整数，每两个整数分别表示第一个多项式每一项的系数和指数；第3行包含2m个整数，每两个整数分别表示第二个多项式每一项的系数和指数。 </p><h3 id="问题输出"><a href="#问题输出" class="headerlink" title="问题输出"></a>问题输出</h3><p>在一行上以多项式形式输出结果，指数按从低到高的顺序 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例"></a>输入样例</h3><p>6 3 0</p><p>1 0 1 1 -3 2 1 3 1 4 1 5</p><p>-1 3 -2 4 1 5 </p><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例"></a>输出样例</h3><p>1+x-3x^2-x^4+2x^5</p><h4 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h4><p>1.初始化链表，创建多项式线性表 polynomial-&gt;coefficient, polynomial-&gt;index存储<br>2.switch case/if else完成加减法选择<br>3.比较系数大小，指数大小将<br>4.L1,L2插入到L3里 #注意加减法<br>5.打印一元稀疏多项式</p><h4 id="输出注意事项"><a href="#输出注意事项" class="headerlink" title="输出注意事项"></a>输出注意事项</h4><p>输出结果时，写一个flag和cnt分别记录是否输出与是否为第一次输出</p><p>1.指数为0，直接打印系数，cnt++</p><p>2.系数为0，continue</p><p>3.系数为1时，指数不同的输出</p><p>4.指数为1时，系数不同的输出</p><p>5.最普通的情况，系数为负直接输出，系数为正带‘+’输出</p><p>6.当多项式相加减的结果为0时，输出为0**#用例942**</p><p><img src="/images/QQ%E6%88%AA%E5%9B%BE20201004095005.png"></p><p>代码最后Print函数写的比较繁琐…有基本思路就行了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br><span class="hljs-keyword">int</span> coef;<br><span class="hljs-keyword">int</span> index;<br>&#125;Term;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">polynomial</span>&#123;</span><br>Term term;<br>polynomial* next;<br>&#125;polynomial,*LinkList;<span class="hljs-comment">//创建单链表存储结构</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>;    <span class="hljs-comment">//初始化链表</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Term a,Term b)</span></span>;            <span class="hljs-comment">//比较系数大小 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertNode</span><span class="hljs-params">(LinkList &amp;L,Term e)</span></span>;    <span class="hljs-comment">//L1,L2插入到L3里</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatePolyn</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> m)</span></span>;   <span class="hljs-comment">//创建m项系数的一元多项式</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddPolyn</span><span class="hljs-params">(LinkList &amp;L,LinkList L1,LinkList L2)</span></span>;   <span class="hljs-comment">//L1+L2 </span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SubtractPolyn</span><span class="hljs-params">(LinkList &amp;L,LinkList L1,LinkList L2)</span></span>; <span class="hljs-comment">//L1-L2</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintPolyn</span><span class="hljs-params">(LinkList L)</span></span>; <span class="hljs-comment">//Print List</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">int</span> n,m,t;<br>LinkList L1,L2;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>,&amp;n,&amp;m,&amp;t);<br><br>CreatePolyn(L1,n);<br>CreatePolyn(L2,m);<br><br>LinkList add,sub;<br><span class="hljs-keyword">if</span>(t==<span class="hljs-number">0</span>)&#123;<br>InitList(add);<br>AddPolyn(add,L1,L2);<br>PrintPolyn(add);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>InitList(sub);<br>SubtractPolyn(sub,L1,L2);<br>PrintPolyn(sub);<br>&#125;<br><br>&#125;<br><br><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InitList</span><span class="hljs-params">(LinkList &amp;L)</span></span>&#123;<br><br><span class="hljs-comment">//创建头结点 </span><br>L = (polynomial*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(polynomial));<br>L-&gt;term.coef = <span class="hljs-number">0</span>;<br>L-&gt;term.index = <span class="hljs-number">-1</span>;<br>L-&gt;next = <span class="hljs-literal">NULL</span>;<br><br>&#125;<span class="hljs-comment">//初始化链表</span><br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">cmp</span><span class="hljs-params">(Term a,Term b)</span></span>&#123;<br><br><span class="hljs-comment">//compare</span><br><span class="hljs-keyword">if</span>(a.index&gt;b.index)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.index==b.index)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><br>&#125;<span class="hljs-comment">//比较系数大小</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">InsertNode</span><span class="hljs-params">(LinkList &amp;L,Term e)</span></span>&#123;<br><br>polynomial* q = L;<br><span class="hljs-keyword">while</span>(q-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br><span class="hljs-keyword">if</span>(cmp(q-&gt;next-&gt;term,e)==<span class="hljs-number">1</span>)&#123;<span class="hljs-comment">//q的下一个指数&gt;要插入的指数 </span><br>q = q-&gt;next;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<span class="hljs-comment">//找到要插入的前一位 </span><br><br><span class="hljs-keyword">if</span>(q-&gt;next!=<span class="hljs-literal">NULL</span> &amp;&amp; cmp(q-&gt;next-&gt;term,e)==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//指数相同 </span><br>q-&gt;next-&gt;term.coef += e.coef;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>polynomial* node = (polynomial*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(polynomial));<br>node-&gt;term.coef = e.coef;<br>node-&gt;term.index = e.index;<br><span class="hljs-keyword">if</span>(q-&gt;next==<span class="hljs-literal">NULL</span>)&#123;<br>node-&gt;next = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//若为尾结点，node最后加为NULL </span><br>&#125;<span class="hljs-keyword">else</span>&#123;<br>node-&gt;next = q-&gt;next;<br>&#125; <br>q-&gt;next = node;<br>&#125;<br><br>&#125;<span class="hljs-comment">//L1,L2插入到L3里</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">CreatePolyn</span><span class="hljs-params">(LinkList &amp;L,<span class="hljs-keyword">int</span> m)</span></span>&#123;<br><br><span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;<br>Term e;<br>InitList(L);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;e.coef,&amp;e.index);<br>InsertNode(L,e);<br>&#125;<br><br>&#125;<span class="hljs-comment">//创建m项系数的一元多项式</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">AddPolyn</span><span class="hljs-params">(LinkList &amp;L,LinkList L1,LinkList L2)</span></span>&#123;<br><br>polynomial* q;<br><span class="hljs-keyword">for</span>(q=L1-&gt;next;q!=<span class="hljs-literal">NULL</span>;q=q-&gt;next)&#123;<br>InsertNode(L,q-&gt;term);<br>&#125;<span class="hljs-comment">//L += L1 </span><br><span class="hljs-keyword">for</span>(q=L2-&gt;next;q!=<span class="hljs-literal">NULL</span>;q=q-&gt;next)&#123;<br>InsertNode(L,q-&gt;term);<br>&#125;<span class="hljs-comment">//L +=L2</span><br> <br>&#125;<span class="hljs-comment">//L1+L2</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SubtractPolyn</span><span class="hljs-params">(LinkList &amp;L,LinkList L1,LinkList L2)</span></span>&#123;<br><br>polynomial* q;<br><span class="hljs-keyword">for</span>(q=L1-&gt;next;q!=<span class="hljs-literal">NULL</span>;q=q-&gt;next)&#123;<br>InsertNode(L,q-&gt;term);<br>&#125;<span class="hljs-comment">//L += L1</span><br><span class="hljs-keyword">for</span>(q=L2-&gt;next;q!=<span class="hljs-literal">NULL</span>;q=q-&gt;next)&#123;<br>q-&gt;term.coef = - (q-&gt;term.coef);<br>InsertNode(L,q-&gt;term);<br>&#125;<span class="hljs-comment">//L += -L2</span><br><br>&#125;<span class="hljs-comment">//L1-L2</span><br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PrintPolyn</span><span class="hljs-params">(LinkList L)</span></span>&#123;<br><br><span class="hljs-comment">//指数或系数为1时，省略1 </span><br>polynomial* q = L;<br><span class="hljs-keyword">int</span> flag;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(q-&gt;next!=<span class="hljs-literal">NULL</span>)&#123;<br>q = q-&gt;next;<br>flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(q-&gt;term.coef==<span class="hljs-number">0</span>)&#123;<span class="hljs-keyword">continue</span>;&#125;<span class="hljs-comment">//coef==0,pass</span><br><br><span class="hljs-keyword">if</span>(q-&gt;term.index==<span class="hljs-number">0</span>&amp;&amp;flag==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,q-&gt;term.coef);<br>cnt++;<br>flag = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//index==0,cnt++</span><br><br><span class="hljs-keyword">if</span>((q-&gt;term.coef==<span class="hljs-number">1</span>||q-&gt;term.coef==<span class="hljs-number">-1</span>)&amp;&amp;flag==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(q-&gt;term.index==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(q-&gt;term.coef==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x&quot;</span>);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+x&quot;</span>);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-x&quot;</span>);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-x&quot;</span>);<br>&#125;<br><br>&#125; <br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(q-&gt;term.coef==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;x^%d&quot;</span>,q-&gt;term.index);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+x^%d&quot;</span>,q-&gt;term.index);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-x^%d&quot;</span>,q-&gt;term.index);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-x^%d&quot;</span>,q-&gt;term.index);<br>&#125;<br>&#125;<br>&#125;<br>flag = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//coef==1/-1</span><br><br><span class="hljs-keyword">if</span>(q-&gt;term.index==<span class="hljs-number">1</span>&amp;&amp;flag==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(q-&gt;term.coef&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx&quot;</span>,q-&gt;term.coef);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+%dx&quot;</span>,q-&gt;term.coef);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx&quot;</span>,q-&gt;term.coef);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx&quot;</span>,q-&gt;term.coef);<br>&#125;<br>&#125;<br>flag = <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-comment">//index==1</span><br><br><span class="hljs-keyword">if</span>(flag==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>||q-&gt;term.coef&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>&amp;&amp;q-&gt;term.coef&lt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx^%d&quot;</span>,q-&gt;term.coef,q-&gt;term.index);<br>cnt++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%dx^%d&quot;</span>,q-&gt;term.coef,q-&gt;term.index);<br>&#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+%dx^%d&quot;</span>,q-&gt;term.coef,q-&gt;term.index);<br>&#125;<br>&#125;<span class="hljs-comment">//common</span><br>&#125;<br><br><span class="hljs-keyword">if</span>(cnt==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>&#125;<br><br>&#125;<span class="hljs-comment">//Print List</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数据结构XDOJ</category>
      
    </categories>
    
    
    <tags>
      
      <tag>XDOJ</tag>
      
      <tag>数据结构</tag>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/09/13/%E7%AC%83%E8%A1%8C%E4%BD%BF%E5%91%BD%EF%BC%8C%E5%90%91%E9%98%B3%E8%80%8C%E7%94%9F/"/>
    <url>/2020/09/13/%E7%AC%83%E8%A1%8C%E4%BD%BF%E5%91%BD%EF%BC%8C%E5%90%91%E9%98%B3%E8%80%8C%E7%94%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="新时代大学生应当怎样弘扬和践行爱国主义精神"><a href="#新时代大学生应当怎样弘扬和践行爱国主义精神" class="headerlink" title="新时代大学生应当怎样弘扬和践行爱国主义精神"></a>新时代大学生应当怎样弘扬和践行爱国主义精神</h4><ol><li>大变局中的中国与世界</li><li>正确认识中国经济发展</li><li>激扬新时代爱国主义的磅礴力量</li><li>确保如期打赢脱贫攻坚战</li></ol><p><strong>笃行使命，向阳而生</strong></p><p>2020年，我国即将实现全面小康，如今，已经进入了脱贫攻坚的最后的关键时期，全国上下都在咬紧牙关，丝毫不放松，进行最后攻坚战的冲刺。</p><p>自1971年中国恢复联合国席位，中国国际地位不断上升，1972年尼克松访华消融中美两国的冰雪，并于1979年正式与中国建交，20世纪末的苏联解体更是导致世界由两极格局变为一超多强。中国随着世界进程，不断进步，不断学习。现在的中国，已经是世界大国，已经是经济、国防、科技都不可小觑的超级大国，回想七十年间的峥嵘岁月，皆是前辈们打下的艰苦基石。</p><p>中国的不断崛起，我们中华民族的不断进步，大大提升了我们的民族自豪感，曾经作为青年的前辈们为了中国，挥洒汗水，拴紧裤腰带为中国打开一片天。如今作为新时代的大学生，我们也即将是未来各个工作岗位上的一员，有些可能也将是改变全球命运的研究人员。无论在哪，我们都是国家未来的新鲜血液，是要撑起未来十年乃至以后一片天的新时代大学生。“少年强则国强，少年进步则国进步。”我们是新时代青年，若要说，如何弘扬和践行爱国主义精神，那必是好好学习，不虚度光阴，用知识充实自己，用能力为自己打下一片天。只要我们始终坚定爱国主义精神，不违法犯法，积极向上对待生活，不收到左派等不良分子的影响，坚持为国家为社会做贡献，这就是我们作为新时代大学生，对爱国主义精神最好的弘扬与践行。</p><p>另一方面，我们作为大学生，在思想和知识上需引领一部分人，并且重视爱国主义教育及国防安全教育，也定当追随国家及党的脚步，并向周围的人宣传、普及国防教育，参与报告会、讲座等宣传教育，提高自己及国民的综合素质。</p><p>受新型冠状病毒影响，全球无论是经济还是国家其本身，都遭到了巨大的影响。1月下旬，或许还处于焦虑的状态，但到4月，我们已经完成了复工复产，部分学校开始上课，全国人民也对患病人数全面清零有着巨大信心。随着生活不断恢复正常，回看这黑暗却充满温馨的几个月，国家真是尽最大努力去挽救每一个中国国民，且全国人民团结一致抗击疫情。就同张迈曾先生所说“于奋战中矗中流砥柱，于组织中显精湛技能，于细微中见爱意纤毫，于凯旋中颂华歌豪情。”这是我们的胜利，也是我们早就知道结局的胜利。</p><p>这次抗击疫情，虽说我们作为学生，大多数人都不能作为抗疫一线的先锋军，但我们以我们自己的方式，保卫着这个国家。有能力的同学协助居委会等一家一户查看体温，不方便的同学便在家做好隔离，不随便外出给国家添麻烦。就算在家长达一月有余，我们仍听从国家号令，该稍稍放松时便放松些许，不宜出门时便好好呆在家里做好自己的本职工作。好好学习，把自己培养成为一个有用的人，为了将来给社会做出更多的贡献，不断丰富自我，完善能力。虽然现在可能还有些微不足道，但这就是我作为一个中国公民，作为新时代大学生，响应国家号召，所最应该做的，这就是我所尽力的爱国方式。</p><p>作为新时代的大学生，定当用自己所学所得，回报祖国，回报社会。做改革先锋，做有理想，有担当，有追求的新青年。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/08/19/%E8%BF%91%E4%BB%A3%E5%8F%B2%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98/"/>
    <url>/2020/08/19/%E8%BF%91%E4%BB%A3%E5%8F%B2%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h4 id="ONE-1-3"><a href="#ONE-1-3" class="headerlink" title="ONE  1-3"></a>ONE  1-3</h4><h5 id="1-资本帝国主义的侵略给中国带来了什么？"><a href="#1-资本帝国主义的侵略给中国带来了什么？" class="headerlink" title="1.资本帝国主义的侵略给中国带来了什么？"></a><strong>1.资本帝国主义的侵略给中国带来了什么？</strong></h5><p>政治：破坏了中国主权和领土完整，使中国沦为半殖民地半封建社会；推动了中国政治民主化的进程<br>经济：迫使中国自然经济的解体，推动资本主义在中国的发展，推动了中国工业化的进程；使中国沦为列强的原料产地和商品销售市场，成为经济附庸，被迫卷入资本主义世界市场<br>思想文化：推动中国思想文化科学化、理性化的进程。</p><h5 id="2-近代中国进行的反侵略战争具有什么意义"><a href="#2-近代中国进行的反侵略战争具有什么意义" class="headerlink" title="2.近代中国进行的反侵略战争具有什么意义"></a>2.近代中国进行的反侵略战争具有什么意义</h5><p>第一，近代中国人民进行的反侵略战争，沉重打击了帝国主义侵华的野心，粉碎了他们瓜分中国和把中国变成完全殖民地的图谋。<br>帝国主义列强一次次对中国发动侵略战争，绝不仅仅是为了通商，而是为了掠夺和扩大殖民地，为了他们自身的殖民扩张利益。每一次战争，都伴随着更大的贪梦目的和更多的利益要求。但每一次侵略都遇到了中国人民的反抗，使他们的狂妄野心无法得逞。正是中国人民的英勇斗争，表现了中国人民不屈不挠的爱国主义精神，也给外国侵略者以沉重打击和深刻教训，使他们越来越清楚地认识到，中国是一个很难征服的国家。他们虽然可以强迫清政府签订一个又一个不平等条约，但是始终无法把中国变成他们的完全的殖民地。尤其是甲午战争以后，在瓜分危机的严重关头，中国各阶层人民救亡图存的努力探索和奋起抗争，使侵略者看到了中国人民中所隐含的不甘屈服的伟大力量，不得不放弃了瓜分中国的政策。<br>第二，近代中国人民进行的反侵略战争，教育了中国人民，振奋了中华民族的民族精神，鼓舞了人民反帝反封建的斗志，大大提高了中国人民的民族觉醒意识。<br>帝国主义的侵略给中华民族带来了巨大灾难，但没有哪一次巨大的历史灾难不是以历史的进步作为补偿的。列强发动的侵华战争以及中国人民反侵略战争的失败，从反面教育了中国人民，极大地促进了中国人民的思考、探索和奋起直追。<br>鸦片战争以后，先进的中国人开始痛定思痛，注意了解国际形势，研究外国历史地理，总结失败教训，寻找救国的道路和御敌的方法，于是有了师夷长技以制夷思想的提出。<br>甲午战争以后，中华民族面临生死存亡之际，帝国主义的瓜分狂潮和民族危机的刺激，全民族开始有了普遍的民族意识的觉醒，救亡图存的思想日益高涨。<br>正是这种亡国灭种的危机感，增强了中华民族整体民族利益休戚与共的民族认同感和凝聚力，成为中华民族自立自强并永远立于世界民族之林的根本所在。</p><h5 id="3-近代中国反侵略战争失败的根本原因和教训是什么"><a href="#3-近代中国反侵略战争失败的根本原因和教训是什么" class="headerlink" title="3.近代中国反侵略战争失败的根本原因和教训是什么"></a>3.近代中国反侵略战争失败的根本原因和教训是什么</h5><p>第一，近代中国社会制度的腐败是反侵略战争失败的根本原因。<br>在1840年以后中国逐渐沦为半殖民地半封建社会的过程中，清王朝统治者从皇帝到权贵，大都昏庸愚昧，不了解世界大势，不懂得御敌之策。由于政治腐败、经济落后和文化保守，一方面使清朝统治阶级封闭自守，妄自尊大，骄奢淫逸，盲目进攻；另一方面又使统治者和清军指挥人员在战争面前完全没有应变的能力和心态，不适应于近代战争，不少将帅贪生怕死，临阵脱逃，有的甚至出卖国家和民族的利益。清政府尤其害怕人民群众，担心人民群众动员起来会危及自身统治，所以不敢发动和依靠人民群众的力量。清朝统治集团在对外战争中妥协退让求和投降的一系列做法，已经使他失去在中国存在的理由，不推翻他是不能取得反侵略战争胜利的。<br>第二，近代中国经济技术的落后是反侵略战争失败的另一个重要原因。<br>当时的英国已经历过工业革命，资本主义生产力获得突飞猛进的发展，而中国仍停留在封建的自然经济水平上。经济技术的落后直接造成军事装备的落后，军队指挥员不了解近代军事战术，从而造成军队素质和战斗力的低下。经济技术落后是反侵略战争失败的重要原因，但并不表明经济技术落后就一定在反侵略战争中失败。正是因为当时的中国政府不能很好地组织反侵略战争，不能发动和利用人民群众的力量，甚至压制人民群众，其失败是不可避免的。<br>（3）中国近代历次反侵略战争失败的教训：中国人民必须把反对帝国主义的民族斗争和反对封建主义的阶级斗争统一起来，才能完成近代中国革命的任务。</p><h4 id="TWO-4-6"><a href="#TWO-4-6" class="headerlink" title="TWO    4-6"></a>TWO    4-6</h4><h5 id="1-如何认识太平天国农民战争的意义和失败的原因、教训？"><a href="#1-如何认识太平天国农民战争的意义和失败的原因、教训？" class="headerlink" title="1.如何认识太平天国农民战争的意义和失败的原因、教训？"></a>1.如何认识太平天国农民战争的意义和失败的原因、教训？</h5><p>（1）太平天国农民战争的意义</p><p>第一，沉重打击了封建统治阶级，强烈震撼了清政府的统治根基，加速了清王朝的衰败过程。</p><p>第二，是旧式农民战争的最高峰，具有不同以往农民战争的新的历史特点。</p><p>第三，冲击了空子和儒家经典的正统权威，在一定程度上削弱了封建统治的精神支柱。</p><p>第四，有力的打击了外国侵略势力，给了侵略者应有的教训。</p><p>第五，在19世纪中叶的亚洲民族解放运动中，起到推动作用。</p><p>2、如何认识洋务运动的性质和失败的原因、教训？</p><p>（2）太平天国农民战争失败的原因</p><p>A、从主观上看：</p><p>第一，农民阶级不是新的是生产力和生产关系的代表。</p><p>第二，没有科学的思想理论，它不仅不能正确指导战争，而且给农民战争带来了危害。</p><p>第三，太平天国也没能正确对待儒学。</p><p>第四，不能把西方国家的侵略者与人民群众区别开来，对西方侵略者还缺乏理性的认识。</p><p>B、从客观上看：</p><p>中外反动势力勾结起来，联合镇压太平天国。</p><p>太平天国农民战争失败的教训：</p><p>太平天国起义及其失败表明，在半殖民地半封建的中国，农民具有伟大的革命潜力。但它自身不能担负起反帝反封建取得胜利的重任，单纯的农民战争不可能完成争取民族独立和人民解放的历史重任。</p><h5 id="2-如何认识洋务运动的性质，作用和失败的原因，教训"><a href="#2-如何认识洋务运动的性质，作用和失败的原因，教训" class="headerlink" title="2.如何认识洋务运动的性质，作用和失败的原因，教训"></a>2.如何认识洋务运动的性质，作用和失败的原因，教训</h5><p>1.洋务运动的性质<br>洋务运动是清朝封建统治阶级中的洋务派为了维护清朝的封建统治而实行的一场自救改革运动，即具有进步性，也具有落后保守性。<br>2.洋务运动的历史作用<br>第一，洋务运动的洋务派继承了魏源师夷长技以制夷的思想，提出“自强”“求富”的主张，通过所掌握的国家权力集中力量优先发展军事工业，同时发展若干民用企业，在客观上对中国的早期工业和民族资本主义的发展起了某些促进作用。<br>第二，开办了一批新式学堂，派出了最早的官派留学生，翻译了一批西学书籍，给当时的中国带来了新的知识，使人们打开了眼界。<br>第三，传统的“重本抑末”“重义轻利”等观念都受到冲击，社会风气和价值观念开始变化，工商业者地位上升。有利于资本主义经济的发展，也有利于社会风气的改变。<br>3.洋务运动的失败的原因<br>第一，洋务运动具有封建性。洋务运动的指导思想是“中学为体”“西学为用”，洋务派企图在不改变中国固有的制度与道德的前提下，以吸取西方近代生产技术为手段，来达到维护和巩固中国封建统治的目的，这就严重限制了洋务运动的发展。<br>第二，洋务运动对外国具有依赖性。西方列强依据种种特权，从政治经济等各方面加紧对中国的侵略控制，他们并不希望中国真正富强起来，而洋务派处处依赖外国，企图以此来达到自强求富的目的，无异与虎谋皮。<br>第三，洋务企业的管理具有腐朽性。洋务企业虽然具有一定的资本主义性质，但其管理确是封建式的，企业内部充斥着营私舞弊、贪污中饱、挥霍浪费等腐败现象。<br>4.洋务运动失败的教训<br>地主阶级不能担负起中国近代化的历史重任。<br>失败原因 ：<br>洋务运动在当时的中国，其失败命运是不可避免的。第一，在不触动腐朽的封建制度的前提下，洋务派试图利用西方资本主义的某些长处来维护封建专制统治，这种手段和基础的矛盾，使洋务运动注定是不可能成功的。同时，洋务运动处处受到顽固派的阻挠和破坏，从而加大了洋务运动开展的阻力。第二，洋务派本身的阶级局限性，决定了他们既是近代工业的创办者和经营者，也是其摧残者和破坏者，其封建衙门和官僚式的体制，必定导致洋务企业的失败。第三，洋务运动的目的之一是抵御外侮，但洋务派在主持外交活动中，坚持“外须和戎”，对外妥协投降，他们所创办的近代企业有抵御外侮和“稍分洋人之利”作用，但却不能改变中国半殖民地半封建社会地位。甲午战争，洋务派标榜的“求强”“求富”目标未能实现，洋务运动基本失败。<br>洋务派提倡「中学为体，西学为用」，希望利用先进的技术维护封建统治，改革不触动封建制度。<br>教训：在当时的社会背景下 仅学习西方先进技术是远远不够的 必须改革政治制度 摆脱半殖半封的社会性质<br>受阶级和时代的局限性 封建地主阶级不能领导中国走向富强</p><h5 id="3-如何认识戊戌维新运动的意义和失败的原因、教训"><a href="#3-如何认识戊戌维新运动的意义和失败的原因、教训" class="headerlink" title="3.如何认识戊戌维新运动的意义和失败的原因、教训"></a>3.如何认识戊戌维新运动的意义和失败的原因、教训</h5><p>①戊戌变法，是一次资产阶级改良运动，是资产阶级变革社会制度的初步尝试。维新派试图在政治上建立资产阶级君主立宪制。在经济上发展民族资本主义，符合历史发展趋势。②它是一次爱国救亡的政治运动。在民族危机加剧的时刻维新派希望通过变法使中国走向强大，从而摆脱帝国主义列强的侵略，表现出强烈的爱国热情，激发人民爱国思想和民族意识。③戊戌变法也是近代中国一次思想潮流的解放。资产阶级接维新派提倡新学，主张兴民权，对封建思想进行了猛烈的抨击，在这会上起了思想启蒙作用，促进了中国人民的觉醒。<br>失败原因和教训<br>资产阶级维新派采取改良的方法，。把希望寄托在没有实权的皇帝身上。在顽固势力的进攻面前。他们又寄希望于袁世凯和外国侵略者。脱离了广大人民群众。因此很快失败<br>教训<br>资产阶级改良道路在半殖民地半封建身会的中国行不通</p><h4 id="THREE-7-9"><a href="#THREE-7-9" class="headerlink" title="THREE  7-9"></a>THREE  7-9</h4><h5 id="1-革命派在与改良派论战中是如何论述革命的必要性、正义性、进步性的？"><a href="#1-革命派在与改良派论战中是如何论述革命的必要性、正义性、进步性的？" class="headerlink" title="1.革命派在与改良派论战中是如何论述革命的必要性、正义性、进步性的？"></a>1.革命派在与改良派论战中是如何论述革命的必要性、正义性、进步性的？</h5><p>必要性：资产阶级革命派指出，清政府是帝国主义的“鹰犬”，因此爱国必须革命，只有通过革命，才能免“瓜分之祸”，获得民族独立和社会进步。人们在革命过程中所付出的努力乃至作出的牺牲，是以换取历史的进步作为补偿的。<br>正义性:对于改良派所提出的“中国国民恶劣”说，革命派针锋相对地指出，不是“国民恶劣”，而是“政府恶劣”，民主共和是大势所趋，人心所向，拯救中国与建设中国都必须取法乎上，直接推行民主制度。只有“兴民权改民主”才是中国的唯一出路。<br>进步性：革命派强调，当时的中国存在着严重的“地主强权”和“地权失平”的现象，只有通过通过平均地权一实现土地国有，在进行政治革命的同时实现社会革命，才能避免贫富不均等一系列问题的出现。</p><h5 id="2-为什么说孙中山领导的辛亥革命引起了近代中国的历史性变化"><a href="#2-为什么说孙中山领导的辛亥革命引起了近代中国的历史性变化" class="headerlink" title="2.为什么说孙中山领导的辛亥革命引起了近代中国的历史性变化"></a>2.为什么说孙中山领导的辛亥革命引起了近代中国的历史性变化</h5><p>1、辛亥革命推翻封建势力和清朝统治，沉重打击帝国主义的侵略势力，为中国人民斗争的发展开辟了道路。</p><p>2、辛亥革命结束封建君主专制制度，建立资产阶级共和政府，使民主共和观念深人人心。正因为如此，当袁世凯、张勋先后复辟帝制时，均受到了社会舆论的强烈谴责和人民群众的坚决反抗。</p><p>3、辛亥革命推动人民的思想解放。激发了人民的爱国热情和民族觉醒，打开了禁调思想进步的闸门。</p><p>4、辛亥革命推动了中国的社会变革，为民族资本主义经济的发展创造条件。</p><p>5、辛乡革命推动了亚洲各国民族解放运动的高涨。</p><h5 id="3-辛亥革命为什么会失败-他的失败说明了什么"><a href="#3-辛亥革命为什么会失败-他的失败说明了什么" class="headerlink" title="3.辛亥革命为什么会失败?他的失败说明了什么?"></a>3.辛亥革命为什么会失败?他的失败说明了什么?</h5><p>因为资产阶级的软弱性和妥协性导致辛亥革命失败的根本原因。<br>　　没有自己的武装来阻止袁世凯篡夺革命的领导权， 没有改变中国半殖民地半封建的国家性质。<br>　　①资产阶级革命派始终没有一个彻底的反帝纲领。三民主义没有提出反对中华民族的主要敌人帝国主义。南京临时政府成立后还幻想得到帝国主义的支持。没有认清真正的敌人，是资产阶级革命派终归失败的原因之一。<br>　　②资产阶级革命派始终没有一个彻底的反封建纲领。三民主义没有彻底否定封建土地所有制，资产阶级革命没有解决农民的土地问题，因此得不到农民的支持。农民是中国革命的主要力量，没有农民的支持就无法战胜强大的敌人。<br>　　③资产阶级革命派始终没有建立起自己的武装力量。在辛亥革命中，资产阶级革命派发动的武装斗争都是短期的。“二次革命”中国民党人虽然掌握了一些军队，但并不是统一的革命力量，护法运动则依靠军阀的力量，因此每当遇到强大的反革命武装就不能不失败。<br>　　④资产阶级革命派的政党也是松散的。同盟会建立后缺乏严密的组织和纪律，武昌起义爆发前实际上已名存实亡，没有一个坚强的革命政党，就不能使革命者紧密地团结起来形成坚强的战斗力。袁世凯能够窃取辛亥革命果实，也与同盟会的涣散、领导成员政见不一有关。</p><h4 id="FOUR-10-12"><a href="#FOUR-10-12" class="headerlink" title="FOUR  10-12"></a>FOUR  10-12</h4><h5 id="1-中国的先进分子为什么和怎样选择的马克思主义"><a href="#1-中国的先进分子为什么和怎样选择的马克思主义" class="headerlink" title="1.中国的先进分子为什么和怎样选择的马克思主义"></a>1.中国的先进分子为什么和怎样选择的马克思主义</h5><p>1.农民阶级的局限性(太平天国) ,资产阶级的软弱性和妥协性(辛亥革命)使他们在中国的政治制度的探索失败,说明他们都不能完成反封反帝的认务<br>2.五四运动后无产阶级登上历史舞台,随着俄国十月革命后马克思主义传播到中国,先进知识分子认识到,马克思主义更适合中国国情<br>3.帝国主义国家对中国的掠夺和社会主义俄国对中国的援助形成了鲜明对比</p><h5 id="2-为什么说中国共产党的成立是“开天辟地”的大事变"><a href="#2-为什么说中国共产党的成立是“开天辟地”的大事变" class="headerlink" title="2.为什么说中国共产党的成立是“开天辟地”的大事变?"></a>2.为什么说中国共产党的成立是“开天辟地”的大事变?</h5><p>　之所以说中国共产党的成立是开天辟地的大事变，是因为中国共产党的诞生使中国革命的面貌从此焕然一新。<br>　　1.中国共产党的成立使中国革命有了坚强的领导核心，灾难深重的中国人民有了可以依赖的组织者和领导者，中国革命从此不断向前发展，由民主主义革命向社会主义革命推进。<br>　　2.中国共产党的成立，使中国革命有了科学的指导思想。中国共产党以马克思主义为指导思想，把马克思主义和中国革命的具体实践相结合，制定了正确的革命纲领和斗争策略，为中国人民指明了斗争的目标和走向胜利的道路。<br>　　3.中国共产党的成立，使中国革命有了新的革命方法，并沟通了中国革命和世界无产阶级革命之间的联系，为中国革命获得了广泛的国际援助和避免走资本主义提供了客观可能性。<br>　　4.中国革命有了新的奋斗目标。即：实现新民主主义革命的胜利，建设社会主义和共产主义社会。<br>　　中共一大即中国共产党第一次全国代表大会，1921年7月23日在上海召开，标志着中国共产党的正式成立</p><h5 id="3-中国共产党成立后，中国革命呈现了哪些新面貌"><a href="#3-中国共产党成立后，中国革命呈现了哪些新面貌" class="headerlink" title="3.中国共产党成立后，中国革命呈现了哪些新面貌?"></a>3.中国共产党成立后，中国革命呈现了哪些新面貌?</h5><p>中国共产党成立后，中国革自命呈现的新面貌：<br>　　第一，第一次提出了反帝反封建的民主革命纲领，为中国人民指出了明确的斗争目标。<br>　　第二，发动工农群众开展革命斗争，在中国掀起了第一次工人运动高潮，同时，中国共产党也开始从事发动农民的工作，农民的运动蓬勃发展。<br>　　第三，实行国共合作，并在合作中发挥主导作用，掀起大革命高潮，推翻了北洋军阀的统治。<br>原因：<br>　　一、中国共产党使中国革命有了坚强的领导核心，中国人民有了可依赖的组织者和领导者，保证了中国革命的胜利发展。<br>　　二、中国共产党使中国革命有了马列主义科学的指导思想，并与中国实际相结合，为中国人民指明了斗争的目标和走向胜利的道路。<br>　　三、中国共产党使中国革命有了新的革命方法，并沟通了中国革命与世界革命的联系，为中国革命获得国际援助和避免资本主义前途提供了客观可能性。</p><h4 id="FIVE-13-15"><a href="#FIVE-13-15" class="headerlink" title="FIVE   13-15"></a>FIVE   13-15</h4><h5 id="1-以毛泽东为代表的中国共产党人是如何探索和开辟中国革命新道路的"><a href="#1-以毛泽东为代表的中国共产党人是如何探索和开辟中国革命新道路的" class="headerlink" title="1.以毛泽东为代表的中国共产党人是如何探索和开辟中国革命新道路的?"></a>1.以毛泽东为代表的中国共产党人是如何探索和开辟中国革命新道路的?</h5><p>（一）开展武装反抗国民党统治的斗争<br>　　1927年8月，中共中央在汉口召开紧急会议（八七会议），彻底清算了大革命后期的陈独秀右倾机会主义错误，确定了开展土地革命和武装反抗国民党反动统治的总方针。<br>　　八七会议以后，举行了南昌起义、湘赣边界秋收起义、广州起义。中国革命由此发展到了一个新阶段。<br>　　（二）走农村包围城市的革命道路<br>　　以农村为重点，到农村去发动农民，进行土地革命，开展武装斗争，建设根据地，这是1927年大革命失败后中国革命发展的客观规律所要求的。农村包围城市、武装夺取政权这条革命新道路的开辟，依靠了党和人民的集体奋斗，凝聚了党和人民的集体智慧。而毛泽东是其中的杰出代表。　　<br>　　（三）毛泽东不仅在实践中首先把革命进攻的方向指向了农村，而且从理论上阐明了武装斗争的极端重要性和农村应当成为党的工作中心的思想。<br>　　1928年，毛泽东写了《中国的红色政权为什么能够存在？》、《井冈山的斗争》等文章，明确指出以农业为主要经济的中国革命，以军事发展暴动，是一种特征；还科学阐明了共产党领导的土地革命、武装斗争与根据地建设这三者之间的辩证统一关系。<br>　　1930年，《星星之火可以燎原》一文中，毛泽东指出：红军、游击队和红色区域的建立和发展，是半殖民地中国在无产阶级领导下的农民斗争的最高形式和半殖民地农民斗争发展的必然结果，并且无疑议的是促进全国革命高潮的最重要因素。<br>　　（四）农村包围城市，武装夺取政权理论，是对1927年革命失败后中国共产党领导的红军和根据地斗争经验的科学概括。它是以毛泽东为代表的中国共产党人同当时党内盛行的把马克思主义教条化、把共产国际和苏联经验神圣化的错误倾向做坚决斗争基础上形成的。<br>　　农村包围城市、武装夺取政权理论的提出，标志着中国化的马克思主义：毛泽东思想的初步形成。<br>　　　　（五）随着革命新道路的开辟，中国革命开始走向复兴。中国共产党领导的红军和根据地逐步发展起来。红军游击战争实际上已经成为中国革命的主要形式，农村根据地成为积蓄和锻炼革命力量的主要战略阵地。</p><h5 id="2-20世纪20年代后期、30年-代前中期-中国共产党内为什么连续出现“左”倾错误"><a href="#2-20世纪20年代后期、30年-代前中期-中国共产党内为什么连续出现“左”倾错误" class="headerlink" title="2. 20世纪20年代后期、30年 代前中期,中国共产党内为什么连续出现“左”倾错误?"></a>2. 20世纪20年代后期、30年 代前中期,中国共产党内为什么连续出现“左”倾错误?</h5><p>第一，主要原因在于全党的马克思主义理论准备不足，理论素养不高，实践经验也很缺乏，对于中国的历史现状和社会状况、中国革命的特点、中国革命的规律不了解，对于马克思列宁主义的理论和中国的实践没有统一的理解，一句话，不善于把马克思列宁主义与中国实际全面的、正确的结合起来。<br>第二，共产国际对中国共产党内部事务的错误敢于和瞎指挥。<br>第三，八七会议以后党内一直存在着浓厚的“左”倾情绪始终没有得到认真地清理。 第四，半殖民地半封建中国社会的阶级状况，决定了中国共产党的党员中农民和小资产阶级出身的占大多数，使党处在小资产阶级思想的包围之中。党内出现只注重书本知识，不注重实际的教条主义，只注重感性知识而轻视理论的经验主义。影响党的思想、路线和政策。</p><h5 id="3-中国共产党是如何总结历史经验、加强党的思想理论建设的"><a href="#3-中国共产党是如何总结历史经验、加强党的思想理论建设的" class="headerlink" title="3. 中国共产党是如何总结历史经验、加强党的思想理论建设的?"></a>3. 中国共产党是如何总结历史经验、加强党的思想理论建设的?</h5><p>土地革命时期，党内连续发生“左”倾错误，给中国革命带来了极其严重的危害。这些错误的发生，主要是对于马克思列宁主义的理论和中国革命的实践没有统一的理解而产生的。正因为如此，毛泽东强调，为了纠正错误，必须端正思想路线，实行马克思列宁主义与中国实际相结合的原则。<br>以毛泽东为主要代表的中国共产党人历来重视总结经验，加强党的思想理论建设。毛泽东早就提出，要注重调查研究，反对本本主义。红军到达陕北后，毛泽东、中共中央用很大的精力，去总结历史经验，加强党的思想理论建设。<br>1935年12月毛泽东作了《论反对日本帝国主义的策略》的报告，阐明党的抗日民族统一战线政策，批判了大给的关门主义和对于革命的急性病，系统地解决了党的政治路线上的问题。<br>1936年12月毛泽东写了《中国革命战争的战略问题》这部著作，总结土地革命战争中党内在军事问题上的大争论，系统地说明了有关中国革命战争战略方面的诸问题。<br>1937年夏，毛泽东写了《实践论》、《矛盾论》，从马克思主义认识论的高度，总结龙国共产党的历史经验，揭露和批判党内的主观主义尤其是教条主义的错误，深入论证马克思列宁主义基本原理同中国具体实际相结合的原则，科学地阐明了党的思想路线。</p><h4 id="SIX-16-19"><a href="#SIX-16-19" class="headerlink" title="SIX   16-19"></a>SIX   16-19</h4><h5 id="1-为什么说中国的抗日战争是神圣的民族解放战争"><a href="#1-为什么说中国的抗日战争是神圣的民族解放战争" class="headerlink" title="1.为什么说中国的抗日战争是神圣的民族解放战争?"></a>1.为什么说中国的抗日战争是神圣的民族解放战争?</h5><p>第一，中国人民抗日战争的胜利，彻底打败了日本侵略者，捍卫了中国的国家主权和领土完整，使中华民族避免了遭受殖民奴役的厄运。抗日战争的胜利，结束了日本在台湾50年的殖民统治，使台湾回到祖国的怀抱。<br>第二，中国人民抗日战争的胜利，促进了中华民族的觉醒，使中国人民在精神上、组织上的进步达到了前所未有的高度。中国人民通过抗日战争的实践认识到，中国共产党是领导中国民族人民争取民族独立和人民解放的坚强核心。正是在抗日战争的基础上，中国共产党领导人民取得了整个新民主主义革命的胜利。<br>第三，中国人民抗日战争的胜利，促进了中华民族的大团结，弘扬了中华民族的伟大精神。这就是：坚决维护国家和民族利益、誓死不当亡国奴的民族自尊品格；万众一心、共赴国难的民族团结意识；不谓强暴、敢于同敌人血战到底的民族英雄气概；百折不挠、敢于依靠自己的力量战胜侵略者的民族自强信念；开拓创新、善于在危难中开辟发展新道路的民族创造精神。<br>第四，中国人民抗日战争的胜利，对世界各国夺取反法西斯战争胜利、维护世界和平的伟大事业产生了巨大影响。中国人民为最终战胜世界反法西斯势力作出的历史性贡献，在全世界人民面前树立了一个以弱胜强的范例。中国参与发起成立联合国并成为联合国安理会常任理事国，显著提高了中国的国际地位和国际影响。</p><h5 id="2-为什么说中国共产党是中国人民抗日战争的中流砥柱"><a href="#2-为什么说中国共产党是中国人民抗日战争的中流砥柱" class="headerlink" title="2. 为什么说中国共产党是中国人民抗日战争的中流砥柱?"></a>2. 为什么说中国共产党是中国人民抗日战争的中流砥柱?</h5><p>因为没有以毛泽东为主要代表的中国共产党人，积极倡导、促成、维护抗日民族，统一战线，抗日战争就不会胜利。</p><p>中国共产党始终坚持把马克思列宁主义的基本原理与中国的具体实际相结合，创造和发展了毛泽东思想，在抗日战争中发挥了重要的指导作用。 在这场战争里，中国共产党及其领导的人民武装力量，是全民族利益的最坚定的维护者，是取得抗战胜利的决定性力量。</p><p>中国共产党倡导，推动和维护抗日民族统一战线，动员国民军和人民尽可能战争，成为全体力量的杰出组织者和激励者。 </p><p>中国共产党人以最虔诚的爱国主义和不怕流血的模范行动支持拯救国家救国的希望，成为赢得战争胜利的全国先锋。中国共产党在敌后发动和组织以农民为主力的各阶层群众，开展游击战争，使大量侵华日军陷于人民战争的汪洋大海之中。共产党领导的军队在这场战争中付出极大牺牲，为夺取抗日战争胜利也作出了重大的贡献。</p><h5 id="3-怎样评价国民党政府在抗日战争中执行的路线和正面战场的地位与作用"><a href="#3-怎样评价国民党政府在抗日战争中执行的路线和正面战场的地位与作用" class="headerlink" title="3.怎样评价国民党政府在抗日战争中执行的路线和正面战场的地位与作用?"></a>3.怎样评价国民党政府在抗日战争中执行的路线和正面战场的地位与作用?</h5><p>第一，国民党政府执行的是片面抗战路线，即不敢放手发动和武装民众，实行单纯的政府和正规军的抗战；在战略战术上，没有采取积极防御的方针，而是进行单纯的阵地防御战。<br>第二，国民党领导的正面战场，对抗日战争的胜利做出了重要贡献。特别是在抗战初期的战略防御阶段。<br>第三，国民党的正面战场在抗战个阶段中表现不同，其地位和作用也不同。抗战初期的战略防御阶段，国民党政府积极抗战，正面战场在整个抗战中起了重要作用。抗战进入战略相持阶段，其实行片面抗战，制造反共摩擦，在抗战中的地位、作用明显下降。在战略反攻阶段，其虽坚持抗战，但对夺取抗战最后胜利的作用十分有限。</p><h5 id="4-为什么说中国人民抗日战争是弱国战胜强国的范例-其历史意义是什么"><a href="#4-为什么说中国人民抗日战争是弱国战胜强国的范例-其历史意义是什么" class="headerlink" title="4.为什么说中国人民抗日战争是弱国战胜强国的范例?其历史意义是什么?"></a>4.为什么说中国人民抗日战争是弱国战胜强国的范例?其历史意义是什么?</h5><p>（1）从实力对比看，抗日战争使弱国对强国的战争。中国是半殖民地半封建社会，政治、经济、军事、文化等各方面的综合实力都很落后，是弱国。而日本是世界上一等强国，军事、经济实力和政治组织力量都很强大。<br>（2）从战略对比看，抗日战争使大国对小国的战争。中国虽弱，但很大，地域广阔，人口众多，资源丰富，兵源和物资补给充足，能长久坚持抗战。日本虽强，但很小，且是深入中国的广阔领土，使得其人力、军力、财力、物力均感缺乏，经不起长期的战争。<br>(3)从战争性质看，抗日战争是中国抵御日本侵略的正义战争。中国是正义的，进步的，得道多助，会得到广泛的国际援助。而日本是非正义的，野蛮的。失道寡助。<br>(4)从战争结果看，抗日战争取得了胜利。中国经过14年抗战，以3500万人的伤亡和5000多亿美元的损失，战胜了日本帝国主义，取得来抗战的最后胜利，捍卫了中国的国家主权和领土完整，使中华民族避免了遭受殖民奴役的厄运，促进了中华民族的觉醒和复兴。<br>基本经验：<br>（1）全国各族人民的大团结是中国人民战胜一切艰难困苦、实现奋斗目标的力量源泉。没有全国各族人民的大团结，就没有抗日战争的伟大胜利。<br>（2）以爱国主义为核心的伟大民族精神是中国人民团结奋进的精神动力。以爱国主义为核心的中华民族精神是抗日战争得以坚持和胜利的重要思想保证。<br>（3）提高综合国力是中华民族自立于世界民族之林的基本保证。一个国家只有首先自强，才能在世界上自立。<br>（4）中国人民热爱和平，反对侵略战争，同时有决不惧怕战争。<br>（5）只有坚持中国共产党的领导，中华民族才能捍卫自己的生存和发展的权利，才能创造美好的未来。</p><h4 id="SEVEN-20-22"><a href="#SEVEN-20-22" class="headerlink" title="SEVEN 20-22"></a>SEVEN 20-22</h4><ol><li><h5 id="抗战胜利后，国民党政府为什么会陷入全民的包围中并迅速走向崩溃"><a href="#抗战胜利后，国民党政府为什么会陷入全民的包围中并迅速走向崩溃" class="headerlink" title="抗战胜利后，国民党政府为什么会陷入全民的包围中并迅速走向崩溃?"></a>抗战胜利后，国民党政府为什么会陷入全民的包围中并迅速走向崩溃?</h5></li></ol><p>第一，国民党政府由于它的专制独裁统治和官员们的贪污腐败、大发国难财，抗战后期在大后方便已严重丧失人心。在抗战胜利时曾经对他抱有很大希望的原沦陷区人民，也很快对他感到极端的失望。一个重要原因，就是国民党政府派出的官员到原沦陷区接收时，把接收变成了“劫收”，大发国难财。<br>第二，国民党之所以迅速失去民心，还由于它违背全国人民迫切要求休养生息、和平建国的意愿，执行反人民的内战政策。为了筹措内战经费，国民党政府除了对人民征收苛重的捐税以外，更无限制的发行纸币。导致恶性通货膨胀，工农业生产严重萎缩。<br>这样，国民党当局就将全国各阶层人民之于饥饿和死亡的界线上，因而就迫使全国各阶层人民团结起来，同蒋介石反动政府作你死我活的斗争，除此以外，再无出路。</p><h5 id="2-如何认识民主党派的历史作用-中国共产党领导的多党合作、政治协商的格局是怎样形成的"><a href="#2-如何认识民主党派的历史作用-中国共产党领导的多党合作、政治协商的格局是怎样形成的" class="headerlink" title="2.如何认识民主党派的历史作用?中国共产党领导的多党合作、政治协商的格局是怎样形成的?"></a>2.如何认识民主党派的历史作用?中国共产党领导的多党合作、政治协商的格局是怎样形成的?</h5><p>1.监督执政的作用.是中国民主政治的重要组成部分,在中国共产党的领导下,在全国人民代表大会和全国政治协商会议的框架下讨论国家方针政策,来监督共产党的执政.<br>民主党派现在已经被提升到一个新的高度,民主党派成员已经开始直接管理国家事务,出任部长,不再仅仅担任副职<br>第一，各民主党派虽然政纲不尽相同，但都主张爱国、反对买过，主张民主、反对独裁，在抗战中，对反抗日本帝国主义侵略，特别是文化侵略，多国统区抗日民主运动的发展都起了积极作用。抗战胜利后，民主党派作为“第三方面”，主要与共产党一起，反对国民党的内战独裁政策，为和平民主而奔走呼号。<br>第二，各民主党派成立时，中国共产党就与他们建立了不同程度的合作关系，并在斗争实践中逐步发展了这种合作关系。在共同繁多国民党独裁统治的斗争中，中国共产党不仅鼓励、支持各民主党派的斗争，而且对他们某些不妥的意见进行批评，诚恳地帮助他们进步，这是的中共与民主党派的关系更加融洽，合作方式不断发展完善。<br>第三，国民党坚持一党独裁，迫害民主党派进步人士，使得民主党派人士逐步转到新民主主义革命立场上，特别是1948年1月22日，民主党派和无党派人士发表《对时局的意见》，表示愿意接受中国共产党的领导，拥护建立人民民主的新中国。<br>第四，中国共产党也邀请民主党派“积极参政，共同建设新中国”，1949年9月，各民主党派积极参加了中国人民政治协商会议。这标志着各民主党派正式接受了中国共产党领导和人民共和国，确认了社会主义的正确性。各民主党派也由在野党变成了人民民主专政的参政党，中国共产党领导的多党合作、政治协商的格局基本形成，中国共产党领导的多党合作和政治协商制度在此基础上也基本形成。<br>2.中国共产党也邀请民主党派“积极参政，共同建设新中国”，1949年9月，各民主党派积极参加了中国人民政治协商会议。这标志着各民主党派正式接受了中国共产党领导和人民共和国，确认了社会主义的正确性。各民主党派也由在野党变成了人民民主专政的参政党，中国共产党领导的多党合作、政治协商的格局基本形成，中国共产党领导的多党合作和政治协商制度在此基础上也基本形成。</p><h5 id="3-为什么说“没有共产党就没有新中国”-中国共产党领导中国革命取得胜利的基本经验是什么"><a href="#3-为什么说“没有共产党就没有新中国”-中国共产党领导中国革命取得胜利的基本经验是什么" class="headerlink" title="3.为什么说“没有共产党就没有新中国”?中国共产党领导中国革命取得胜利的基本经验是什么?"></a>3.为什么说“没有共产党就没有新中国”?中国共产党领导中国革命取得胜利的基本经验是什么?</h5><p>第一，中国共产党作为工人阶级的政党，不仅代表着中国工人阶级的利益，而且代表着整个中华民族和全中国人民的利益。<br>第二，中国共产党是马克思主义的科学理论武装起来的，他以中国化的马克思主义即马克思列宁主义基本原理与中国实践相结合的毛泽东思想为一切工作的指针。<br>第三，中国共产党人在革命过程中始终英勇地站在斗争的最前线。以实际行动表明了自己是最有远见，最富于牺牲精神，最坚定，而又最能虚心体察民情并依靠群众的坚强的革命者，从而赢得了广大中国人民的衷心拥护。<br>第四，“没有共产党就没有新中国”。这是中国人民基于自己的切身体验所确认的客观真理。<br>中国革命取得胜利的基本经验（中国共产党在中国革命中战胜敌人的三大法宝）<br>第一，建立广泛的统一战线。<br>第二，坚持革命的武装斗争。<br>第三，加强共产党自身的建设。</p><h4 id="EIGHT-23-25"><a href="#EIGHT-23-25" class="headerlink" title="EIGHT 23-25"></a>EIGHT 23-25</h4><h5 id="1-为什么说新民主主义社会是一-个过渡性的社会"><a href="#1-为什么说新民主主义社会是一-个过渡性的社会" class="headerlink" title="1.为什么说新民主主义社会是一-个过渡性的社会?"></a>1.为什么说新民主主义社会是一-个过渡性的社会?</h5><p>在新民主主义社会中，存在着五种经济成分，即：社会主义性质的国营经济、半社会主义性质的合作社经济、农民和手工业者的个体经济、私人资本主义经济和国家资本主义经济。其中国营经济处于领导地位。<br>①在我国新民主主义社会中，社会主义的因素不论在经济上还是政治上都已经居于领导地位，但非社会主义因素仍有很大的比重。由于社会主义因素的优越性和领导地位，加上当时有利于发展社会主义的国际条件，决定了社会主义因素将不断增长并获得最终胜利。</p><p>②为了促进社会生产力的进一步发展，为了实现国家富强、民族振兴，我国新民主主义社会必须适时地逐步过渡到社会主义社会。</p><p>③我国新民主主义社会是属于社会主义体系的，是逐步过渡到社会主义社会的过渡性质的社会。</p><h5 id="2-怎样理解社会主义制度在中国的确立是历史和人民的选择"><a href="#2-怎样理解社会主义制度在中国的确立是历史和人民的选择" class="headerlink" title="2. 怎样理解社会主义制度在中国的确立是历史和人民的选择?"></a>2. 怎样理解社会主义制度在中国的确立是历史和人民的选择?</h5><p>（1）社会主义性质的国营经济力量相对来说比较强大，它是实现国家工业化的主要基础。而国家的社会主义工业化，是国家独立和富强的当然要素和必要条件。<br>（2）资本主义经济力量弱小，发展困难，不可能成为中国工业起飞的基础。<br>（3）对个体农业进行社会主义改造，是保证工业发展，实现国家工业化的一个必要条件。<br>（4）当时的国际环境也促使中国选择社会主义。<br>人们的选择是十分必要的、完全正确的。<br>通过选择，中国共产党创造性的完成了由新民主主义到社会主义的过渡，实现了中国历史上最伟大、最深刻的社会变革，开始了在社会主义道路上实现中华民族伟大复兴的历史征程。</p><h5 id="3-为什么说完成社会主义改造是中国历史上最伟大和最深刻的社会变革"><a href="#3-为什么说完成社会主义改造是中国历史上最伟大和最深刻的社会变革" class="headerlink" title="3.为什么说完成社会主义改造是中国历史上最伟大和最深刻的社会变革?"></a>3.为什么说完成社会主义改造是中国历史上最伟大和最深刻的社会变革?</h5><p>社会主义改造的基本完成，使中国社会经济结构发生了根本变化，社会主义经济成分已占绝对优势，社会主义公有制已成为我国社会的经济基础。</p><p>伴随着社会经济制度和社会经济结构的根本变化，中国社会的阶级关系也发生了根本的变化。社会主义改造的基本完成和由此带来的社会各方面的变化，表明社会主义基本制度已经在中国的经济领域、政治领域及社会生活其他领域初步确立。</p><p>中国可以在没有实现工业化的情况下进入社会主义，社会主义基本制度的确立正是为了推进中国的工业化、现代化建设；另一方面，由于经济文化还比较落后，中国的社会主义还只能是初级阶段的社会主义，或者叫社会主义初级阶段。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/06/18/%E8%A7%82%E3%80%8A%E6%95%99%E7%88%B6%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <url>/2020/06/18/%E8%A7%82%E3%80%8A%E6%95%99%E7%88%B6%E3%80%8B%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<p><strong>观《教父》有感</strong></p><p>《教父》，一部称之为“男人的圣经”上世纪70年代出版的美国电影，虽说是根据同名小说进行改编，但经导演弗朗西斯·科波拉的精心制作，马龙·白兰度等演员的精湛演技，最终掀起了帮派电影的新潮流，斩获奥斯卡金像奖最佳电影、最佳男主角及最佳改编剧本三大奖项，作为最经典的电影之一，在人们心目中长久不衰。</p><p>本剧以新老教父为主角，老教父维托·柯里昂作为美国最大的黑手党教父之一，开篇参加女儿康妮婚礼的同时，先是帮助好友惩治轮奸女儿的恶徒，后帮助教子约翰尼·冯塔纳获得好莱坞电影角色，拜托军师汤姆·黑根前往洛杉矶找寻制作人，美名给他一个“无法拒绝的条件”。同时，幼子迈克尔·柯里昂，一个不参与家族事业的陆军军官，将未婚妻凯伊·亚当斯介绍给了家人。</p><p>好景不长，毒枭索拉索因教父在政界关系庞大，于是想与教父合作毒品交易，教父深刻了解毒品绝不能碰，便拒绝了索拉索，引起了他的不满。索拉索雇凶暗杀维托，住院奄奄一息。迈克尔想挽救家族现状，便假意求和，与索拉索和麦考斯基和谈，在厕所取得手枪后将其杀死逃去西西里避难，并与另一位姑娘相恋成婚。</p><p>另一边，大哥桑尼趁机杀死了敌对黑手党塔塔基利亚之子，听到妹妹被家暴，冲动的他立马赶去救援，却在途中被扫射致死。在西西里避难的迈克尔也被盯上，妻子意外被炸死在了车内，迈克尔自此醒悟成长，更加黑化，返回了美国，与凯结婚，并继承家业。</p><p>迈克尔回美后成为新一任教父，受老教父指导，成功找出叛徒泰西欧，而老教父却发病身亡。迈克尔为了复仇，将五大黑帮家族首领全部刺杀，并处决了家族叛徒，作为新一任教父的地位稳固。</p><p>本篇橘子预示死亡或流血事件，贯穿了整个教父。第一次橘子出现是老教父维托下车购入橘子，遭到索拉索的报复，被行刺住院奄奄一息。第二次出现是教父同孙子玩耍时，用橘子皮逗孙子，却意外发病身亡。或许因为西西里有种橘子名为血橘，所以它的登场往往象征着流血与牺牲，又也许是因为整部影片基调过暗，橘子能够很好的在其中鲜艳的显示出来，所以选用橘子。但毫无疑问，老教父年轻时痛揍恶霸所获得的橘子，彷佛象征着柯里昂家族崛起的开始，而老教父遭刺杀时打翻的橘子，也彷佛象征着柯里昂家族的衰退。这一切都在不冥之中。</p><p>另一方面，老教父重视家庭，任教父时儿孙美满，家庭和睦，从小失去双亲的他，更重视忠实、情义与亲情，从电影第一幕婚礼，便能看出，老教父非常非常爱自己的家庭，即使有众多事务要处理，也不忘落下女儿康妮的生日，在迈克尔还没来到拍照时，老教父直接拒绝需等到迈克尔来到时才拍照，他是真真实实热切爱着他的家庭的；婚礼中，也能看出，其他人对教父的爱戴与尊敬。杀人卢卡会为了他背说话稿，军师为了他东奔西走。虽然最后发病而亡，却也算是在之前的日子享受了美满和幸福。而新教父迈克尔，虽然自上任以后，一生致力于洗白家族，却始终是孤独的。他曾是不顾家人反对参军，一个处于家族外的陆军军官，却最终成长为能把握好整个家族的柯里昂阁下，也与妻子决裂，与兄弟争斗，最终十分孤独。</p><p>电影之中有着许多对比强烈的地方，在电影开幕，别人寻求教父帮助的办公室，几乎是全黑，而一旁的婚礼，却色彩鲜艳，人物众多，每个人都倾尽全力展现了各个人物的性格特色，而拍照的时候，也是越向中心站，显示地位越高。另一强烈对比便是橘子所代来的，全篇基调较暗，橘子的出现使得非常的显眼，也让人看到那巨大的反差。再一块便是老教父看自己儿子的遗体时，打光直直的打在桑尼上，老教父维托的神情真是演绎的淋漓尽致，欲哭无泪却为了整个家族不能帮与他复仇，将他作为一位父亲，同时作为一个黑手党教父的无奈在表情上演绎的淋漓尽致。</p><p>《教父》作为一部同名畅销小说改编，要将其内容压缩至3小时的电影实属不易,而导演弗朗西斯·科波拉的处理，实在是淋漓尽致，《教父》还有我们深挖的地方，它也将继续作为一代佳作，广为流传于世。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Moonbyul-1</title>
    <link href="/2020/03/19/Moonbyul-1/"/>
    <url>/2020/03/19/Moonbyul-1/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/03/19/Moonbyul-1/%5Cimages%5CMoonbyul%5C2.jpg"></p><h3 id="Moon-Byul-E"><a href="#Moon-Byul-E" class="headerlink" title="Moon Byul E"></a>Moon Byul E</h3><h3 id="MAMAMOO-Moonbyul"><a href="#MAMAMOO-Moonbyul" class="headerlink" title="MAMAMOO Moonbyul"></a>MAMAMOO Moonbyul</h3><h3 id="youtube"><a href="#youtube" class="headerlink" title="youtube:"></a>youtube:</h3><ol><li><p><strong>[마마무] 문별 노래 모음 2020 Moonbyul Solo Playlist 2020</strong></p><iframe width="560" height="315" src="https://www.youtube.com/embed/W_ZjzUbT8UE" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><p><strong>[문별] ‘달이 태양을 가릴 때(Eclipse)’ Performance Video(Dancer Change ver.)</strong></p><iframe width="560" height="315" src="https://www.youtube.com/embed/WJpRV1HG87w" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><p><strong>180819 4season s/s 마마무(MAMAMOO) 문별 직캠 - Mirror + MOON MOVIE</strong></p><iframe width="560" height="315" src="https://www.youtube.com/embed/iwLCMjGT8Iw" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><p><strong>[MoonByul] ‘잊어버리지마’ - “77,777” 이벤트 스페셜 영상(Don’t forget)</strong></p><iframe width="560" height="315" src="https://www.youtube.com/embed/TDqm7AtDBU4" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li><li><h5 id="【中字】Moonbyul-玟星-MAMAMOO-Love"><a href="#【中字】Moonbyul-玟星-MAMAMOO-Love" class="headerlink" title="【中字】Moonbyul 玟星 (MAMAMOO) - Love"></a>【中字】Moonbyul 玟星 (MAMAMOO) - Love</h5></li></ol><iframe width="560" height="315" src="https://www.youtube.com/embed/0tJe_XwpIcU" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe><ol start="6"><li><h5 id="Special-MOONBYUL-Choreographer-Performance-Video"><a href="#Special-MOONBYUL-Choreographer-Performance-Video" class="headerlink" title="[Special] MOONBYUL Choreographer Performance Video"></a>[Special] MOONBYUL Choreographer Performance Video</h5><iframe width="560" height="315" src="https://www.youtube.com/embed/jS8UvfA2How" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></li></ol>]]></content>
    
    
    <categories>
      
      <category>杂谈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>杂谈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/12/15/%E8%A7%82%E3%80%8ALoad%20of%20War%E3%80%8B%E6%9C%89%E6%84%9F/"/>
    <url>/2019/12/15/%E8%A7%82%E3%80%8ALoad%20of%20War%E3%80%8B%E6%9C%89%E6%84%9F/</url>
    
    <content type="html"><![CDATA[<h3 id="观《Load-of-War》有感"><a href="#观《Load-of-War》有感" class="headerlink" title="观《Load of War》有感"></a><strong>观《Load of War》有感</strong></h3><p>“在这世界上一共有伍亿伍千万支军火在流通，那就是说每十二个人就有一支枪，唯一的问题是：我们如何让其他十一个人也有枪？”     </p><p>——引言</p><p>于课程之初，花2小时看完了《Load of War》这部片子，作为课程《战争类影片主题探索》的首部影片，其间大量真实枪械与坦克的使用，也让我们初步了解了何所谓“战争片”。</p><p>本剧以尤里为主角，以军火商的角度，讲述战争的另一面。尤里一家本经营着一家犹太餐厅，当其目睹一个黑帮老大杀死两名黑帮成员后，他决定与弟弟威特里合作，开始贩卖军火。很快，他的第一把枪”uzi“便成功出售，就如他本人所说：”第一次卖枪的感觉，很大程度上就象第一次做爱一样，你根本不知道自己在干嘛，虽然很刺激，但很快就结束了。“每个人都有自己所擅长的地方，或许只是在未做之前还未发现罢了。而尤里的独特天赋，便是贩卖军火。</p><p>就如盖茨比一般，尤里也有着自己的”美国梦“，他的梦想便是女星艾娃。或许热切的爱情都带着几分盲目感，尤里对艾娃的向往化为他的实质行动。他凭借自己贩卖军火所得到的钱包装自己，让艾娃对他动心并组建家庭。在爱情上他是如此幸运，但为了维持这份伪装，便不得不以更多的谎言并出售更多倍的枪支弹药。</p><p>不过对于尤里来说，家庭，或许只是束缚他恶狼本质的枷锁。1991年苏联解体后，在与叔叔一次合作中，叔叔被另一位军火商炸死，与此同时，尤里的对头，国际刑警组织的特务杰克对其的防范再加一分，却苦于没有证据逮捕他。明白了尤里真实身份与职业的艾娃，也带着儿子离尤里而去。而一直支持尤里的弟弟威特里，在反抗独裁者军队时被击毙。自此，尤里彻底变为孤单一人。家人的抛弃让其成为战争之王，成为威特里所一直防范着的恶犬，不代表任何立场，仅仅作为一个”商人“而周游于世界之间。</p><p>剧中明面上一直被赋予”战争之王“称号的安德烈，一直认为尤里才是真正的战争之王。”狗彘食人食而不知检，途有饿殍而不知发，人死则曰，非我也，岁也，无异于刺人而杀之曰：非我也，兵也。“杀人的虽然不是枪是人，但枪又何尝不是最大的帮凶。安德烈的想法也是由此得来的。没有任何立场的尤里，以隔岸观火的中立态度，见证了一个又一个的战争，也在反复之中，似是怀念不再归来的往日一般，在军火生意上，越走越远。</p><p>另一方面，尤里的对头——国际刑警杰克，作为第一线的正义人士，有着自己的职责。他是国家明面上最需要的人，为了更多的人能够活着而奋斗在前面，却也什么也改变不了，他做的事情没有错，秉公执法，但却也很悲哀，就如他自己所说”我本想送你下地狱，原来你已经在地狱。“抓捕军火商抓了几十年，最终却被自己的上级亲自放走了尤里。他是成为百姓孩子们心目中英雄的角色，也是身体力行抵制黑暗的角色，只不过其所信奉的正义是更深层次的邪恶罢了。</p><p>或是反讽，就如“每一个在非洲的派系，喜欢给自己起一些高尚的名字，解放这个，爱国那个，或者共和或民主什么的，也许他们不知道自己是什么，地球唯一喜欢战争的民族，往往最残忍的暴行都出自声称自己为自由战士的人们。“剧中也有着几大矛盾：</p><p>一、军火商的尤里不能有任何立场，否则死的就是他们自己。弟弟便是因良心愧疚站了独裁者的背面，死于尤里身前。</p><p>二、尤里被释放的原因就是他被判刑的原因，不幸的是他是必须存在的恶魔。尤里背后的政府高层，为避免自己的身份暴露，正是需要尤里这种自由工作者，为其去支持那些他不方便支持的军队，将战争进一步爆发。</p><p>三、世界上最大的军火商就是杰克的老板，国际警察信奉的正义不过是更深层次的邪恶。这也是杰克作为国际刑警最悲哀的地方，尽管凭借自己的努力成功逮捕了尤里，最终也只能被世界上最大的军火交易商——美国总统，打压他自己心中的”正义“，而他所信奉的正义，不过是比尤里更深层次的黑暗罢了。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/12/14/Comptine%20D&#39;un%20Autre%20%C3%89t%C3%A9/"/>
    <url>/2019/12/14/Comptine%20D&#39;un%20Autre%20%C3%89t%C3%A9/</url>
    
    <content type="html"><![CDATA[<h3 id="Comptine-D’un-Autre-Ete"><a href="#Comptine-D’un-Autre-Ete" class="headerlink" title="Comptine D’un Autre Été"></a><strong>Comptine D’un Autre Été</strong></h3><p>（另一个夏天的童谣）</p><p>​        在2019年12月11日下午19点02分32秒，一只果蝇以每分钟能扇动4800次的频率降落到学校垃圾箱的苹果。与此同时，在b楼3楼某间教室中，老师激昂澎湃畅聊者学期末课程的总结。就在这时，丁香一号公寓11号楼五楼的走廊上，留居寝室的学生正带着自己的水卡前往开水房接水。还是在这个时候，属于键盘上的每一个字符，正由电脑传输入屏幕，写入关于《天使爱美丽》这部电影的观后些许感受及见解。</p><p>​        女主人公艾米丽便诞生在1974年法国的一个夏天。与他人不同的是，艾米丽的母亲阿曼蒂尼头脑有些神经质，父亲拉斐尔除了为女儿检查身体外不与女儿发生身体接触。在一次检查中因艾米丽过于激动与父亲的亲近，导致父亲误判艾米丽患有心脏病而导致她小时候没法与他人相往来。在母亲意外死亡，父亲因此患上自闭症后，艾米丽的童年更加的孤独与寂寞，这也使得她会在不经意间进入自己的幻想世界。</p><p>​        1997年的夏天，艾米丽意外在浴室的墙壁里发现了一只装有儿童玩具的铁盒。为了帮助别人寻回童年的回忆，艾米丽通过自己的努力，多方查找多处碰壁后，最终将铁盒归还给了曾经的男孩，看着他热切怀恋的泪，艾米丽更加坚定自己帮助他人的心。</p><p>​        自此，她积极行动起来，冷酷的杂货店老板、备受欺侮的伙计、忧郁阴沉的公寓管理员，还有对生活失去信心的邻居都被她列入了帮助的名单中。</p><p>​        这里便不得夸耀一番艾米丽如天使一般的心灵，虽然从小与外界相隔绝，无他人来往以提升自己的德智体美劳全面发展，但小艾米丽还是凭借自己纯洁的心，成功孕育了如今这个善良，爱家人，帮助他人的灵魂。“如果注定孤独，那么我愿意去爱全世界”，艾米丽做出这样的想法。她为了让父亲走出自闭症的影响，悄悄偷走小圣诞老人交予朋友带它“环游世界”，并为其拍下照片寄回家中；她为了帮助杂货店备受欺侮的伙计，使用自己的“小聪明”，以换小老板鞋码等方法，捉弄老板为伙计找回公道；她为了过路的老人，搀扶着他一路走过街道，谈到不同人所在做的不同的事，老人也彷佛感受到了如上天赐给的天使的光芒绽放笑容。</p><p>​        或许是那句好人总会有好报，艾米丽也成功遇见了爱情。艾米丽与收集他人拍坏大头照的尼诺相遇了，爱情的种子在她心中萌发。“人生多美丽，恋爱中的男女总是容光焕发，神秘才有吸引力。”或是因此，本部剧在艾米丽与尼诺之间的暧昧与相识累积的颇多文笔，无一不在表现神秘、捉摸不透却又充满甜蜜的France Romance。照相亭的初见，归还相簿给尼诺所留下的箭头，带着面具的大头贴，画面中绚丽明媚的色彩映照着两人之间的爱情萌芽。</p><p>​        两人之间那种不敢用言语吐露感情的羞涩感，那种对自己的不信任，那种无条件的忠诚，那种告别时的凄恻惆怅，那种充满嫉妒的独占欲。虽未正式见面，但两人之间如藕丝般缠绵，如猫般若离若进、若影若现的爱意，无一不显露两人之间的缘与情。有情人终成眷属，两人也在影片末尾骑着单车游过巴黎街头，落下帷幕。</p><p>​        ”没有你，良辰美景可与谁人说？“，尼诺于艾米丽如此，艾米丽于尼诺也是如此，他们寻找到了自己的爱情，收获了彼此的余生。</p><p>​        影片中每个人都有着自己的“怪癖”。就如剧中所说：“生命岂能尽如人意，人人都要有嗜好“。艾米丽喜欢在河边打水漂，将手指伸进装满豆子里的袋子；尼诺喜欢收集照相亭中被别人撕毁的大头贴，拉斐尔喜欢撕掉贴好的整片墙纸……</p><p>​        ”你不必万丈光芒，也不必有什么特殊意义，你只需要做那个小小你，然后去爱，这是那个天使告诉我的事。“，每个人都是独特的自我，不必为了别人善解人意，不必正义挺身而出，甚至不必年轻，你可以安静自由地在角落里绽放花朵，如剧中角色，拥有属于自己的小怪癖，坚持自己心中的小偏执，但却不能懦弱，不能逃避，不能不去面都内心的冲突，才是对生命价值的尊重和珍惜。</p><p>来自卑微小王的结课卑微论文。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/12/08/%E5%9B%9B%E7%BA%A7%E5%86%99%E4%BD%9C%E5%8F%A5%E5%9E%8B%E6%A8%A1%E6%9D%BF/"/>
    <url>/2019/12/08/%E5%9B%9B%E7%BA%A7%E5%86%99%E4%BD%9C%E5%8F%A5%E5%9E%8B%E6%A8%A1%E6%9D%BF/</url>
    
    <content type="html"><![CDATA[<h4 id="一、开头段常用提出现象句型"><a href="#一、开头段常用提出现象句型" class="headerlink" title="一、开头段常用提出现象句型"></a><strong>一、开头段常用提出现象句型</strong></h4><p><strong>1. Nowadays more and more… are commonly and widely… in everyday life.</strong></p><p>如今，在日常生活中，越来越多……被广泛……。</p><p><strong>2. In recent years… is gaining growing popularity with…</strong> </p><p>近年来，……收到越来越多……的欢迎。</p><p><strong>3. Recent years have seen a boom in…</strong></p><p>近年来，……出现了迅速增长。</p><p><strong>4. Nowadays, there are many…</strong></p><p>如今出现了许多……</p><p><strong>5. Nowadays,… has become a very common matter in …</strong></p><p>如今，……已经成为……的常见现象。</p><p><strong>6. Nowadays, there is a growing tendency in…</strong></p><p>如今，在……方面出现了上升的趋势。</p><p><strong>7. Recently,… has aroused wide concern. /… has been brought into focus.</strong></p><p>最近，……引起了广泛关注/ 收到了人们的关注。</p><p><strong>8. Most of us may have such experience that…</strong></p><p>我们当中许多人可能都有……这种经历。</p><h4 id="二、开头段常用引出他人观点句型"><a href="#二、开头段常用引出他人观点句型" class="headerlink" title="二、开头段常用引出他人观点句型"></a><strong>二、开头段常用引出他人观点句型</strong></h4><p><strong>9. In reaction to the phenomenon of…,some people say…</strong></p><p>针对……现象，有人说……</p><p><strong>10. When asked about… most people say…</strong></p><p>当被问到……，大多数人认为……</p><p><strong>11. When it comes to…, some people think…</strong></p><p>关于……，有人认为……</p><p><strong>12. Now, it is widely believed that…</strong></p><p>现在，许多人认为……</p><h4 id="三、开头-中间段常用引出两种不同观点的句型"><a href="#三、开头-中间段常用引出两种不同观点的句型" class="headerlink" title="三、开头/ 中间段常用引出两种不同观点的句型"></a><strong>三、开头/</strong> <strong>中间段常用引出两种不同观点的句型</strong></h4><p><strong>13. There has sprung up a heated debate as to whether… Some maintain that… However, others believe that…</strong></p><p>关于是否……，人们争论不休。有些人认为……另一些人则认为……</p><p><strong>14. There is a public debate today over… Some people believe that… Others claim that…</strong></p><p>如今社会上出现了关于……的争论。 有些人认为…… 另一些人则声称……</p><p><strong>15. When it comes to/talking about…, quite a few people believe that… but other people think differently.</strong></p><p>当谈及……时，有相当一部分人认为……然而，另一些人则有不同想法。</p><p><strong>16. People’s opinions vary when they talk about… Some maintain that… Others believe that…</strong></p><p>当谈及……时，人们观点不一。有人坚持认为……另有人认为……</p><h4 id="四、开头段常用引出故事-时间句型"><a href="#四、开头段常用引出故事-时间句型" class="headerlink" title="**四、开头段常用引出故事/**时间句型"></a>**四、开头段常用引出故事/**<strong>时间句型</strong></h4><p><strong>17. At about… o’clock in the… when I…, I saw…</strong></p><p>……点在……，当我正……的时候，我看见……</p><p><strong>18. Once in a street,…</strong></p><p>有一次在街上，……</p><p><strong>19. It was a… morning when a suddenly…</strong></p><p>那是……的早上，有一位……突然……</p><h4 id="五、中间段常用引出优缺点-不足-影响句型"><a href="#五、中间段常用引出优缺点-不足-影响句型" class="headerlink" title="五、中间段常用引出优缺点/ 不足/ 影响句型"></a><strong>五、中间段常用引出优缺点/</strong> <strong>不足/</strong> <strong>影响句型</strong></h4><p><strong>20. …plays an important role in…</strong></p><p>……对……很重要。</p><p><strong>21. The advantages of … lies in many ways.</strong></p><p>……有许多优点/好处。</p><p><strong>22. … as is the case with many issues, has both merits and demerits.</strong></p><p>正如许多事物一样，……也是既有优点又有不足。</p><p><strong>23. … will bring about an unfavorable effects/influence on…</strong></p><p>……会给……造成不好的影响。</p><p><strong>24. … will cause a sweeping change to…</strong></p><p>……会为……带来彻底的改变。</p><p><strong>25. …may give rise to /result in a number of problems.</strong></p><p>……会导致一系列问题。</p><h4 id="六、中间段-结尾段常用引出原因句型"><a href="#六、中间段-结尾段常用引出原因句型" class="headerlink" title="**六、中间段/ ** 结尾段常用引出原因句型"></a>**六、中间段/ ** <strong>结尾段常用引出原因句型</strong></h4><p><strong>26. Why…? Three factors can explain this. First,… Second,… Third,…</strong></p><p><strong>为什么……？</strong> </p><p>有三个因素可以解释。首先,……其次，……第三，……</p><p><strong>27. Three factors weigh heavily for… For one thing,… For another,… A third contributing factor is…</strong></p><p>三个因素对……很大。首先，……其次，……再次，……</p><p><strong>28.The factors that contribute to… include…</strong></p><p>造成……的因素包裹……</p><p><strong>29. The primary /leading reason /cause is that… …can be another reason. A further reason is that…</strong></p><p>主要原因是……。……也可能是另一个原因。第三个原因是……</p><p><strong>30. AS for /Among the factors for…, … counts for the half, the rest depends on…</strong></p><p>就导致……的因素而言，……是一部分原因，另一部分原因是……</p><h4 id="七、中间-结尾段常用引出结局方法句型"><a href="#七、中间-结尾段常用引出结局方法句型" class="headerlink" title="**七、中间/**结尾段常用引出结局方法句型"></a>**七、中间/**<strong>结尾段常用引出结局方法句型</strong></h4><p><strong>31. How to…? The key words are as follows. To begin with,… Next,… Finally,…</strong></p><p>如何……？关键措施如下。首先，……其次，……最后，……</p><p><strong>32. The impacts could be minimized if we follow the suggestions as follow. One suggestion is… Another suggestion is… A further suggestion is…</strong></p><p>如果我们采用以下建议，有可能将影响降到最低。建议一是……建议而是……建议三是……</p><p><strong>33. Such… would not… if we knew the following ways to handle… First,… Second,… Third,…（虚拟语气）</strong></p><p>如果我们掌握了以下处理……的方法，如此的……可能不会…… 第一个方法是…… 第二个方法是……第三个方法是……</p><h4 id="八、结尾段常用引出“我”的个人观点句型"><a href="#八、结尾段常用引出“我”的个人观点句型" class="headerlink" title="八、结尾段常用引出“我”的个人观点句型"></a><strong>八、结尾段常用引出“我”的个人观点句型</strong></h4><p><strong>34. As far as I am concerned, I agree with…</strong></p><p>就我个人而言，我支持……</p><p><strong>35.As</strong> <strong>to me, the former /latter opinion is more acceptable.</strong></p><p>对我来说，前/后一种观点更可以接受。</p><p><strong>36. For my part, I am on the side of…</strong></p><p>对我来说，我站在……那边。</p><p><strong>37. As I see it,…</strong></p><p>就我看来,……</p><p><strong>38. From my perspective, I…</strong></p><p>就我而言，我……</p><h4 id="九、图表作文开头段常用引出总体（变化）趋势句型"><a href="#九、图表作文开头段常用引出总体（变化）趋势句型" class="headerlink" title="九、图表作文开头段常用引出总体（变化）趋势句型"></a><strong>九、图表作文开头段常用引出总体（变化）趋势句型</strong></h4><p><strong>39. As can be seen from the line /bar / chart /table that… increased / rose /grew dramatically from…</strong></p><p>从图表可见，自……以来，……出现了极大地增长。</p><p><strong>40. It can be seen /concluded from the chart that… dropped /declined /fell /reduced slightly to…</strong></p><p>依图可见/判断，……小幅下降到了……</p><p><strong>41. The period… to… saw… increase /drop in the number /percentage of…</strong> </p><p>……至……期间，……的数量/比重出现了……的增长/下降。</p><p><strong>42. There is a… fluctuation during… /The number of … fluctuates between… and…</strong></p><p>……期间，出现了……波动。/……至……期间，……数量出现了波动。</p><h4 id="十、书信作文开头段常用句型（最后一句主要在下级给上级写信时用）"><a href="#十、书信作文开头段常用句型（最后一句主要在下级给上级写信时用）" class="headerlink" title="十、书信作文开头段常用句型（最后一句主要在下级给上级写信时用）"></a><strong>十、书信作文开头段常用句型（最后一句主要在下级给上级写信时用）</strong></h4><p><strong>43. With regard to your inquiry about…, I’d like to make some conducive suggestions.</strong></p><p>对于你来信问我关于……，现提供几条建议。</p><p><strong>44. I am writing to express my views concerning…</strong></p><p>我写信时要提出关于……的看法。</p><p><strong>45. I am very sorry to occupy your precious time, but I really need to talk about… /but I am writing to express my views concerning…</strong></p><p>很抱歉占用您的宝贵时间，可是我确实想要谈谈……。/可是我写信时要提出关于……的看法。</p><h4 id="十一、书信作文中间段常用提建议句型"><a href="#十一、书信作文中间段常用提建议句型" class="headerlink" title="十一、书信作文中间段常用提建议句型"></a><strong>十一、书信作文中间段常用提建议句型</strong></h4><p><strong>46. I would like to suggest that… / I would like to make a recommendation that…</strong></p><p>我想建议……</p><p><strong>47. May I suggest that…?</strong></p><p>我可以提一点……建议吗？</p><p><strong>48. If I were you , I would…</strong></p><p>如果我是你，我会……</p><h4 id="十二、书信作文结尾段常用句型"><a href="#十二、书信作文结尾段常用句型" class="headerlink" title="十二、书信作文结尾段常用句型"></a><strong>十二、书信作文结尾段常用句型</strong></h4><p><strong>49.Please take good consideration of my advice.</strong></p><p>请仔细考虑我的建议。</p><p><strong>50. I hope what I mentioned above will…****希望我以上所说的会……</strong></p><p><strong>Chapter One</strong> <strong>文章开头句型</strong> </p><p><strong>1-1</strong> <strong>对立法 :</strong> **先引出其他人的不同看法,**<strong>然后提出自己的看法或者偏向于某一看法,</strong> <strong>适用于有争议性的主题.</strong> <strong>例如(e.g)</strong> </p><p><strong>[1]. When asked about….., the vast/overwhelming majority of people say that ……. But I think/view a bit differently.</strong> </p><p><strong>[2]. When it comes to …. , some people bielive that ……. Others argue/claim that the opposite/reverse is true . There is probably some truth in both arguements/statements , but (I tend to the profer/latter …)</strong> </p><p><strong>[3]. Now, it is commonly/generally/widely believed/held/acknowledged that …. They claim/ believe/argue that … But I wonder/doubt whether…..</strong> </p><p><strong>1-2</strong> <strong>现象法</strong> <strong>引出要剖析的现象或者问题,</strong> <strong>然后评论 .</strong> </p><p><strong>[1]. Recently the rise in problem of/(phenomenon of) … has cause/aroused public/popular/wide/ worldwide concern.</strong> </p><p><strong>[2]. Recently the issue of the problem of/the phenomenon of …has been brought into focus. ( has been brouth to public attention)</strong> </p><p><strong>[3].Inflation/Corruption/Social inequality … is yet another of the new and bitter truth we have to learn to face now/constantly.</strong> </p><p><strong>—– To be continued !!</strong> </p><p><strong>1-3</strong> **观点法 —-****开门见山,**<strong>直接了当地提出自己对要讨论的问题的看法.</strong> </p><p><strong>[1]. Never history has the change of .. been as evident as … Nowhere in the world/China has the issue/idea of .. benn more visible/popular than…</strong> </p><p><strong>[2]. Now people in growing/significant numbers are beginnig/coming to realize/accept/(be aware) that…</strong> </p><p><strong>[3]. Now there is a growing awareness/recognation ot the necessity to……Now people become increasingly aware/conscious of the importance of ……</strong> </p><p><strong>[4]. Perhaps it is time to have a fresh look at the attitude/idea that…….</strong> </p><p><strong>1-4</strong> <strong>引用法 —–</strong> <strong>先引出名人名言或者有代表性的看法,</strong> <strong>来引出文章要展开论述的观点!</strong> </p><p><strong>[1]. “Knowledge is power.” such is the remark made by Bacon.This remark has been shared by more and more people .</strong> </p><p><strong>“Education is not complete with gradulation.” Such is the opnion of a great American philosopher. Now more and more people share his opnion.</strong> </p><p><strong>[2].”………” How often we hear such statements/words like thoses /this .</strong> </p><p><strong>In our own days we are used to hearing such traditional complains as this “……”.</strong> </p><p><strong>1-5</strong> <strong>比较法 ——</strong> **通过对过去,**<strong>现在</strong> **两种不同的倾向,**<strong>观点的比较 ,</strong> <strong>引出文章要讨论的观点.</strong> </p><p><strong>[1]. For years, …had been viewed as … But people are taking a fresh look now. With the growing … , people ……. .</strong> </p><p><strong>[2]. People used to think that … (In the past, ….) But people now share this new.</strong> </p><p><strong>1-6</strong> <strong>故事法 —-</strong> <strong>先讲一个较短的故事来引发读者的兴趣,</strong> <strong>引出文章的主题.</strong> </p><p><strong>[1]. Once in (a newspaper) , I read of/learnt …. The phenemenon of … has aroused public concern.</strong> </p><p><strong>[2]. I have a friend who … Should he …. ? Such a dilemma we are often confront with in our daily life.</strong> </p><p><strong>[3]. Once upon a time , there lived a man who … This story may be (unbelievable) , but it still has a realistic significance now.</strong> </p><p><strong>1-8</strong> <strong>问题法 —–</strong> <strong>先用讨论或解答的设问,</strong> <strong>引出自己观点,</strong> <strong>适用于有争议性的话题.</strong> </p><p><strong>Should/What …… ? Options of … vary greatly , some …, others …</strong> </p><p><strong>But in my opinion , …… .</strong> </p><p><strong>Chapter 2</strong> <strong>文章中间主体内容句型</strong></p><p><strong>原因结果分析</strong></p><p><strong>3-1-1.</strong> <strong>基本原因 —</strong> <strong>分析某事物时,</strong> <strong>用此句型说明其基本的或者多方面的原因.</strong> </p><p><strong>[1]. Why … ? For one thing.. For another …</strong> </p><p><strong>[2]. The answer to this problem invovles many factors. For one thing… For another…… Still another …</strong> </p><p><strong>[3]. A number of factors , both physical and psychological affect …. /both individual and social contribute to ….</strong> </p><p><strong>3-1-2</strong> <strong>另一原因 ——–&gt;</strong> <strong>在分析了基本原因之后,</strong> <strong>再补充一个次要的或者更重要时用!</strong> </p><p><strong>[1]. Another important factor is ….</strong> </p><p><strong>[2]. … is also responsible for the change/problem.</strong> </p><p><strong>[3]. Certainly , the … is not the sole reason for …..</strong> </p><p><strong>3-1-3</strong> <strong>后果影响 ———</strong> <strong>分析某事物可能造成的后果或者带来的影响 .</strong> </p><p><strong>[1]. It will produce a profound/far-reaching effect/impact on….</strong> </p><p><strong>[2]. In involves some serious consequence for ……..</strong> </p><p><strong>比较对照句型</strong></p><p><strong>3-2-1.</strong> <strong>两者比较 —&gt;</strong> <strong>比较两事物,</strong> <strong>要说出其一超过另一个,</strong> <strong>或肯定一事物的优点,</strong> <strong>也肯定其缺点的时候用 !</strong> </p><p><strong>[1]. The advantages gained from A are much greater than the advantages we gain from B.</strong> </p><p><strong>[2]. Indeed, A carries much weight when compared with B.</strong> </p><p><strong>[3]. There is no doubt that it has its negative effects as well as positive effects.</strong></p><p><strong>3-2-2 .</strong> **两者相同/**<strong>相似 ——&gt;</strong> <strong>比较两事物共同都有或者共同都没有的特点时用!</strong> </p><p><strong>[1]. A and B have several thing in common. They are similar in that…..</strong> </p><p><strong>[2]. A bears some sriking resemblance(s) to B.</strong> </p><p><strong>Chapter Three</strong> <strong>文章结尾形式</strong> </p><p><strong>2-1</strong> <strong>结论性———</strong> **通过对文章前面的讨论 ,**<strong>引出或重申文章的中心思想及观点 .</strong> </p><p><strong>[1]. From what has been discussed above, we may safely draw the conclusion that …..</strong> </p><p><strong>[2]. In summary/In a word , it is more valuable …….</strong> </p><p><strong>2-2</strong> <strong>后果性——</strong> <strong>揭示所讨论的问题若不解决,</strong> <strong>将产生的严重后果.</strong> </p><p><strong>[1]. We must call for an immediate method , because the current phenomenon of … , if allowed to proceed, will surely lead to the heavy cost of …….</strong> </p><p><strong>[2]. Obviously , if we ignore/are blind to the problem , there is every chance that .. will be put in danger.</strong> </p><p><strong>2-3</strong> <strong>号召性 ——–</strong> <strong>呼吁读者行动起来,</strong> <strong>采取行动或提请注意.</strong> </p><p><strong>[1]. It is time that we urged an immediate end to the undesirable tendcy of ……</strong> </p><p><strong>[2]. It is essential thar effective measures should be taken to correct the tendency.</strong> </p><p><strong>2-4</strong> <strong>建议性 ——–</strong> <strong>对所讨论的问题提出建议性的意见,</strong> <strong>包括建议和具体的解决问题的方法.</strong> </p><p><strong>[1]. While it cannot be solved immediately, still there are ways. The most popular is …. Another method is … Still another one is …..</strong> </p><p><strong>[2]. Awareness/Recognition of the problem is the first step toward the situation.</strong> </p><p><strong>2-5</strong> <strong>方向性的结尾方式 —-</strong> <strong>其与建议性的唯一差别就是对问题解决提出总的,</strong> <strong>大体的方向或者指明前景.</strong> </p><p><strong>[1]. Many solutions are being offered here , all of them make some sense, but none is adequate enough. The problem should be recognized in a wide way .</strong> </p><p><strong>[2]. There is no quick method to the issue of .., but .. might be helpful/benefical.</strong></p><p><strong>[3]. The great challenge today is …… There is much difficulty , but ……..</strong> </p><p><strong>2–6</strong> <strong>意义性的结尾方式 ——–&gt;</strong> **文章结尾的时候,**<strong>从更高的更新的角度指出所讨论的问题的重要性以及其深远的意义!</strong> </p><p><strong>[1]. Following these suggestions may not guarantee the success, but the pay off might be worth the effort . It will not only benefit but also benefit …..</strong> </p><p><strong>[2]. In any case, whether it is posotive or negative, one thing is certain that it will undoubtedly ..</strong> </p><h4 id="英语四级作文万能句（一）段首句"><a href="#英语四级作文万能句（一）段首句" class="headerlink" title="英语四级作文万能句（一）段首句"></a><strong>英语四级作文万能句（一）段首句</strong></h4><p><strong>1.</strong> <strong>关于……人们有不同的观点。一些人认为……</strong> </p><p><strong>There are different opinions among people as to ____ .Some people suggest that ____.</strong> </p><p><strong>2.</strong> <strong>俗话说（常言道）……，它是我们前辈的经历，但是，即使在今天，它在许多场合仍然适用。</strong></p><p><strong>There is an old saying______. It”s the experience of our forefathers<strong><strong>，however</strong></strong>，it is correct in many cases even today.</strong> </p><p><strong>3.</strong> <strong>现在，……，它们给我们的日常生活带来了许多危害。首先，……；其次，……。更为糟糕的是……。</strong></p><p><strong>Today, <strong><strong>, which have brought a lot of harms in our daily life. First, ____ Second,</strong></strong>. What makes things worse is that______.</strong> </p><p><strong>4.</strong> <strong>现在，……很普遍，许多人喜欢……，因为……，另外（而且）……。</strong> </p><p><strong>Nowadays<strong><strong>，it is common to ______. Many people like ______ because ______. Besides</strong></strong>，______.</strong> </p><p><strong>5.</strong> <strong>任何事物都是有两面性，……也不例外。它既有有利的一面，也有不利的一面。</strong></p><p><strong>Everything has two sides and ______ is not an exception****，it has both advantages and disadvantages.</strong> </p><p><strong>6.</strong> <strong>关于……人们的观点各不相同，一些人认为（说）……，在他们看来，……</strong></p><p><strong>People’s opinions about ______ vary from person to person. Some people say that _<em><strong><strong>.To them,</strong></strong></em>.</strong> </p><p><strong>7.</strong> <strong>人类正面临着一个严重的问题……，这个问题变得越来越严重。</strong> </p><p><strong>Man is now facing a big problem ______ which is becoming more and more serious.</strong> </p><p><strong>8.</strong> <strong>……已成为人的关注的热门话题，特别是在年青人当中，将引发激烈的辩论。</strong></p><p><strong>______ has become a hot topic among people****，especially among the young and heated debates are right on their way.</strong> </p><p><strong>9.</strong> <strong>……在我们的日常生活中起着越来越重要的作用，它给我们带来了许多好处，但同时也引发一些严重的问题。</strong></p><p><strong>______ has been playing an increasingly important role in our day-to-day life.it has brought us a lot of benefits but has created some serious problems as well.</strong> </p><p><strong>10.</strong> **根据图表/****数字/****统计数字/****表格中的百分比/****图表/****条形图/**<strong>成形图可以看出……。很显然……，但是为什么呢？</strong> </p><p>*<em>According to the figure/number/statistics/percentages in the /chart/bar graph/line/graph</em><em><strong>，it can be seen that______ while. Obviously</strong></em>*，______**<strong>，but why?</strong> </p><h4 id="（二）中间段落句"><a href="#（二）中间段落句" class="headerlink" title="（二）中间段落句"></a><strong>（二）中间段落句</strong></h4><p><strong>1.</strong> <strong>相反，有一些人赞成……，他们相信……，而且，他们认为……。</strong> </p><p><strong>On the contrary<strong><strong>，there are some people in favor of ___.At the same time</strong></strong>，they say____.</strong> </p><p><strong>2.</strong> <strong>但是，我认为这不是解决……的好方法，比如……。最糟糕的是……。</strong> </p><p><strong>But I don”t think it is a very good way to solve <strong><strong>.For example****，</strong></strong>.Worst of all****，___.</strong> </p><p><strong>3.</strong> <strong>……对我们国家的发展和建设是必不可少的，（也是）非常重要的。首先，……。而且……，最重要的是……</strong></p><p><strong><strong><strong><strong>is necessary and important to our country”s development and construction. First****，</strong></strong></strong>.What”s more, <em><strong><strong>.Most important of all,</strong></strong></em>_.</strong> </p><p><strong>4.</strong> <strong>有几个可供我们采纳的方法。首先，我们可以……。</strong> </p><p><strong>There are several measures for us to adopt. First, we can______</strong> </p><p><strong>5.</strong> <strong>面临……，我们应该采取一系列行之有效的方法来……。一方面……，另一方面，</strong></p><p>*<em>Confronted with______<strong><strong>，we should take a series of effective measures to______. For one thing</strong></strong>，______For another</em>*<strong>，______</strong> </p><p><strong>6.</strong> <strong>早就应该拿出行动了。比如说……，另外……。所有这些方法肯定会……。</strong></p><p><strong>It is high time that something was done about it. For example. ____<em>.In addition. <em><strong><strong>.All these measures will certainly</strong></strong></em></em>.</strong> </p><p><strong>7.</strong> <strong>为什么……？第一个原因是……；第二个原因是……；第三个原因是……。总的来说，……的主要原因是由于……</strong></p><p><strong>Why______? The first reason is that ______.The second reason is ______.The third is ______.For all this, the main cause of ______due to ______.</strong> </p><p><strong>8.</strong> <strong>然而，正如任何事物都有好坏两个方面一样，……也有它的不利的一面，象……。</strong></p><p><strong>However, just like everything has both its good and bad sides, ______also has its own disadvantages, such as ______.</strong> </p><p><strong>9.</strong> <strong>尽管如此，我相信……更有利。</strong> </p><p><strong>Nonetheless, I believe that ______is more advantageous.</strong> </p><p><strong>10.</strong> <strong>完全同意……这种观点（陈述），主要理由如下：</strong> </p><p><strong>I fully agree with the statement that ______ because______.</strong> </p><h4 id="（三）结尾句"><a href="#（三）结尾句" class="headerlink" title="（三）结尾句"></a><strong>（三）结尾句</strong></h4><p><strong>1.</strong> <strong>至于我，在某种程度上我同意后面的观点，我认为……</strong> </p><p><strong>As far as I am concerned, I agree with the latter opinion to some extent. I think that ____.</strong> </p><p><strong>2.</strong> <strong>总而言之，整个社会应该密切关注……这个问题。只有这样，我们才能在将来……。</strong></p><p><strong>In a word, the whole society should pay close attention to the problem of ______.Only in this way can ______in the future.</strong> </p><p><strong>3.</strong> <strong>但是，……和……都有它们各自的优势（好处）。例如，……，而……。然而，把这两者相比较，我更倾向于（喜欢）……</strong></p><p><strong>But ______and <strong><strong><strong>have their own advantages. For example, <em><strong><strong>, while</strong></strong></em>. Comparing this with that, however, I prefer to</strong></strong></strong>.</strong> </p><p><strong>4.</strong> <strong>就我个人而言，我相信……，因此，我坚信美好的未来正等着我们。因为……</strong></p><p><strong>Personally, I believe that_____. Consequently, I’m confident that a bright future is awaiting us because______.</strong> </p><p><strong>5.</strong> <strong>随着社会的发展，……。因此，迫切需要……。如果每个人都愿为社会贡献自已的一份力量，这个社会将要变得越来越好。</strong></p><p><strong>With the development of society, ______.So it”s urgent and necessary to ____.If every member is willing to contribute himself to the society, it will be better and better.</strong> </p><p><strong>6.</strong> <strong>至于我（对我来说，就我而言），我认为……更合理。只有这样，我们才能……</strong></p><p><strong>For my part, I think it reasonable to_____. Only in this way can you _____.</strong> </p><p><strong>7.</strong> <strong>对我来说，我认为有必要……。原因如下：第一，……；</strong> <strong>第二，……；最后……但同样重要的是……</strong> </p><p><strong>In my opinion, I think it necessary to____. The reasons are as follows. First _____.Second <strong><strong><strong>. Last but not least,</strong></strong></strong>.</strong> </p><p><strong>8.</strong> <strong>在总体上很难说……是好还是坏，因为它在很大程度上取决于……的形势。然而，就我个人而言，我发现……。</strong></p><p><strong>It is difficult to say whether <em><strong><strong>is good or not in general as it depends very much on the situation of</strong></strong></em><em>. However, from a personal point of view find</em>_____.</strong> </p><p><strong>9.</strong> <strong>综上所述，我们可以清楚地得出结论……</strong> </p><p><strong>From what has been discussed above, we may reasonably arrive at the conclusion that____.</strong> </p><p><strong>10.</strong> <strong>如果我们不采取有效的方法，就可能控制不了这种趋势，就会出现一些意想不到的不良后果，所以，我们应该做的是……</strong></p><p><strong>If we can not take useful means, we may not control this trend, and some undesirable result may come out unexpectedly, so what we should do is_____.</strong> </p><p><strong>linked to</strong> 与…有关</p><p><strong>have unpleasant associations with</strong> 没什么好感</p><p><strong>praise and abuse</strong> 赞扬和批评</p><p><strong>seem to fail to take into account</strong> 似乎忽视了</p><p><strong>is not complete with</strong> 不能随着毕业而结束</p><p><strong>it comes to</strong> 说到</p><p><strong>contributes directly to</strong>有助于</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/29/AUTOCAD2014/"/>
    <url>/2019/11/29/AUTOCAD2014/</url>
    
    <content type="html"><![CDATA[<h1 id="AUTOCAD2014"><a href="#AUTOCAD2014" class="headerlink" title="AUTOCAD2014"></a>AUTOCAD2014</h1><p><strong>L直线</strong>；<strong>PL二维多段线，W宽度</strong></p><p><strong>A圆弧</strong></p><p><strong>AL命令行文本框</strong></p><p><strong>C画圆</strong></p><p><strong>CO：copy</strong>，同时拷贝距离相等多个图形：<strong>CO-&gt;陈列</strong></p><p><strong>DIS测量端点距离</strong></p><p><strong>DIV等分点</strong></p><p><strong>M移动</strong></p><p><strong>MI对称</strong></p><p>找到等分点，使其更加明显显示出来–&gt;格式</p><p><strong>ME等距等分</strong></p><p><strong>REC矩形@长,宽</strong></p><p><strong>POL正多边形</strong></p><p><strong>相对坐标@Δx,Δy，@L&lt;α</strong></p><p>L：两点之间的距离（正值)</p><p>α：角度——第一点的x正方向与两点连线的夹角。（顺时针为负值，逆时针为正值）</p><p><strong>矩形选框</strong>：cad的默认选择的加选，若要减选按住shift键减选即可，单个物体多了也可以点一下来减少选区</p><p>从左向右：必须选全部；</p><p>从右到走：选部分即可选全部；</p><p>若要用线不规则选框，使用栏选</p><p><strong>esc：取消选择</strong></p><p><strong>滚轮按住不放可以使用鼠标平移</strong>，<strong>滚轮双击可以将图纸完整显示出来</strong></p><p><strong>CH特性</strong></p><p><strong>RO旋转</strong></p><p><strong>SC缩放</strong></p><p><strong>BR打断</strong>：切断线段</p><p><strong>X分解</strong>：将多段线分开</p><p><strong>J合并</strong>：(join)组合物体</p><p><strong>O偏移</strong>：(offset)</p><p><strong>EX延申</strong> 修剪按住shift选择</p><p><strong>S拉伸</strong></p><p><strong>AR阵列</strong></p><p><strong>H填充命令</strong>、<strong>HE对填充物体进行修改</strong></p><p><strong>CHA倒角</strong>，将纸片折起来</p><p><strong>F圆角命令</strong></p><h4 id="标注"><a href="#标注" class="headerlink" title="标注"></a>标注</h4><p><strong>DLI</strong>, *DIMLINEAR（<strong>直线标注</strong>）<br><strong>DAL</strong>, *DIMALIGNED（<strong>对齐标注</strong>）<br><strong>DRA</strong>, *DIMRADIUS（<strong>半径标注</strong>）<br><strong>DDI</strong>, *DIMDIAMETER（<strong>直径标注</strong>）<br><strong>DAN</strong>, *DIMANGULAR（<strong>角度标注</strong>）<br><strong>DCE</strong>, *DIMCENTER（<strong>中心标注</strong>）<br><strong>DOR</strong>, *DIMORDINATE（<strong>点标注</strong>）<br><strong>TOL</strong>, *TOLERANCE（<strong>标注形位公差</strong>）<br><strong>LE</strong>, *QLEADER（<strong>快速引出标注</strong>）<br><strong>DBA</strong>, *DIMBASELINE（<strong>基线标注</strong>）<br><strong>DCO</strong>, *DIMCONTINUE（<strong>连续标注</strong>）<br><strong>D</strong>, *DIMSTYLE（<strong>标注样式</strong>）<br><strong>DED</strong>, *DIMEDIT（<strong>编辑标注</strong>）<br><strong>DOV</strong>, *DIMOVERRIDE(<strong>替换标注系统变量</strong>)</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/15/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <url>/2019/11/15/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h3 id="6-1数据类型"><a href="#6-1数据类型" class="headerlink" title="6.1数据类型"></a>6.1数据类型</h3><h4 id="类型有何不同"><a href="#类型有何不同" class="headerlink" title="类型有何不同"></a>类型有何不同</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c">类型名称：<span class="hljs-keyword">int</span>、<span class="hljs-keyword">long</span>、<span class="hljs-keyword">double</span><br>输入输出时的格式化：%d、%ld、％If<br>所表达的数的范围：<span class="hljs-keyword">char</span>&lt;<span class="hljs-keyword">short</span>&lt;<span class="hljs-keyword">int</span>&lt;<span class="hljs-keyword">float</span>&lt;<br><span class="hljs-keyword">double</span><br>·内存中所占据的大小：<span class="hljs-number">1</span>个字节到<span class="hljs-number">16</span>个字节<br>·内存中的表达形式：二进制数（补码）、编码<br></code></pre></td></tr></table></figure><h4 id="sizeof–静态的"><a href="#sizeof–静态的" class="headerlink" title="sizeof–静态的"></a>sizeof–静态的</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//是一个运算符，给出某个类型或变量再内存中所占据的字节数</span><br><span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">int</span>)<br><span class="hljs-keyword">sizeof</span>(i)<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">int</span> a；<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(double)=%td\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">double</span>));<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;sizeof(a)=%td\n&quot;</span>,<span class="hljs-keyword">sizeof</span>(a))；<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>；<br>&#125;<br><span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">double</span>)=<span class="hljs-number">16</span><br><span class="hljs-keyword">sizeof</span>(a)=<span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//char:1字节（8比特）</span><br><span class="hljs-comment">//short:2字节</span><br><span class="hljs-comment">//int:取决于编译器(CPU)，通常的意义是“1个字&quot;</span><br><span class="hljs-comment">//long 取决于编译器℃(U)，通常的意义是“1个字&quot;</span><br><span class="hljs-comment">//longlong 8字节</span><br></code></pre></td></tr></table></figure><h4 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h4><p>char是一种整数，也是一种特殊的类型：字符。<br>这是因为:<br>用单引号表示的字符字面量：，’1’,’a’<br>‘’也是一个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>和<span class="hljs-built_in">scanf</span>里用％<span class="hljs-number">0</span>来输入输出字符<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br>intmain()<br>&#123;<br>    Char c；<br>    <span class="hljs-keyword">char</span> d;<br>    c = <span class="hljs-number">1</span>;<br>    d =<span class="hljs-string">&#x27;A&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(c==d)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;相等\n&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;不相等\n&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;c==%d\n&quot;</span>,c);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;d==%d\n&quot;</span>,d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>不相等</p><p>c=1</p><p>d=65</p><h4 id="字符计算"><a href="#字符计算" class="headerlink" title="字符计算"></a>字符计算</h4><p>一个字符加一个数字得到ASCii码表中那个数之后的字符<br>两个字符的减，得到它们在表中的距离</p><h4 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h4><p>字母在ASCii表中是顺序排列的<br>大写字母和小写字母是分开排列的，并不在一起<br><strong>‘a’-‘A’可以得到两段之间的距离</strong>，于是<br><strong>a+’a’-‘A’可以把一个大写字母变成小写字母</strong>，而<br><strong>a+’A’-‘a’可以把一个小写字母变成大写字母</strong></p><h4 id="逃逸字符"><a href="#逃逸字符" class="headerlink" title="逃逸字符"></a>逃逸字符</h4><p>用来表达无法印出来的控制字符或特殊字符，它由一个反斜杠“&quot;开头，后面跟上另一个字符，这两个字符合起来，组成了一个字符</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">printf</span>（<span class="hljs-string">&quot;请分别输入身高的英尺和英寸，</span><br><span class="hljs-string">&quot;</span>如输入\<span class="hljs-string">&quot;57\&quot;表示5英尺7英寸：&quot;</span>）；<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/01/aseprite-%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <url>/2019/11/01/aseprite-%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="aseprite-快捷键"><a href="#aseprite-快捷键" class="headerlink" title="aseprite-快捷键"></a>aseprite-快捷键</h1><h4 id="1-pen-tool"><a href="#1-pen-tool" class="headerlink" title="1.pen tool:"></a>1.pen tool:</h4><p>[B]、pixel-perfect :避免像素多个累计 (p.s.产生锯齿状的线条、Symmetry Options:对称选项(view-Symmetry Options)</p><p>simple ink(简单墨水)/alpha compsiting(透明度)<br><img src="/images/1.png"></p><h4 id="2-Line-tool"><a href="#2-Line-tool" class="headerlink" title="2.Line tool:"></a>2.Line tool:</h4><p>直线：[L]、[shift]/[ctrl]</p><p>曲线：[L]+[SHIFT]</p><h4 id="3-Shape-tool"><a href="#3-Shape-tool" class="headerlink" title="3.Shape tool"></a>3.Shape tool</h4><p>[U]、[shift]+[U]椭圆、按住[shift]画正圆</p><h4 id="4-Contour"><a href="#4-Contour" class="headerlink" title="4.Contour"></a>4.Contour</h4><p>[D]、[shift]+[D]多边形工具</p><h4 id="5-Mouse"><a href="#5-Mouse" class="headerlink" title="5. Mouse"></a>5. Mouse</h4><p>左键绘图、右键清除(mask)、中键拖动画布、[block]+左键拖动画布</p><h4 id="6-Eraser"><a href="#6-Eraser" class="headerlink" title="6.Eraser"></a>6.Eraser</h4><p>[E]</p><h4 id="7-Eyedropper"><a href="#7-Eyedropper" class="headerlink" title="7.Eyedropper"></a>7.Eyedropper</h4><p>[Alt]</p><h4 id="8-Paint-Bucket"><a href="#8-Paint-Bucket" class="headerlink" title="8.Paint Bucket"></a>8.Paint Bucket</h4><p>[G]、contiguous(连续):替换所有一样的颜色</p><h4 id="9-Selection"><a href="#9-Selection" class="headerlink" title="9.Selection"></a>9.Selection</h4><p>[M]选择工具 or [W]魔术棒(contiguous)</p><p>取消选定[ctrl]+[D]</p><h4 id="10-layer"><a href="#10-layer" class="headerlink" title="10.layer"></a>10.layer</h4><p>[Tap]、创建图层[shift]+[N]、新建图层[crtl]+[N]</p><p>右键-remove删除图层、右键-duplicate复制图层</p><h4 id="11-Palette-Editor-调色板"><a href="#11-Palette-Editor-调色板" class="headerlink" title="11.Palette Editor(调色板)"></a>11.Palette Editor(调色板)</h4><p>[F4]</p><h4 id="12-Sorting-Palette-分类面板"><a href="#12-Sorting-Palette-分类面板" class="headerlink" title="12.Sorting Palette(分类面板)"></a>12.Sorting Palette(分类面板)</h4><p>箭头<br><img src="/images/2.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>信息编码</title>
    <link href="/2019/10/29/%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/"/>
    <url>/2019/10/29/%E4%BF%A1%E6%81%AF%E7%BC%96%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h1 id="信息编码"><a href="#信息编码" class="headerlink" title="信息编码"></a>信息编码</h1><h2 id="一-简介"><a href="#一-简介" class="headerlink" title="一.简介"></a>一.简介</h2><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>​       <strong>信息编码（Information Coding）</strong>是为了方便信息的存储、检索和使用，在进行信息处理时赋予信息元素以代码的过程。即用不同的代码与各种信息中的基本单位组成部分建立一一对应的关系。信息编码必须标准、系统化，设计合理的编码系统是关系信息管理系统生命力的重要因素。</p><h3 id="2-含义"><a href="#2-含义" class="headerlink" title="2.含义"></a>2.含义</h3><p>​        在通信理论中，编码是对原始信息符号按一定的数学规则所进行的变换。使编码的目的是要使信息能够在保证一定质量的条件下尽可能迅速地传输至信宿。</p><p>​        在通信中一般要解决两个问题：一是在不失真或允许一定程度失真的条件下，如何用尽可能少的符号来传递信息，这是信源编码问题；其次是在信道存在干扰的情况下，如何增加信号的抗干扰能力，同时又使信息传输率最大，这是信道编码问题。</p><p>​        信源编码定理（申农第一定理）给出了解决前一个问题的可能性，并同时给出了一种编码方法；有噪信道编码定理（申农第二定理）指出存在着这样的编码，它可使传输的错误概率接近于信道的容量，从而给出了解决后一问题的可能性。</p><p>​        因此，在通信中使用编码手段可以使失真和信道干扰的影响达到最小，同时能以接近信道容量的信息传输率来传送信息。</p><h3 id="3-功能"><a href="#3-功能" class="headerlink" title="3.功能"></a>3.功能</h3><p>(1).<strong>鉴别</strong> 编码是鉴别信息分类对象的唯一标识。</p><p>(2).<strong>分类</strong> 当分类对象按一定属性分类时，对每一类别设计一个编码，这时编码可以作为区分对象类别的标识。这种标识要求结构清晰，毫不含糊。</p><p>(3).<strong>排序</strong> 由于编码所有的符号都具有一定的顺序，因而可以方便地按此顺序进行排序。</p><p>(4)<strong>.专用含义</strong> 由于某种需要，当采用一些专用符号代表特定事物或概念时，编码就提供一定的专用含义，如某些分类对象的技术参数、性能指标等。</p><h3 id="4-目的"><a href="#4-目的" class="headerlink" title="4.目的"></a>4.目的</h3><p> 信息编码的目的在于为计算机中的数据与实际处理的信息之间建立联系，提高信息处理的效率。 </p><h3 id="5-基本原则"><a href="#5-基本原则" class="headerlink" title="5.基本原则"></a>5.基本原则</h3><p>信息编码的基本原则是在逻辑上要满足使用者的要求，又要适合于处理的需要；</p><p>结构易于理解和掌握；</p><p>要有广泛的适用性，易于扩充。</p><h3 id="6-代码类型"><a href="#6-代码类型" class="headerlink" title="6.代码类型"></a>6.代码类型</h3><p>​       一般应有的代码有两类，一类是有意义的代码，即赋予代码一定的实际意义，便于分类处理；一类是无意义的代码，仅仅是赋予信息元素唯一的代号，便于对信息的操作。常用的代码类型有：<br>（1）<strong>顺序码</strong>，即接信息元素的顺序依次编码；<br>（2）<strong>区间码</strong>，即用一代码区间代表某一信息组；<br>（3）<strong>记忆码</strong>，即能帮助联想记忆的代码。</p><p>​        信息的表现形式多种多样，因而编码的方案也非常多。例如：我国制定的包括一、二级汉字和常用符号的图形字符代码（GB 5007-85），日文、韩文等其他文字与符号的“大5码”（BIG 5），英文字符的“ASCII码”（American Standard Code for Information Interchange) 。</p><h3 id="7-系统设计"><a href="#7-系统设计" class="headerlink" title="7.系统设计"></a>7.系统设计</h3><p>(1)、<strong>确定系统目标</strong>：</p><p>​        A.根据系统的总目标确定PDM系统的信息内容，对企业与产品相关的数据与信息进行全面调查；</p><p>​        B.分析各类信息的性质、特征；</p><p>​        C.优化和重组信息分类；</p><p>​        D.统一定义信息名称，提供系统设计数据。</p><p> 主要有以下方面的信息：物料、设计文件（方案、计算书等）、工艺文件（工艺路线、工艺过程卡片等）、产品图纸、更改单等。</p><p> (2)、<strong>数据调查分析</strong>：<br>        a.<u>初步调查</u>：初步调查是对企业的基本情况进行调查，包括企业生产计划、生产类型、产品品种、产量、设备、工艺、生产能力、质量、成本、产品的稳定性、产品的发展趋势、库存、销售和服务情况等。<br>       b.<u>现状调查</u>：根据初步调查所确定的信息范围对企业现行的信息分类、编码情况和产品结构数据等进行深入的调查，收集全部应有单据、报表、台帐明细表、各类文件等。<br>       c.<u>特征分析</u>：对收集到的信息采用特征表的方法进行特征分析，对需要统一名称的或多名称的事物或概念、数据项和数据元统一定义。</p><p>(3)、<strong>确定清单</strong>：初步整理收集来的信息，列出清单或名称表，并尽可能使用文字、数字的代码进行描述。</p><p>(4)、<strong>制定编码规则</strong>：</p><p>​       每个信息均应有独立的代码，信息代码一般是由分类码和识别码组成的复合码。分类码是表示信息类别的代码，识别码是表示信息特征(如结构形状、材料、工艺等)的代码。<br>​       信息分类编码系统的结构一般采用十进分类法系统。十进分类法系统中，层次是以树的结构形式表示，各码位数字的位置依前一位而定，并用0～9数字表示，每个码位表达一个固定的含义。<br>​       为了保证代码正确的输入，对较长的代码和那些关键性的代码，应加校验码，以检查其输入、传输等操作而产生的错误。<br>​       不同类别的信息可以有不同的编码规则，对同一类信息采用等长编码。</p><p>(5)、<strong>建立编码系统</strong>：</p><p>​       选用实际应用中已经成熟的编码系统，尽量采用企业已存在的各种不同内容的信息代码（物料代码、产品代码和工装代码等），予以试套、调整和修改以变为本企业的信息编码系统。<br>(6)、<strong>验证</strong>：</p><p>​       编码系统形成后，应对编码系统进行试套验证、修改和补充，以确保编码系统的可靠性及适用性。</p><p>(7)、<strong>发布实施</strong>：</p><p>​       全部分类系统、编码系统和各种代码应按企业标准</p><p>(8)、<strong>结论</strong><br>       产品信息编码是离散型制造企业实施信息化的基础工作，它是实施PDM的前提，更是实施ERP的必要条件，对一个集团企业，如果其子公司业务相关联，不管是单地点或是多地点公司，都应当采用统一的编码体系。</p><p>​       科学设计一套编码体系是保障PDM/ERP成功的关键，在进行编码体系设计时，应当要有标准化人员、产品设计人员、采购人员、生产管理人员等人的共同参与，充分考虑好各独立子系统的需求，同时，更要考虑好各子系统编码的集成，以免产生新的系统孤岛。</p><h2 id="二-数值信息编码"><a href="#二-数值信息编码" class="headerlink" title="二.数值信息编码"></a>二.数值信息编码</h2><h3 id="1-进制"><a href="#1-进制" class="headerlink" title="1.进制"></a>1.进制</h3><p>​       <strong>进位制</strong>是一种记数方式，亦称<strong>进位计数法</strong>或<strong>位值计数法</strong>。</p><p>​       利用这种记数法，可以使用有限种数字符号来表示所有的数值。一种进位制中可以使用的数字符号的数目称为这种进位制的基数或底数。若一个进位制的基数为n，即可称之为n进位制，简称n进制。</p><p>​       现在最常用的进位制是十进制，这种进位制通常使用10个阿拉伯数字（即0-9）进行记数。</p><h4 id="（1）-常见进位制及其用途"><a href="#（1）-常见进位制及其用途" class="headerlink" title="（1）.常见进位制及其用途"></a>（1）.常见进位制及其用途</h4><table><thead><tr><th><strong>底</strong>/<strong>基数</strong></th><th><strong>名称</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td><a href="https://zh.wikipedia.org/wiki/2">2</a></td><td><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6">二进制</a></td><td>几乎所有的<a href="https://zh.wikipedia.org/wiki/%E8%A8%88%E7%AE%97%E6%A9%9F">计算机</a>内部都使用二进位制，分别为“0”和“1”表示关和开。用于大多数<a href="https://zh.wikipedia.org/wiki/%E7%94%B5%E5%AD%90%E8%AE%A1%E6%95%B0%E5%99%A8">电子计数器</a>。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/6">6</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%85%AD%E8%BF%9B%E5%88%B6">六进制</a></td><td>6是2和3的乘积，在<a href="https://zh.wikipedia.org/wiki/%E9%AA%B0%E5%AD%90">骰子</a>常用，它表示三个的“对”或两个的“三个群”，在<a href="https://zh.wikipedia.org/wiki/%E9%AA%B0%E5%AD%90">骰子</a>常用。六位数字为“0-5”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/8">8</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%85%AB%E8%BF%9B%E5%88%B6">八进制</a></td><td>偶尔用于计算机领域，2到3次幂。八位数字为“0-7”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/10">10</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E8%BF%9B%E5%88%B6">十进制</a></td><td>世界上最常见的算术运算位进制系统，它是<a href="https://zh.wikipedia.org/wiki/2">2</a>和<a href="https://zh.wikipedia.org/wiki/5">5</a>的<a href="https://zh.wikipedia.org/wiki/%E4%B9%98%E7%A7%AF">乘积</a>，用于大多数机械计数器。其十位数字为 “0-9”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/12">12</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E4%BA%8C%E8%BF%9B%E5%88%B6">十二进制</a></td><td>因为有多个约数如2，<a href="https://zh.wikipedia.org/wiki/3">3</a>，<a href="https://zh.wikipedia.org/wiki/4">4</a>和<a href="https://zh.wikipedia.org/wiki/6">6</a>的易于整除性，它传统上用以表示数量和总数，如一打即为十二个单位。十二位数字为“0-9”，接着是“A”和“B”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/16">16</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6">十六进制</a></td><td>经常用于计算机领域，2到4次<a href="https://zh.wikipedia.org/wiki/%E5%86%AA">幂</a>。十六位数字为“0-9”，接着是“A-F”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/20">20</a></td><td><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%8D%81%E8%BF%9B%E5%88%B6">二十进制</a></td><td>因为有多个约数如2，<a href="https://zh.wikipedia.org/wiki/4">4</a>，<a href="https://zh.wikipedia.org/wiki/5">5</a>和<a href="https://zh.wikipedia.org/wiki/10">10</a>的易于整除性，在几种传统文化中的数字系统，仍然被用于计数。二十位数字为“0-9”，接着是“A-J”。</td></tr><tr><td><a href="https://zh.wikipedia.org/wiki/60">60</a></td><td><a href="https://zh.wikipedia.org/wiki/%E5%85%AD%E5%8D%81%E9%80%B2%E5%88%B6">六十进制</a></td><td>起源于古代苏美尔并传给巴比伦人。六十成为3,4和5的乘积。今天用作现代<a href="https://zh.wikipedia.org/wiki/%E5%9C%93%E5%BD%A2">圆形</a><a href="https://zh.wikipedia.org/wiki/%E5%9D%90%E6%A8%99%E7%B3%BB">坐标系</a>（度，分，秒）和<a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93">时间</a><a href="https://zh.wikipedia.org/wiki/%E6%B8%AC%E9%87%8F">测量</a>（小时，分钟和秒）的基础。</td></tr></tbody></table><h4 id="（2）各进制介绍"><a href="#（2）各进制介绍" class="headerlink" title="（2）各进制介绍"></a>（2）各进制介绍</h4><h5 id><a href="#" class="headerlink" title></a></h5><h5 id="A-十进制"><a href="#A-十进制" class="headerlink" title="A.十进制"></a>A.十进制</h5><p>​       人类天然选择了十进制。</p><p>​       由于人类解剖学的特点，双手共有十根手指，故在人类自发采用的进位制中，十进制是使用最为普遍的一种。成语“屈指可数”某种意义上来说描述了一个简单计数的场景，而原始人类在需要计数的时候，首先想到的就是利用天然的算筹——手指来进行计数。</p><p>​       十进制编码几乎就是数值本身。</p><p>​       数值本身是一个数学上的抽象概念。经过长期的演化、融合、选择、淘汰，系统简便、功能全面的十进制计数法成为人类文化中主流的计数方法，经过基础教育的训练，大多数的人从小就掌握了十进制计数方法。盘中放了十个苹果，通过数苹果我们抽象出来“十”这一数值，它在我们的脑海中就以“10”这一十进制编码的形式存放和显示，而不是其它的形式。从这一角度来说，十进制编码几乎就是数值本身。</p><p>​       十进制的基数为10，数码由0-9组成，计数规律逢十进一。</p><h5 id="B-二进制"><a href="#B-二进制" class="headerlink" title="B.二进制"></a>B.二进制</h5><p>​       二进制有两个特点：它由两个数码0，1组成，二进制数运算规律是逢二进一。</p><p>​       为区别于其它进制，二进制数的书写通常在数的右下方注上基数2，或加后面加B表示，其中B是英文二进制Binary的首字母。</p><p>​       <strong>二进制具有以下优点：</strong></p><p>​       1） 二进制数中只有两个数码0和1，可用具有两个不同稳定状态的元器件来表示一位数码。例如，电路中某一通路的电流的有无，某一节点电压的高低，晶体管的导通和截止等。</p><p>​       2） 二进制数运算简单，大大简化了计算中运算部件的结构。</p><p>​       二进制数的加法和乘法基本运算法则各有四条，如下：</p><p>0+0=0，0+1=1，1+0=1，1+1=10</p><p>0×0=0，0×1=0，1×0=0，1×1=1</p><p>​       3）二进制天然兼容逻辑运算。</p><p>​       但是，二进制计数在日常使用上有个不便之处，就是位数往往很长，读写不便，如：把十进制的100000D写成二进制就是11000011010100000B，所以计算机领域我们实际采用的是十六进制。</p><p>​       二进制数转换为十六进制数时，长度缩减为原先的约四分之一，把十进制的100000写成八进制就是303240。十六进制的一个数位可代表二进制的四个数位。这样，十进制的100000写成十六进制就是186A0。</p><h5 id="C-四进制"><a href="#C-四进制" class="headerlink" title="C.四进制"></a>C.四进制</h5><p>​       四进制是以4为基数的进位制，以 0、1、2 和 3 四个数字表示任何实数。 　</p><p>​       四进制与所有固定基数的计数系统有着很多共同的属性，比如以标准的形式表示任何实数的能力（近乎独特），以及表示有理数与<a href="https://baike.baidu.com/item/%E6%97%A0%E7%90%86%E6%95%B0">无理数</a>的特性。</p><p>​       有关属性的讨论可参考十进制和二进制，下面是十进制0至15与四进制与二进制的互换。</p><h5 id="D-八进制"><a href="#D-八进制" class="headerlink" title="D.八进制"></a>D.八进制</h5><p>​       由于二进制数据的基数R较小，所以二进制数据的书写和阅读不方便，为此，在小型机中引入了八进制。八进制的基数R=8=2^3，有数码0、1、2、3、4、5、6、7，并且每个数码正好对应三位二进制数，所以八进制能很好地反映二进制。</p><p>​       八进制用下标8或数据后面加O表示 例如：二进制数据 （ 11 101 010 . 010 110 100 ）2 对应八进制数据 (352.264)8或352.264O。</p><h5 id="E-十六进制"><a href="#E-十六进制" class="headerlink" title="E.十六进制"></a>E.十六进制</h5><p>​       由于二进制数在使用中<a href="https://baike.baidu.com/item/%E4%BD%8D%E6%95%B0">位数</a>太长，不容易记忆，所以又提出了十六进制数。</p><p>​       十六进制数有两个基本特点：它由十六个数码：数字0～9加上字母A-F组成（它们分别表示<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>10～15），十六进制数运算规律是逢十六进一，即基数R=16=2^4，通常在表示时用尾部标志H或下标16以示区别，在c语言中用添加前缀0x以表示十六进制数。</p><p>​       例如：十六进制数4AC8可写成（4AC8）16，或写成4AC8H。</p><h4 id="3-位权概念"><a href="#3-位权概念" class="headerlink" title="(3) 位权概念"></a>(3) 位权概念</h4><p>​       对于形式化的进制表示，我们可以从0开始，对数字的各个数位进行编号，即个位起往左依次为编号0，1，2，……；对称的，从小数点后的数位则是-1，-2，……</p><p>​       进行进制转换时，我们不妨设源进制（转换前所用进制）的基为R1，目标进制（转换后所用进制）的基为R2，原数值的表示按数位为AnA(n-1）……A2A1A0.A-1A-2……，R1在R2中的表示为R，则有（AnA(n-1）……A2A1A0.A-1A-2……）R1=(An<em>R^n+A(n-1)<em>R^(n-1)+……+A2</em>R^2+A1</em>R^1+A0<em>R^0+A-1</em>R^(-1)+A-2*R^(-2))R2</p><p>​       （由于此处不可选择字体，说明如下：An，A2，A-1等符号中，n，2，-1等均应改为下标，而上标的幂次均用^作为前缀）</p><p>举例：</p><p>​       一个十进制数110，其中百位上的1表示1个10^2，既100，十位的1表示1个10^1，即10，个位的0表示0个10^0，即0。</p><p>​       一个二进制数110，其中高位的1表示1个2^2，即4，低位的1表示1个2^1，即2，最低位的0表示0个2^0，即0。</p><p>​       一个十六进制数110，其中高位的1表示1个16^2，即256，低位的1表示1个16^1，即16，最低位的0表示0个16^0，即0。</p><p>​       可见，在数制中，各位数字所表示值的大小不仅与该数字本身的大小有关，还与该数字所在的位置有关，我们称这关系为数的位权。</p><p>​       十进制数的位权是以10为底的幂，二进制数的位权是以2为底的幂，十六进制数的位权是以16为底的幂。数位由高向低，以降幂的方式排列。</p><h4 id="4-进数转换"><a href="#4-进数转换" class="headerlink" title="(4)进数转换"></a>(4)进数转换</h4><p><strong>1.二进制数、十六进制数转换为<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>（按权求和）</strong></p><p>​       二进制数、十六进制数转换为十进制数的规律是相同的。把二进制数（或十六进制数）按位权形式展开<a href="https://baike.baidu.com/item/%E5%A4%9A%E9%A1%B9%E5%BC%8F">多项式</a>和的形式，求其最后的和，就是其对应的十进制数——简称“按权求和”.</p><p>例如：把（1001.01)2 二进制计算。</p><p>解：（1001.01）2</p><p>=8<em>1+4</em>0+2<em>0+1</em>1+0*(1/2)+1*(1/4)</p><p>=8+0+0+1+0+0.25</p><p>=9.25</p><p>把（38A.11)16转换为十进制数</p><p>解：（38A.11)16</p><p>=3×16的2次方+8×16的1次方+10×16的0次方+1×16的-1次方+1×16的-2次方</p><p>=768+128+10+0.0625+0.0039</p><p>=906.0664</p><p><strong>2.<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>转换为二进制数，十六进制数（除2/16取余法）</strong></p><p>​       <a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0">整数</a>转换.一个十进制整数转换为二进制整数通常采用除二取余法，即用2连续除十进制数，直到商为0，<a href="https://baike.baidu.com/item/%E9%80%86%E5%BA%8F">逆序</a>排列余数即可得到――简称除二取余法．</p><p>例：将25转换为二进制数</p><p>解：25÷2=12 余数1</p><p>12÷2=6 余数0</p><p>6÷2=3 余数0</p><p>3÷2=1 <a href="https://baike.baidu.com/item/%E4%BD%99%E6%95%B0">余数</a>1</p><p>1÷2=0 余数1</p><p>所以25=(11001)2</p><p>同理，把<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>转换为十六进制数时，将基数2转换成16就可以了.</p><p>例：将25转换为十六进制数</p><p>解：25÷16=1 余数9</p><p>1÷16=0 余数1</p><p>所以25=(19)16</p><p><strong>3.二进制数与十六进制数之间的转换</strong></p><p>​       由于4位二进制数恰好有16个组合状态，即1位十六进制数与4位二进制数是一一对应的.所以，十六进制数与二进制数的转换是十分简单的.</p><p>​       (1）十六进制数转换成二进制数，只要将每一位十六进制数用对应的4位二进制数替代即可――简称位分四位.</p><p>例：将（4AF8B)16转换为二进制数.</p><p>解： 4 A F 8 B</p><p>0100 1010 1111 1000 1011</p><p>所以（4AF8B)16=(1001010111110001011)2</p><p>​       (2）二进制数转换为十六进制数，分别向左，向右每四位一组，依次写出每组4位二进制数所对应的十六进制数――简称四位合一位.</p><p>例：将二进制数（000111010110)2转换为十六进制数.</p><p>解： 0001 1101 0110</p><p>1 D 6</p><p>所以（111010110)2=（1D6）16</p><p>转换时注意最后一组不足4位时必须加0补齐4位</p><p><strong>数制转换的一般化</strong></p><p><strong>1）R进制转换成十进制</strong></p><p>任意R进制数据按权展开、相加即可得<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>据。例如：N = 1101.0101B = 1<em>2^3+1</em>2^2+0<em>2^1+1</em>2^0+0<em>2^-1+1</em>2^-2+0<em>2^-3+1</em>2^-4 = 8+4+0+1+0+0.25+0+0.0625 = 13.3125</p><p>N = 5A.8H = 5<em>16^1+A</em>16^0+8*16^-1 = 80+10+0.5 = 90.5</p><p><strong>2）十进制转换R 进制</strong></p><p>十进制数转换成R 进制数，须将<a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0%E9%83%A8%E5%88%86">整数部分</a>和<a href="https://baike.baidu.com/item/%E5%B0%8F%E6%95%B0">小数</a>部分分别转换.</p><p><strong>1.整数转换———除R 取余法</strong> 规则：</p><p>​       （1）用R 去除给出的十进制数的整数部分，取其余数作为转换后的R 进制数据的整数部分最低位数字； </p><p>​       （2）再用R去除所得的商，取其余数作为转换后的R 进制数据的高一位数字； </p><p>​       （3）重复执行（2）操作，一直到商为0结束。例如：115 转换成 Binary数据和Hexadecimal数据  所以 115 = 1110011 B = 73 H</p><p><strong>2．<a href="https://baike.baidu.com/item/%E5%B0%8F%E6%95%B0">小数</a>转换—————乘R 取整法</strong> 规则：</p><p>​       （1）用R 去乘给出的<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6%E6%95%B0">十进制数</a>的小数部分，取乘积的<a href="https://baike.baidu.com/item/%E6%95%B4%E6%95%B0%E9%83%A8%E5%88%86">整数部分</a>作为转换后R 进制小数点后第一位数字； </p><p>​       （2）再用R 去乘上一步乘积的小数部分，然后取新乘积的整数部分作为转换后R 进制小数的低一位数字； </p><p>​       （3）重复（2）操作，一直到乘积为0，或已得到要求精度<a href="https://baike.baidu.com/item/%E6%95%B0%E4%BD%8D">数位</a>为止。</p><p><strong>3.小数转换——整数退位法：</strong>举例：0.321d转成二进制，由于321不是5的倍数，用取余法、取整法可能要算很久，这时候我们可以采用整数退位法。原理如下：</p><p>n为转成的二进制数的小数位数</p><p>(x)10=(y)2</p><p>(x)10<em>2^n=(y)2</em>2^n</p><p>D=(x)10*2^n：计算10进制数，取整</p><p>D→T转成2进制数</p><p>(y)2=T/2^n=T*2^(-n)，T退位，位数不足前端补零</p><p>举例:</p><p>0.321转成二进制数，保留7位</p><p>0.321*2^7=41.088,取整数41</p><p>41=32+8+1即100000+1000+1=101001</p><p>退位，因只有6位而要求保留7位，所以是0.0101001</p><p>用在线转换工具校验，正确</p><p><strong>and、or、xor运算</strong></p><p>所有进制的and（和）、or（或）、xor（异或）运算都要转化为二进制进行运算，然后对齐位数，进行运算，具体的运算方法和普通的and、or、xor相同，如：1and1=1，1and0=0，0and0=0，1or1=1，1or0=1，0or0=0，1xor1=0，1xor0=1，0xor0=0。就是一般的二进制运算。</p><p>如：35（H）and5（O）=110101（B）and101（B）=101（B）=5（O）</p><h2 id="三-ASCII"><a href="#三-ASCII" class="headerlink" title="三. ASCII"></a>三. ASCII</h2><p><strong>ASCII ((American Standard Code for Information Interchange): 美国信息交换标准代码）</strong>是基于拉丁字母的一套电脑编码系统，主要用于显示现代英语和其他西欧语言。</p><p>它是最通用的信息交换标准，并等同于国际标准ISO/IEC 646。ASCII第一次以规范标准的类型发表是在1967年，最后一次更新则是在1986年，到目前为止共定义了128个字符。</p><h3 id="1-产生原因"><a href="#1-产生原因" class="headerlink" title="(1) 产生原因"></a>(1) 产生原因</h3><p>​      在计算机中，所有的数据在存储和运算时都要使用二进制数表示（因为计算机用高电平和低电平分别表示1和0），例如，像a、b、c、d这样的52个字母（包括大写）以及0、1等数字还有一些常用的符号（例如*、#、@等）在计算机中存储时也要使用二进制数来表示，而具体用哪些二进制数字表示哪个符号，当然每个人都可以约定自己的一套（这就叫编码），而大家如果要想互相通信而不造成混乱，那么大家就必须使用相同的编码规则，于是美国有关的标准化组织就出台了ASCII编码，统一规定了上述常用符号用哪些二进制数来表示 [2]  。<br>​      美国标准信息交换代码是由美国国家标准学会(American National Standard Institute , ANSI )制定的，是一种标准的单字节字符编码方案，用于基于文本的数据。它最初是美国国家标准，供不同计算机在相互通信时用作共同遵守的西文字符编码标准，后来它被国际标准化组织（International Organization for Standardization, ISO）定为国际标准，称为ISO 646标准。适用于所有拉丁文字字母 。</p><h3 id="2-表达方式"><a href="#2-表达方式" class="headerlink" title="(2) 表达方式"></a>(2) 表达方式</h3><p>​      ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数（剩下的1位二进制为0）来表示所有的大写和小写字母，数字0 到9、标点符号，以及在美式英语中使用的特殊控制字符 [1]  。</p><p>其中：<br>      <strong>0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符）</strong>，如控制符：LF（换行）、CR（回车）、FF（换页）、DEL（删除）、BS（退格)、BEL（响铃）等；通信专用字符：SOH（文头）、EOT（文尾）、ACK（确认）等；ASCII值为8、9、10 和13 分别转换为退格、制表、换行和回车字符。它们并没有特定的图形显示，但会依不同的应用程序，而对文本显示有不同的影响 [1]  。<br>      32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字。<br>      65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。<br>同时还要注意，在标准ASCII中，其最高位(b7)用作奇偶校验位。</p><p>​      所谓奇偶校验，是指在代码传送过程中用来检验是否出现错误的一种方法，一般分奇校验和偶校验两种。</p><p>​      奇校验规定：正确的代码一个字节中1的个数必须是奇数，若非奇数，则在最高位b7添1；偶校验规定：正确的代码一个字节中1的个数必须是偶数，若非偶数，则在最高位b7添1 [1]  。<br>​      后128个称为扩展ASCII码。许多基于x86的系统都支持使用扩展（或“高”）ASCII。扩展ASCII 码允许将每个字符的第8 位用于确定附加的128 个特殊符号字符、外来语字母和图形符号 [1]  。</p><h3 id="3-标准表"><a href="#3-标准表" class="headerlink" title="(3)标准表"></a>(3)标准表</h3><p>ASCII码表具体如下所示:</p><table><thead><tr><th>Bin(二进制)</th><th>Oct(八进制)</th><th>Dec(十进制)</th><th>Hex(十六进制)</th><th>缩写/字符</th><th>解释</th></tr></thead><tbody><tr><td>0000 0000</td><td>00</td><td>0</td><td>0x00</td><td>NUL(null)</td><td>空字符</td></tr><tr><td>0000 0001</td><td>01</td><td>1</td><td>0x01</td><td>SOH(start of headline)</td><td>标题开始</td></tr><tr><td>0000 0010</td><td>02</td><td>2</td><td>0x02</td><td>STX (start of text)</td><td>正文开始</td></tr><tr><td>0000 0011</td><td>03</td><td>3</td><td>0x03</td><td>ETX (end of text)</td><td>正文结束</td></tr><tr><td>0000 0100</td><td>04</td><td>4</td><td>0x04</td><td>EOT (end of transmission)</td><td>传输结束</td></tr><tr><td>0000 0101</td><td>05</td><td>5</td><td>0x05</td><td>ENQ (enquiry)</td><td>请求</td></tr><tr><td>0000 0110</td><td>06</td><td>6</td><td>0x06</td><td>ACK (acknowledge)</td><td>收到通知</td></tr><tr><td>0000 0111</td><td>07</td><td>7</td><td>0x07</td><td>BEL (bell)</td><td>响铃</td></tr><tr><td>0000 1000</td><td>010</td><td>8</td><td>0x08</td><td>BS (backspace)</td><td>退格</td></tr><tr><td>0000 1001</td><td>011</td><td>9</td><td>0x09</td><td>HT (horizontal tab)</td><td>水平制表符</td></tr><tr><td>0000 1010</td><td>012</td><td>10</td><td>0x0A</td><td>LF (NL line feed, new line)</td><td>换行键</td></tr><tr><td>0000 1011</td><td>013</td><td>11</td><td>0x0B</td><td>VT (vertical tab)</td><td>垂直制表符</td></tr><tr><td>0000 1100</td><td>014</td><td>12</td><td>0x0C</td><td>FF (NP form feed, new page)</td><td>换页键</td></tr><tr><td>0000 1101</td><td>015</td><td>13</td><td>0x0D</td><td>CR (carriage return)</td><td>回车键</td></tr><tr><td>0000 1110</td><td>016</td><td>14</td><td>0x0E</td><td>SO (shift out)</td><td>不用切换</td></tr><tr><td>0000 1111</td><td>017</td><td>15</td><td>0x0F</td><td>SI (shift in)</td><td>启用切换</td></tr><tr><td>0001 0000</td><td>020</td><td>16</td><td>0x10</td><td>DLE (data link escape)</td><td>数据链路转义</td></tr><tr><td>0001 0001</td><td>021</td><td>17</td><td>0x11</td><td>DC1 (device control 1)</td><td>设备控制1</td></tr><tr><td>0001 0010</td><td>022</td><td>18</td><td>0x12</td><td>DC2 (device control 2)</td><td>设备控制2</td></tr><tr><td>0001 0011</td><td>023</td><td>19</td><td>0x13</td><td>DC3 (device control 3)</td><td>设备控制3</td></tr><tr><td>0001 0100</td><td>024</td><td>20</td><td>0x14</td><td>DC4 (device control 4)</td><td>设备控制4</td></tr><tr><td>0001 0101</td><td>025</td><td>21</td><td>0x15</td><td>NAK (negative acknowledge)</td><td>拒绝接收</td></tr><tr><td>0001 0110</td><td>026</td><td>22</td><td>0x16</td><td>SYN (synchronous idle)</td><td>同步空闲</td></tr><tr><td>0001 0111</td><td>027</td><td>23</td><td>0x17</td><td>ETB (end of trans. block)</td><td>结束传输块</td></tr><tr><td>0001 1000</td><td>030</td><td>24</td><td>0x18</td><td>CAN (cancel)</td><td>取消</td></tr><tr><td>0001 1001</td><td>031</td><td>25</td><td>0x19</td><td>EM (end of medium)</td><td>媒介结束</td></tr><tr><td>0001 1010</td><td>032</td><td>26</td><td>0x1A</td><td>SUB (substitute)</td><td>代替</td></tr><tr><td>0001 1011</td><td>033</td><td>27</td><td>0x1B</td><td>ESC (escape)</td><td>换码(溢出)</td></tr><tr><td>0001 1100</td><td>034</td><td>28</td><td>0x1C</td><td>FS (file separator)</td><td>文件分隔符</td></tr><tr><td>0001 1101</td><td>035</td><td>29</td><td>0x1D</td><td>GS (group separator)</td><td>分组符</td></tr><tr><td>0001 1110</td><td>036</td><td>30</td><td>0x1E</td><td>RS (record separator)</td><td>记录分隔符</td></tr><tr><td>0001 1111</td><td>037</td><td>31</td><td>0x1F</td><td>US (unit separator)</td><td>单元分隔符</td></tr><tr><td>0010 0000</td><td>040</td><td>32</td><td>0x20</td><td>(space)</td><td>空格</td></tr><tr><td>0010 0001</td><td>041</td><td>33</td><td>0x21</td><td>!</td><td>叹号</td></tr><tr><td>0010 0010</td><td>042</td><td>34</td><td>0x22</td><td>“</td><td>双引号</td></tr><tr><td>0010 0011</td><td>043</td><td>35</td><td>0x23</td><td>#</td><td>井号</td></tr><tr><td>0010 0100</td><td>044</td><td>36</td><td>0x24</td><td>$</td><td>美元符</td></tr><tr><td>0010 0101</td><td>045</td><td>37</td><td>0x25</td><td>%</td><td>百分号</td></tr><tr><td>0010 0110</td><td>046</td><td>38</td><td>0x26</td><td>&amp;</td><td>和号</td></tr><tr><td>0010 0111</td><td>047</td><td>39</td><td>0x27</td><td>‘</td><td>闭单引号</td></tr><tr><td>0010 1000</td><td>050</td><td>40</td><td>0x28</td><td>(</td><td>开括号</td></tr><tr><td>0010 1001</td><td>051</td><td>41</td><td>0x29</td><td>)</td><td>闭括号</td></tr><tr><td>0010 1010</td><td>052</td><td>42</td><td>0x2A</td><td>*</td><td>星号</td></tr><tr><td>0010 1011</td><td>053</td><td>43</td><td>0x2B</td><td>+</td><td>加号</td></tr><tr><td>0010 1100</td><td>054</td><td>44</td><td>0x2C</td><td>,</td><td>逗号</td></tr><tr><td>0010 1101</td><td>055</td><td>45</td><td>0x2D</td><td>-</td><td>减号/破折号</td></tr><tr><td>0010 1110</td><td>056</td><td>46</td><td>0x2E</td><td>.</td><td>句号</td></tr><tr><td>0010 1111</td><td>057</td><td>47</td><td>0x2F</td><td>/</td><td>斜杠</td></tr><tr><td>0011 0000</td><td>060</td><td>48</td><td>0x30</td><td>0</td><td>字符0</td></tr><tr><td>0011 0001</td><td>061</td><td>49</td><td>0x31</td><td>1</td><td>字符1</td></tr><tr><td>0011 0010</td><td>062</td><td>50</td><td>0x32</td><td>2</td><td>字符2</td></tr><tr><td>0011 0011</td><td>063</td><td>51</td><td>0x33</td><td>3</td><td>字符3</td></tr><tr><td>0011 0100</td><td>064</td><td>52</td><td>0x34</td><td>4</td><td>字符4</td></tr><tr><td>0011 0101</td><td>065</td><td>53</td><td>0x35</td><td>5</td><td>字符5</td></tr><tr><td>0011 0110</td><td>066</td><td>54</td><td>0x36</td><td>6</td><td>字符6</td></tr><tr><td>0011 0111</td><td>067</td><td>55</td><td>0x37</td><td>7</td><td>字符7</td></tr><tr><td>0011 1000</td><td>070</td><td>56</td><td>0x38</td><td>8</td><td>字符8</td></tr><tr><td>0011 1001</td><td>071</td><td>57</td><td>0x39</td><td>9</td><td>字符9</td></tr><tr><td>0011 1010</td><td>072</td><td>58</td><td>0x3A</td><td>:</td><td>冒号</td></tr><tr><td>0011 1011</td><td>073</td><td>59</td><td>0x3B</td><td>;</td><td>分号</td></tr><tr><td>0011 1100</td><td>074</td><td>60</td><td>0x3C</td><td>&lt;</td><td>小于</td></tr><tr><td>0011 1101</td><td>075</td><td>61</td><td>0x3D</td><td>=</td><td>等号</td></tr><tr><td>0011 1110</td><td>076</td><td>62</td><td>0x3E</td><td>&gt;</td><td>大于</td></tr><tr><td>0011 1111</td><td>077</td><td>63</td><td>0x3F</td><td>?</td><td>问号</td></tr><tr><td>0100 0000</td><td>0100</td><td>64</td><td>0x40</td><td>@</td><td>电子邮件符号</td></tr><tr><td>0100 0001</td><td>0101</td><td>65</td><td>0x41</td><td>A</td><td>大写字母A</td></tr><tr><td>0100 0010</td><td>0102</td><td>66</td><td>0x42</td><td>B</td><td>大写字母B</td></tr><tr><td>0100 0011</td><td>0103</td><td>67</td><td>0x43</td><td>C</td><td>大写字母C</td></tr><tr><td>0100 0100</td><td>0104</td><td>68</td><td>0x44</td><td>D</td><td>大写字母D</td></tr><tr><td>0100 0101</td><td>0105</td><td>69</td><td>0x45</td><td>E</td><td>大写字母E</td></tr><tr><td>0100 0110</td><td>0106</td><td>70</td><td>0x46</td><td>F</td><td>大写字母F</td></tr><tr><td>0100 0111</td><td>0107</td><td>71</td><td>0x47</td><td>G</td><td>大写字母G</td></tr><tr><td>0100 1000</td><td>0110</td><td>72</td><td>0x48</td><td>H</td><td>大写字母H</td></tr><tr><td>0100 1001</td><td>0111</td><td>73</td><td>0x49</td><td>I</td><td>大写字母I</td></tr><tr><td>01001010</td><td>0112</td><td>74</td><td>0x4A</td><td>J</td><td>大写字母J</td></tr><tr><td>0100 1011</td><td>0113</td><td>75</td><td>0x4B</td><td>K</td><td>大写字母K</td></tr><tr><td>0100 1100</td><td>0114</td><td>76</td><td>0x4C</td><td>L</td><td>大写字母L</td></tr><tr><td>0100 1101</td><td>0115</td><td>77</td><td>0x4D</td><td>M</td><td>大写字母M</td></tr><tr><td>0100 1110</td><td>0116</td><td>78</td><td>0x4E</td><td>N</td><td>大写字母N</td></tr><tr><td>0100 1111</td><td>0117</td><td>79</td><td>0x4F</td><td>O</td><td>大写字母O</td></tr><tr><td>0101 0000</td><td>0120</td><td>80</td><td>0x50</td><td>P</td><td>大写字母P</td></tr><tr><td>0101 0001</td><td>0121</td><td>81</td><td>0x51</td><td>Q</td><td>大写字母Q</td></tr><tr><td>0101 0010</td><td>0122</td><td>82</td><td>0x52</td><td>R</td><td>大写字母R</td></tr><tr><td>0101 0011</td><td>0123</td><td>83</td><td>0x53</td><td>S</td><td>大写字母S</td></tr><tr><td>0101 0100</td><td>0124</td><td>84</td><td>0x54</td><td>T</td><td>大写字母T</td></tr><tr><td>0101 0101</td><td>0125</td><td>85</td><td>0x55</td><td>U</td><td>大写字母U</td></tr><tr><td>0101 0110</td><td>0126</td><td>86</td><td>0x56</td><td>V</td><td>大写字母V</td></tr><tr><td>0101 0111</td><td>0127</td><td>87</td><td>0x57</td><td>W</td><td>大写字母W</td></tr><tr><td>0101 1000</td><td>0130</td><td>88</td><td>0x58</td><td>X</td><td>大写字母X</td></tr><tr><td>0101 1001</td><td>0131</td><td>89</td><td>0x59</td><td>Y</td><td>大写字母Y</td></tr><tr><td>0101 1010</td><td>0132</td><td>90</td><td>0x5A</td><td>Z</td><td>大写字母Z</td></tr><tr><td>0101 1011</td><td>0133</td><td>91</td><td>0x5B</td><td>[</td><td>开方括号</td></tr><tr><td>0101 1100</td><td>0134</td><td>92</td><td>0x5C</td><td>\</td><td>反斜杠</td></tr><tr><td>0101 1101</td><td>0135</td><td>93</td><td>0x5D</td><td>]</td><td>闭方括号</td></tr><tr><td>0101 1110</td><td>0136</td><td>94</td><td>0x5E</td><td>^</td><td>脱字符</td></tr><tr><td>0101 1111</td><td>0137</td><td>95</td><td>0x5F</td><td>_</td><td>下划线</td></tr><tr><td>0110 0000</td><td>0140</td><td>96</td><td>0x60</td><td>`</td><td>开单引号</td></tr><tr><td>0110 0001</td><td>0141</td><td>97</td><td>0x61</td><td>a</td><td>小写字母a</td></tr><tr><td>0110 0010</td><td>0142</td><td>98</td><td>0x62</td><td>b</td><td>小写字母b</td></tr><tr><td>0110 0011</td><td>0143</td><td>99</td><td>0x63</td><td>c</td><td>小写字母c</td></tr><tr><td>0110 0100</td><td>0144</td><td>100</td><td>0x64</td><td>d</td><td>小写字母d</td></tr><tr><td>0110 0101</td><td>0145</td><td>101</td><td>0x65</td><td>e</td><td>小写字母e</td></tr><tr><td>0110 0110</td><td>0146</td><td>102</td><td>0x66</td><td>f</td><td>小写字母f</td></tr><tr><td>0110 0111</td><td>0147</td><td>103</td><td>0x67</td><td>g</td><td>小写字母g</td></tr><tr><td>0110 1000</td><td>0150</td><td>104</td><td>0x68</td><td>h</td><td>小写字母h</td></tr><tr><td>0110 1001</td><td>0151</td><td>105</td><td>0x69</td><td>i</td><td>小写字母i</td></tr><tr><td>0110 1010</td><td>0152</td><td>106</td><td>0x6A</td><td>j</td><td>小写字母j</td></tr><tr><td>0110 1011</td><td>0153</td><td>107</td><td>0x6B</td><td>k</td><td>小写字母k</td></tr><tr><td>0110 1100</td><td>0154</td><td>108</td><td>0x6C</td><td>l</td><td>小写字母l</td></tr><tr><td>0110 1101</td><td>0155</td><td>109</td><td>0x6D</td><td>m</td><td>小写字母m</td></tr><tr><td>0110 1110</td><td>0156</td><td>110</td><td>0x6E</td><td>n</td><td>小写字母n</td></tr><tr><td>0110 1111</td><td>0157</td><td>111</td><td>0x6F</td><td>o</td><td>小写字母o</td></tr><tr><td>0111 0000</td><td>0160</td><td>112</td><td>0x70</td><td>p</td><td>小写字母p</td></tr><tr><td>0111 0001</td><td>0161</td><td>113</td><td>0x71</td><td>q</td><td>小写字母q</td></tr><tr><td>0111 0010</td><td>0162</td><td>114</td><td>0x72</td><td>r</td><td>小写字母r</td></tr><tr><td>0111 0011</td><td>0163</td><td>115</td><td>0x73</td><td>s</td><td>小写字母s</td></tr><tr><td>0111 0100</td><td>0164</td><td>116</td><td>0x74</td><td>t</td><td>小写字母t</td></tr><tr><td>0111 0101</td><td>0165</td><td>117</td><td>0x75</td><td>u</td><td>小写字母u</td></tr><tr><td>0111 0110</td><td>0166</td><td>118</td><td>0x76</td><td>v</td><td>小写字母v</td></tr><tr><td>0111 0111</td><td>0167</td><td>119</td><td>0x77</td><td>w</td><td>小写字母w</td></tr><tr><td>0111 1000</td><td>0170</td><td>120</td><td>0x78</td><td>x</td><td>小写字母x</td></tr><tr><td>0111 1001</td><td>0171</td><td>121</td><td>0x79</td><td>y</td><td>小写字母y</td></tr><tr><td>0111 1010</td><td>0172</td><td>122</td><td>0x7A</td><td>z</td><td>小写字母z</td></tr><tr><td>0111 1011</td><td>0173</td><td>123</td><td>0x7B</td><td>{</td><td>开花括号</td></tr><tr><td>0111 1100</td><td>0174</td><td>124</td><td>0x7C</td><td>|</td><td>垂线</td></tr><tr><td>0111 1101</td><td>0175</td><td>125</td><td>0x7D</td><td>}</td><td>闭花括号</td></tr><tr><td>0111 1110</td><td>0176</td><td>126</td><td>0x7E</td><td>~</td><td>波浪号</td></tr><tr><td>0111 1111</td><td>0177</td><td>127</td><td>0x7F</td><td>DEL (delete)</td><td>删除</td></tr></tbody></table><h3 id="4-大小规则"><a href="#4-大小规则" class="headerlink" title="(4)大小规则"></a>(4)大小规则</h3><p>常见ASCII码的大小规则：0<del>9&lt;A</del>Z&lt;a~z。</p><p>​      1）数字比字母要小。如 “7”&lt;“F”；</p><p>​      2）数字0比数字9要小，并按0到9顺序递增。如 “3”&lt;“8” ；</p><p>​      3）字母A比字母Z要小，并按A到Z顺序递增。如“A”&lt;“Z” ；</p><p>​      4）同个字母的大写字母比小写字母要小32。如“A”&lt;“a” 。</p><p>几个常见字母的ASCII码大小： “A”为65；“a”为97；“0”为 48。</p><h3 id="5-问题"><a href="#5-问题" class="headerlink" title="(5)问题"></a>(5)问题</h3><p>​      在英语中，用128个符号编码便可以表示所有，但是用来表示其他语言，128个符号是不够的。比如，在法语中，字母上方有注音符号，它就无法用 ASCII 码表示。</p><p>​      于是，一些欧洲国家就决定，利用字节中闲置的最高位编入新的符号。比如，法语中的é的编码为130（二进制10000010）。这样一来，这些欧洲国家使用的编码体系，可以表示最多256个符号 。<br>​      但是，这里又出现了新的问题。不同的国家有不同的字母，因此，哪怕它们都使用256个符号的编码方式，代表的字母却不一样。比如，130在法语编码中代表了é，在希伯来语编码中却代表了字母Gimel (ג)，在俄语编码中又会代表另一个符号。但是不管怎样，所有这些编码方式中，0–127表示的符号是一样的，不一样的只是128–255的这一段。<br>​      至于亚洲国家的文字，使用的符号就更多了，汉字就多达10万左右。一个字节只能表示256种符号，肯定是不够的，就必须使用多个字节表达一个符号。比如，简体中文常见的编码方式是 GB2312，使用两个字节表示一个汉字，所以理论上最多可以表示 256 x 256 = 65536 个符号。</p><h3 id="6-扩展"><a href="#6-扩展" class="headerlink" title="(6)扩展"></a>(6)扩展</h3><ol><li>1981年IBM PC ROM256个字符的字符集，即IBM扩展字符集 [5]  。</li><li>1985年11Windows字符集被称作“ANSI字符集”，遵循了ANSI草案和ISO标准（ANSI/ISO8859-1-1987，简“Latin 1” [5]  。</li><li>为了解决中国、日本和韩国的象形文字符和ASCII的某种兼容性，出现了双字节字符集（DBCS：double-byte character set）。DBCS从 第256 代码开始，就像ASCII一样，最初的128个代码是ASCII。然而，较高的128个代码中的某些总是跟随着第二个字节。这两个字节一起（称作首字节和跟随字节）定义一个字符，通常是一个复杂的象形文字 [6]  。</li></ol><h3 id="7-汉字编码"><a href="#7-汉字编码" class="headerlink" title="(7)汉字编码"></a>(7)汉字编码</h3><p>​      目前的文字编码标准主要有 ASCII、<a href="https://baike.baidu.com/item/GB2312/483170">GB2312</a>、<a href="https://baike.baidu.com/item/GBK/481954">GBK</a>、<a href="https://baike.baidu.com/item/Unicode/750500">Unicode</a>等。ASCII 编码是最简单的西文编码方案。GB2312、GBK、GB18030 是汉字字符编码方案的国家标准。ISO/IEC 10646 和 Unicode 都是全球字符编码的国际标准 [4] 。下面对与汉字相关的编码方案GB2312，GBK与GB18030做简要的分析。</p><h4 id="GB2312-80-标准"><a href="#GB2312-80-标准" class="headerlink" title="GB2312-80 标准"></a>GB2312-80 标准</h4><p>​      GB2312-80 是 1980 年制定的中国汉字编码国家标准。共收录 7445 个字符，其中汉字 6763 个。GB2312 兼容标准 ASCII码，采用扩展 ASCII 码的编码空间进行编码，一个汉字占用两个字节，每个字节的最高位为 1。具体办法是：收集了 7445 个字符组成 94*94 的方阵，每一行称为一个“区”，每一列称为一个“位”，区号位号的范围均为 01-94，区号和位号组成的代码称为“区位码”。</p><p>​      区位输入法就是通过输入区位码实现汉字输入的。将区号和位号分别加上 20H，得到的 4 位<a href="https://baike.baidu.com/item/%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6/4162457">十六进制</a>整数称为<a href="https://baike.baidu.com/item/%E5%9B%BD%E6%A0%87%E7%A0%81/9886729">国标码</a>，编码范围为 0x2121～0x7E7E。为了兼容标准 ASCII 码，给国标码的每个字节加 80H，形成的编码称为<a href="https://baike.baidu.com/item/%E6%9C%BA%E5%86%85%E7%A0%81/8481225">机内码</a>，简称内码，是汉字在机器中实际的存储代码GB2312-80 标准的内码范围是 0xA1A1～0xFEFE。</p><h4 id="GBK-编码标准"><a href="#GBK-编码标准" class="headerlink" title="GBK 编码标准"></a>GBK 编码标准</h4><p>​      《汉字内码扩展规范》(<a href="https://baike.baidu.com/item/GBK/481954">GBK</a>) 于1995年制定，兼容GB2312、GB13000-1、BIG5 编码中的所有汉字，使用双字节编码，编码空间为 0x8140～0xFEFE，共有 23940 个码位，其中 GBK1 区和 GBK2 区也是 GB2312 的编码范围。收录了 21003 个汉字。<a href="https://baike.baidu.com/item/GBK/481954">GBK</a>向下与 GB 2312 编码兼容，向上支持 ISO 10646.1<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86/4495981">国际标准</a>，是前者向后者过渡过程中的一个承上启下的产物。</p><p>​      ISO 10646 是<a href="https://baike.baidu.com/item/%E5%9B%BD%E9%99%85%E6%A0%87%E5%87%86%E5%8C%96%E7%BB%84%E7%BB%87/779832">国际标准化组织</a>ISO 公布的一个编码标准，即 Universal Multilpe-Octet Coded Character Set（简称UCS），大陆译为《通用多八位编码字符集》，台湾译为《广用多八位元编码字元集》，它与 Unicode 组织的<a href="https://baike.baidu.com/item/Unicode/750500">Unicode</a>编码完全兼容。</p><p>​      ISO 10646.1 是该标准的第一部分《体系结构与基本多文种平面》。我国 1993 年以 GB 13000.1 国家标准的形式予以认可（即 GB 13000.1 等同于 ISO 10646.1） [7] 。</p><h4 id="GB18030编码标准"><a href="#GB18030编码标准" class="headerlink" title="GB18030编码标准"></a>GB18030编码标准</h4><p>​      目前的文字编码标准主要有 ASCII、GB2312、GBK、Unicode等。ASCII 编码是最简单的西文编码方案。GB2312、GBK、GB18030 是汉字字符编码方案的国家标准。</p><p>​      ISO/IEC 10646 和 Unicode 都是全球字符编码的国际标准 [4]  。下面对与汉字相关的编码方案GB2312，GBK与GB18030做简要的分析。</p><h4 id="GB2312-80-标准-1"><a href="#GB2312-80-标准-1" class="headerlink" title="GB2312-80 标准"></a>GB2312-80 标准</h4><p>​      GB2312-80 是 1980 年制定的中国汉字编码国家标准。共收录 7445 个字符，其中汉字 6763 个。GB2312 兼容标准 ASCII码，采用扩展 ASCII 码的编码空间进行编码，一个汉字占用两个字节，每个字节的最高位为 1。</p><p>​      具体办法是：收集了 7445 个字符组成 94*94 的方阵，每一行称为一个“区”，每一列称为一个“位”，区号位号的范围均为 01-94，区号和位号组成的代码称为“区位码”。区位输入法就是通过输入区位码实现汉字输入的。</p><p>​      将区号和位号分别加上 20H，得到的 4 位十六进制整数称为国标码，编码范围为 0x2121～0x7E7E。为了兼容标准 ASCII 码，给国标码的每个字节加 80H，形成的编码称为机内码，简称内码，是汉字在机器中实际的存储代码GB2312-80 标准的内码范围是 0xA1A1～0xFEFE [7]  。</p><h4 id="GBK-编码标准-1"><a href="#GBK-编码标准-1" class="headerlink" title="GBK 编码标准"></a>GBK 编码标准</h4><p>​      《汉字内码扩展规范》(GBK) 于1995年制定，兼容GB2312、GB13000-1、BIG5 编码中的所有汉字，使用双字节编码，编码空间为 0x8140～0xFEFE，共有 23940 个码位，其中 GBK1 区和 GBK2 区也是 GB2312 的编码范围。收录了 21003 个汉字。</p><p>​      GBK向下与 GB 2312 编码兼容，向上支持 ISO 10646.1国际标准，是前者向后者过渡过程中的一个承上启下的产物。ISO 10646 是国际标准化组织ISO 公布的一个编码标准，即 Universal Multilpe-Octet Coded Character Set（简称UCS），大陆译为《通用多八位编码字符集》，台湾译为《广用多八位元编码字元集》，它与 Unicode 组织的Unicode编码完全兼容。</p><p>​      ISO 10646.1 是该标准的第一部分《体系结构与基本多文种平面》。我国 1993 年以 GB 13000.1 国家标准的形式予以认可（即 GB 13000.1 等同于 ISO 10646.1） [7]  。</p><h4 id="GB18030编码标准-1"><a href="#GB18030编码标准-1" class="headerlink" title="GB18030编码标准"></a><strong>GB18030编码标准</strong></h4><p>​      国家标准GB18030-2000《信息交换用汉字编码字符集基本集的补充》是我国继GB2312-1980和GB13000-1993之后最重要的汉字编码标准，是我国计算机系统必须遵循的基础性标准之一。</p><p>​      GB18030-2000编码标准是由信息产业部和国家质量技术监督局在2000年 3月17日联合发布的，并且将作为一项国家标准在2001年的1月正式强制执行。</p><p>​      GB18030-2005《信息技术中文编码字符集》是我国制订的以汉字为主并包含多种我国少数民族文字（如藏、蒙古、傣、彝、朝鲜、维吾尔文等）的超大型中文编码字符集强制性标准，其中收入汉字70000余个 。</p>]]></content>
    
    
    <categories>
      
      <category>编程相关</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/10/23/%E5%A5%94%E8%B7%91%E5%90%A7!%E6%A2%85%E6%B4%9B%E6%96%AF/"/>
    <url>/2019/10/23/%E5%A5%94%E8%B7%91%E5%90%A7!%E6%A2%85%E6%B4%9B%E6%96%AF/</url>
    
    <content type="html"><![CDATA[<p><strong>人类最高级的浪漫 有两种</strong><br><strong>其中一种 莫过于面对未知也一往无前的勇气</strong><br><strong>另一种 是面对已知的悲剧也一往无前的勇气</strong>  </p><h3 id="太宰治《奔跑吧-梅洛斯》"><a href="#太宰治《奔跑吧-梅洛斯》" class="headerlink" title="太宰治《奔跑吧!梅洛斯》"></a>太宰治《奔跑吧!梅洛斯》</h3><blockquote><p>​    “到日落之前，还有一段时光。有人在等我。他毫不怀疑，坦然等着我。我是可以让人信赖的。一己的生死，无关紧要。说什么以死相酬，空话是没用的。我必须报答别⼈人对我的信赖，眼前只有一件事：奔跑吧，梅洛斯！”</p><p>“我今晚就要死了。我是为死而奔跑，为救出替代我的朋友而奔跑，为打败国王阴毒的奸谋而奔跑。”</p><p>   “是等待的人更痛苦呢，还是让人等待的人更痛苦呢。无论怎样，我已无需等待了，这才是痛苦的事。”</p></blockquote><h4 id="故事简介"><a href="#故事简介" class="headerlink" title="故事简介"></a>故事简介</h4><p>​    梅洛斯杯暴君抓住，要执行死刑，梅洛斯和暴君说，他可以赴死，但是请给他三天时间去完成妹妹的 婚礼，和家⼈人道别。以梅洛斯的朋友作为人质，如果在日落之前梅洛斯没能回来，暴君就处死他的朋友。 暴君不相信人与人之间的信任，断定梅洛斯⼀一定不会回来，答应了与他的约定。</p><p>​    将妹妹托付给姐夫，梅洛斯奔向刑场，欣然赴死。红⽇日尚未落下，梅洛斯倾尽全力奔跑，脑袋⼀一片空白。他忘掉了一切事情，只是以大的努力来奔跑。</p><p>​    他跑的越快，自己的生命结束得越快，但是就算这是后⼀一次奔跑，这是必死的⼀一次奔跑。地平线 上，太阳渐渐消失。当后一丝余晖将消逝之际，梅洛斯若疾风般冲进了刑场。</p><h4 id="相关歌曲"><a href="#相关歌曲" class="headerlink" title="相关歌曲"></a>相关歌曲</h4><h5 id="メロス-Melos"><a href="#メロス-Melos" class="headerlink" title="メロス   Melos"></a><em>メロス</em>   Melos</h5><p>歌手：<a href="https://music.163.com/artist?id=958003">水曜日のカンパネラ</a></p><p>网易云音乐播放地址：<a href="https://music.163.com/#/song?id=480517736">https://music.163.com/#/song?id=480517736</a> </p><p>沈みゆく太陽の10倍も速く          以西沉太阳的10倍速度</p><p>黒い風のように走ってった           在黑色的疾风中奔跑着</p><p>終コーナー回ったところで           在后的拐角处徘徊时</p><p>シラクスの塔楼が見えた               看到了了锡拉库斯的塔楼</p><p>走り出せメロス                               开始奔跑吧 梅洛斯</p><p>勝てるはずがない                           不可能胜利的</p><p>命の他何もない                               除了生命之外 什么都没有</p><p>走り出せメロス。                           开始奔跑吧 梅洛斯</p><p>どうせこれが後                               无论怎样 这是后一次了</p><p>神々も照覧あれ。                           诸神明鉴</p><h4 id="THE-LAST"><a href="#THE-LAST" class="headerlink" title="THE LAST"></a>THE LAST</h4><p>​        写这篇读书笔记(?是因为看了这篇文章，听了这首歌后便去拜读了太宰治的这篇文章，感受颇深，回味无穷。 <a href="https://m.weibo.cn/6515204261/4418239264253155">https://m.weibo.cn/6515204261/4418239264253155</a> </p><p>并且再次想起弹丸3绝望篇的那句话“你面对以希望为名的绝望微笑”。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/10/20/adobe%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <url>/2019/10/20/adobe%E8%BD%AF%E4%BB%B6%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<p> PS （基础操作每个人都该会）<br>AE （做特效必须学，各种意义上的全能轴心王）<br>Ai （做矢量插图和3维模型必须学）<br>blender （学来做玩具和素材修改器）<br>houdini （程序化场景模组搭建）<br>MAYA （电影制作，特效制作的轴心）<br>3D max （室内，建筑设计）<br>Zbrush (模型雕刻)<br>Substance (程序化PBR材质，照片源材质编辑)<br>LightRoom （图片快速修正）<br>Cinema 4D （创意三维动画，MG） </p><p><img src="/images/adobe.jpg"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
